[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Project scope"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* ProductiveNUS is a desktop application that provides an accessible platform for NUS computing students to manage and keep track of their academic tasks at hand.  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Motivation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* As a NUS Computing Student, you would probably have had **difficulties managing your"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "academic schedule**. You might often feel overwhelmed due to "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**tight deadlines** for your assignments along with a **high workload** which you might be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "on the verge of being unable to "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "cope with. In events like this, having a **disorganised timeline** makes your"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "situation worse. You might often **underestimate the time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "it takes** to complete your assignments and you might be **late for your lessons** as you were preoccupied "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "with completing them. However, all these"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "tasks still remain uncompleted. You might have been spinning your wheels."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* ProductiveNUS minimises such problems by helping you keep track of your schedule easily."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Aim"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Effective time management** among NUS Computing students, resulting in **higher productivity**."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Efficiency** in browsing through all your academic tasks (lessons and assignments) at once."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Better planning** of your academic schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## User stories"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| No. | As a...           | I can...                              | So that I can...                                                          |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "|-----|-------------------|---------------------------------------|---------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 1   | Student           | import my timetable from NUSMods      | better schedule my assignments with my lesson  timings taken into account |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 2   | Forgetful student | receive reminders for my assignments  | avoid forgetting to attend my lessons or do my work                       |"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 3   | Poor time manager | add and schedule assignments          | keep track of what needs  to be done                                      |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 4   | Poor time manager | delete assignments                    | remove assignments that I have completed  or added wrongly                |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 5   | Poor time manager | view lessons and assignments together | view all the assignments I have to complete amidst  my lessons            |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Current features supported"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Importing timetable from NUSMods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Adding assignments to ProductiveNUS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Listing lessons and assignments "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Deleting assignments from ProductiveNUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Reminders for assignments"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Exiting ProductiveNUS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-f11-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-f11-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-f11-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andreatanky": 50,
      "minhhhnguyen2000": 1,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    implementation \u0027com.googlecode.json-simple:json-simple:1.1.1\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    archiveName \u003d \u0027productivenus.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "andreatanky": 4,
      "hyngkng": 2,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[Click](https://ay2021s1-cs2103t-f11-3.github.io/tp/) to view the homepage for ProductiveNUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Andrea Tan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cimg src\u003d\"images/andreatanky.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[[github](https://github.com/andreatanky)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[[portfolio](team/andreatanky.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Choo Jia Xin"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cimg src\u003d\"images/choojiaxin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[[github](http://github.com/ChooJiaXin)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[[portfolio](team/choojiaxin.md)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Jerry Ho"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cimg src\u003d\"images/printinghelloworld.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[[github](http://github.com/printinghelloworld)] [[portfolio](team/printinghelloworld.md)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Hwang Yong Kang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cimg src\u003d\"images/hyngkng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[[github](http://github.com/hyngkng)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[[portfolio](team/hyngkng.md)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Nguyen Hoang Hai Minh"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cimg src\u003d\"images/minhhhnguyen2000.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "[[github](http://github.com/minhhhnguyen2000)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "[[portfolio](team/minhhhnguyen2000.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Testing"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 8,
      "hyngkng": 11,
      "minhhhnguyen2000": 4,
      "-": 30,
      "printinghelloworld": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### **Purpose**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This document specified architecture, software design decisions and features for the application, ProductiveNUS. It will provide you with the essential information on its development process."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### **Scope**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The intended audience of this document are developers, designers, and software testers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### **About ProductiveNUS**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNUS is a desktop application targeted at Computing students of National University of Singapore (NUS) to help them manage and schedule their academic tasks efficiently."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding an assignment)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `UI` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* stores the data in ProductiveNUS."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cAssignment\u003e` and an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* can save assignment and lesson data in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### \\[Implemented\\] Schedule an assignment"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The user can input a deadline and expected time for an assignment to get a suggested start time and end time to work on the assignment."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The suggested time will be within working hours from 6am to 11pm local time."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The expected hours for an assignment ranges from 1 to 5 hours."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The suggested time will not class with any of the suggested time for other assignments and lessons."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "User may find it convenient to be suggested a time slot where they can do their assignment before a specific date and at a"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "specific time which he is free from all lessons and other assignment."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- The schedule command is a typical command used in ProductiveNUS. It extends `Command` and overrides the method `execute` in `CommandResult`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- `ScheduleCommandParser` implements `Parser\u003cScheduleCommand\u003e` and it parses the user\u0027s input to return a `ScheduleCommand` object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- The constructor of `ScheduleCommand` takes in (`Index`, `ExpectedHours`, `DoBefore`) where `Index` is a zero-based index"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "with the prefix (expected/, dobefore/) in the user\u0027s input. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- The suggested schedule will be display in the assignment card shown in list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `schedule 3 expected/2 dobefore/01-01-2001 0101` - Suggest schedule for the 3rd assignment in the displayed assignment list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "with expected hours of 2 and need to be done before 01:01 01-01-2001."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `schedule 2 expected/5 dobefore/02-02-2002 0202` - Suggest schedule for the 2nd assignment in the displayed assignment "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "with expected hours of 5 and need to be done before 02:02 02-02-2002."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "A usage scenario would be when a user wants to schedule an assignment."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "1. The `execute` method of `LogicManager` is called when a user keys in an input into the application and `execute` takes in the input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "2. The `parseCommand` method of `ProductiveNusParser` parses the user input and returns an initialized `ScheduleCommandParser` object and further calls the `parse` method of this object to identify keywords and prefixes in the user input."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "3. If user input is valid, it returns a `ScheduleCommand` object, which takes in a predicate. (`ExpectedHours` in this example user input)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "4. There is return call to `LogicManager` which then calls the overridden `execute` method of `ScheduleCommand`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "6. The `execute` method returns a `ScheduleResult` object."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Import timetable feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The user can import information about their lessons into ProductiveNUS using their NUSMods timetable URL."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Added lessons can be found in the `Upcoming Tasks` section of ProductiveNUS."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `import url/https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01\u0026EC1301\u003dTUT:S28` - Adds an NUSMods semester 1 timetable"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " consisting of CS2100 tutorial 01 lessons and EC1301 tutorial S28 lessons."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Reasons for implementation:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Users may find it inconvenient to constantly refer to their NUSMods timetable whenever they want to check if they are"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "available on a specific date and time. By giving users the option to add their lesson information into ProductiveNUS,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "it will help increase the user\u0027s convenience as all their academic related schedule can be found in one place."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "As a student user, the following scenario is likely:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- The user wants to import their timetable so that they can better schedule their assignments with their lesson timings taken into account."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNUS can also better schedule the user\u0027s work with their timetable information available, avoiding any clashes"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "in schedule."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Current implementation:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- The import command is a typical command used in ProductiveNUS. It extends `Command` and overrides the method `execute`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "in `CommandResult`. `ImportCommandParser` implements `Parser\u003cImportCommand\u003e` and it parses the user\u0027s input to return an"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "`ImportCommand` object. The constructor of `ImportCommand` takes in the prefix url/ and the user\u0027s NUSMods timetable"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "url."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- A call to `TimetableRetriever` will be made. `TimetableRetriever` takes the user\u0027s timetable data which was parsed by"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "`ImportCommandParser` and makes a HTTP GET request to NUSMods API. NUSMods sends `TimetableRetriever` the relevant JSON"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "data. The data is parsed and returns as a list of `Lessons`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The following is the usage scenario of when a user imports an NUSMods timetable."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `execute` method of `LogicManager` is called when a user keys in an input into the application and `execute` takes in the input."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `parseCommand` method of `ProductiveNusParser` parses the user input and returns an initialized `ImportCommandParser` object and further calls the `parse` method of this object to identify the URL in the user input."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. It calls the `TimetableUrlParser` with the URL and it returns a `TimetableData` object."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. `ImportCommandParser` returns an `ImportCommand` object."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. There is return call to `LogicManager` which then calls the overridden `execute` method of `ImportCommand`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `execute` method of `ImportCommand` will call the `retrieveLessons` method from `TimetableRetriever`, which returns a list of lessons to be added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `execute` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The following sequence diagram shows the sequence when LogicManager executes `import` command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "![Interactions Inside the Logic Component for the `import url/URL` Command](images/ImportSequenceDiagram.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Find by specific fields feature"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The user can find assignments by providing keywords of the following fields:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- Name of assignment"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- Module code of assignment"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- Due date or time of assignment"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- Priority of assignment"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The user can find assignments with single or multiple keywords of the same type of field."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `find n/Lab` - Finds assignments with names that has \"Lab\"."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `find mod/CS2100 CS2103T` - Finds assignments from the modules CS2100 and CS2103T."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `find d/1200 24-10-2020` - Finds assignments with due time 1200 (regardless of date), and with due date 24-10-2020 (regardless of time)."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `find p/HIGH` - Finds assignments of high priority."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "If the user can search by only one field, it would restrict the user\u0027s process of viewing assignments."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "As a student user, the following scenarios are likely:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- The user wants to search for assignments with the highest priority, so that he knows what assignments to complete first."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- The user wants to search for assignments due on a particular date or time, so that he can complete it and submit his assignment on time."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- The user wants to view the details of one particular assignment with a specific name."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- The user wants to complete all assignments under a certain module first, before moving on with his next task."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "We thus concluded that finding by specific fields would be beneficial for users, and it would make it easier and more convenient for them to view assignments based on their needs."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### Prefixes used in identifying keywords"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The use of prefixes before keywords allows for validation of keywords in the user\u0027s input."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following prefixes are used to identify the type of keywords:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `/n` for name keywords"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `/mod` for module code keywords"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `/d` for due date or time keywords"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `/p` for priority keywords"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### Predicate classes "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![Class diagram for Predicate classes](images/PredicateClassDiagram.png)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "*Figure X: Class diagram for Predicate classes*"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following Predicate classes implements `Predicate\u003cAssignment\u003e` and specific ones are passed into the constructor of `FindCommand` when the user inputs keywords of its assigned field:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- NameContainsKeywordsPredicate for name keywords"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- ModuleCodeContainsKeywordsPredicate for module code keywords"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- DeadlineContainsKeywordsPredicate for date or time keywords"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- PriorityContainsKeywordsPredicate for priority keywords"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The keywords are stored in a `List\u003cString\u003e` that is passed into the constructor of the predicate so that the overridden `test` method from `Predicate\u003cAssignment\u003e` class can evaluate the keywords with the specific attribute of an assignment, being name, module code, deadline or priority, to return a boolean value."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### FindCommandParser Class"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `FindCommandParser` class implements `Parser\u003cFindCommand\u003e` and it is responsible for parsing input arguments with the `parse` method to create a new `FindCommand` object. It contains private methods which checks for the presence of multiple prefixes and invalid keywords, which will throw a `ParseException` if detected."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Its `parse` method takes in a string of user input. If there are no multiple prefixes found and user input is not empty, it would then check for the type of prefix present as well as whether there is a preamble before the prefix and after the `find` input command. This ensures that there are no invalid command formats used by the user. An example of a preamble in the user input would be `find hi n/Lab 3`, whereby \"hi\" makes it an invalid command format."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "If no invalid command format is detected, each keyword in the `List\u003cString\u003e` of keywords are parsed in a for loop. For name, module code and priority keywords, parsing is done via its parse method in `ParserUtil` to ensure that each keyword is valid. These parse methods are `parseName`, `parseModuleCode` and `parsePriority` respectively and they throw `ParseExceptions` in the event of invalid input. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "For date or time keywords, Regular Expressions are used to identify its format, with date format being identified with `^\\\\d{2}-\\\\d{2}-\\\\d{4}$` and time format being identified with `^\\\\d{4}$`. Once the format of keywords inputted by the user are identified, date keywords are parsed into `LocalDate` and time keywords are parsed into `LocalTime`. A `ParseException` will be thrown if a `DateTimeException` is caught in the event of failed parsing of date with `DateTimeFormatter` pattern `dd_MM-uuuu` or time with the `DateTimeFormatter` pattern `HHmm`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Upon successful parsing, a `FindCommand` object is returned."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### FindCommand Class"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `FindCommand` class extends abstract class `Command` and it is responsible for finding assignments based on the user\u0027s input keywords. It contains static `String` attributes of error messages to be displayed in the event of invalid user input, and a `Predicate\u003cAssignment\u003e` attribute, `predicate`. The constructor of `FindCommand` takes in a `Predicate\u003cAssignment\u003e` depending on the prefix or keywords in the user\u0027s input and its attribute `predicate` is initialized to this value."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " It overrides the method `execute` to return a `CommandResult` object, which provides the result of command execution. In the `execute` method, it calls the `updatedFilteredAssignmentList` method of a `Model` object, `model`, it takes in, so that the filter of the filtered assignment list will be updated by the given predicate and a list of filtered assignments will be displayed to the user, along with an indication message on the number of assignments listed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following is a usage scenario of when a user wants to find assignments with the name \u0027Lab\u0027."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. The `execute` method of `LogicManager` is called when a user keys in an input into the application and `execute` takes in the input."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "2. The `parseCommand` method of `ProductiveNusParser` parses the user input and returns an initialized `FindCommandParser` object and further calls the `parse` method of this object to identify keywords and prefixes in the user input."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "3. If user input is valid, it returns a `FindCommand` object, which takes in `NameContainsKeywordsPredicate` with the list of keywords."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "4. There is return call to `LogicManager` which then calls the `execute` method of `FindCommand`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "5. The `execute` method of `FindCommand` will call the `updateFilteredAssignmentList` method of the `Model` object."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "6. The `execute` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Given below is the sequence diagram for the interactions within `LogicManager` for the `execute(find n/Lab)` API call."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![Interactions Inside the Logic Component for the `find n/Lab` Command](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Remind assignments feature"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The user can set reminders for a single assignment or multiple assignments at a time."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Reminded assignments will be displayed in the `Your reminders` section in ProductiveNUS for easy referral."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `remind 3` - Sets reminders for the 3rd assignment in the displayed assignment list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `remind 1 4` - Sets reminders for the 1st and 4th assignment in the displayed assignment list."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "It is likely that the user will want to receive reminders for assignments with deadlines that are far away, so that he will not forget to complete those assignments. It is also likely that the user will want to receive reminders for assignments that require more attention, so that he will know which assignments to focus on and plan his time accordingly."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Displaying reminded assignments in a list separate from the main assignment list allows for easy referral and is hence more convenient for the user."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- The remind command extends abstract class `Command` and overrides the method `execute` in `CommandResult`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- `RemindCommandParser` implements `Parser\u003cRemindCommand\u003e` and it parses the user\u0027s input to return a `RemindCommand` object."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- The constructor of `RemindCommand` takes in `List\u003cIndex\u003e`, and each `Index` in `List\u003cIndex\u003e` is parsed from the zero based index of the user\u0027s input."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The following is a usage scenario of when the user wants to set reminders for the 2nd and 3rd assignment in their displayed assignment list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"remind 2 3\")` API call."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "![Interactions Inside the Logic Component for the `remind 2 3` Command](images/RemindMultipleSequenceDiagram.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. `execute(\"remind 2 3\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. `parseCommand(\"remind 2 3\")` parses the String `\"remind 2 3\"` and returns an initialized `RemindCommandParser` object. "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. `parseCommand(\"remind 2 3\")` calls the `parse` method in `RemindCommandParser` and checks if indexes inputted are valid."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. If the indexes are valid, it returns a `RemindCommand` object, which takes in `List\u003cIndex\u003e` containing `Index` `2` and `3`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. There is return call to `LogicManager` which then calls the overridden `execute` method of `RemindCommand`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. The `execute` method of `RemindCommand` will call the `checkForDuplicatedIndexes` method of `CommandLogic` to check for duplicated indexes "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. The `checkForInvalidIndexes` method of the `CommandLogic` is then called to check for any indexes not found in the displayed assignment list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. The `setAssignment` method of `Model` is repeatedly called, once for each `Index` in `List\u003cIndex\u003e`. In this case, the loop terminates after 2 times."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. A `CommandResult` object is returned from `execute()`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Prioritize assignments feature"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The user can set priorities for a single assignment."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Prioritized assignments will have a coloured tag in the assignment list section in ProductiveNUS."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `prioritize 1 p/LOW` - Sets a low priority (green tag) for the 1st assignment in the displayed assignment list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `prioritize 2 p/MEDIUM` - Sets a medium priority (orange tag) for the 2nd assignment in the displayed assignment list."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `prioritize 3 p/HIGH` - Sets a high priority (red tag) for the 3rd assignment in the displayed assignment list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "It is likely that the user will want to categorise their assignments into different priorities, each are of different"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "importance. This way it is easier for the user to plan our their schedule, possibly allocating more time to assignments"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "that are of greater priority."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- The prioritize command extends abstract class `Command` and overrides the method `execute` in `CommandResult`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- `PrioritizeCommandParser` implements `Parser\u003cPrioritizeCommand\u003e` and it parses the user\u0027s input to return a `PrioritizeCommand` object."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "- The constructor of `PrioritizeCommand` takes in `Index` and `Priority`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The following is a usage scenario of when the user wants to set a high priority for the 3rd assignment in their displayed assignment list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. `execute(\"prioritize 3 p/HIGH\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. `parseCommand(\"prioritize 3 p/HIGH\")` parses the String `\"prioritize 3 p/HIGH\"` and returns an initialized `PrioritizeCommandParser` object. "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. `parseCommand(\"prioritize 3 p/HIGH\")` calls the `parse` method in `PrioritizeCommandParser` and checks if index and priority input are valid."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. If the index and priority are valid, it returns a `PrioritizeCommand` object, which takes in `Index` `3` and `Priority` `HIGH`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. There is return call to `LogicManager` which then calls the overridden `execute` method of `PrioritizeCommand`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `execute` method of `PrioritizeCommand` will call the `setAssignment` method of `Model` to update the assignment with the new priority."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. The `updateFilteredAssignmentList` method of the `Model` is then called to display all assignments in the assignment list."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. A `CommandResult` object is returned from `execute()`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"prioritize 3 p/HIGH\")` API call."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "![Interactions Inside the Logic Component for the `prioritize 3 p/HIGH` Command](images/PrioritizeSequenceDiagram.png)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### List by days feature"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The user can list all his assignments with `list` without a subsequent argument index, or list assignments with "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deadlines within 1 to 50 days from the current date and time, with the number of days being an argument index after `list`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `list` - Lists all assignments"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `list 2` - Lists all assignments with deadline within 2 days (48 hours) from the current date (and time)."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "For example, if the current date and time is 22/10/2020 1200, assignments with deadlines from this date and time to"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "24/10/2020 1200 will be displayed."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- As a student user, he will want to view assignments that are due within days from the current date, so that he will know which assignments to complete first in order to meet the deadlines."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- It is different from the `find` command as users can list all assignments with deadlines within a time period (from the current date to a number of days later),"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "whereas finding assignments by date or time will only display assignments due on the particular day or time."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### ListCommandParser Class"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `ListCommandParser` class implements `Parser\u003cListCommand\u003e` and it is responsible for parsing input arguments with the `parse` method to create a new `ListCommand` object. Regular Expressions are used to identify the presence of an input argument in `args`, which takes into account all characters and even special characters. If no argument index is found in `args`, a `ListCommand` object with an empty constructor is returned, which will identify the command as list all assignments."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "If input argument is found, it is then checked with Regular Expressions whether the argument is in the range 1 to 50 inclusive. If it is within range, the string `args` is parsed into an `Index` which is then passed in as the argument to the parameterized constructor of `ListCommand` object that is returned."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### ListCommand Class"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `ListCommand` class extends abstract class `Command` and it is responsible for listing assignments based on the user\u0027s input command. It contains static `String` attributes of error messages to be displayed in the event of invalid user input, and an `Optional\u003cIndex\u003e` attribute, `numberOfDays`. There are overloaded constructors for `ListCommand`, one being empty and the other taking in an `Index` parameter. Within the empty constructor, the `numberOfDays` attribute will be initialized with an empty `Optional` instance and within the parameterized constructor, `numberOfDays` attribute will be initialized with the `Optional` of its parameter."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It overrides the method `execute` to return a `CommandResult` object, which provides the result of command execution. In the `execute` method, if `numberOfDays` is empty, a predicate `PREDICATE_SHOW_ALL_ASSIGNMENT` is passed into the `updatedFilteredAssignmentList` method of a `Model` object, `model`. If `numberOfDays` is not empty, `showLimitedAssignments` method with return type `Predicate\u003cAssignment\u003e` is passed into the `updatedFilteredAssignmentList` method. The `showLimitedAssignments` method uses lambda expressions to filter assignments with deadlines that fall within the number of days window inputted by the user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "As the list command allows for users to enter an optional index, we decided that there should be overloaded constructors for this command, one being empty and the other populated with the parameter `Index`. We decided to use `Optional\u003cIndex\u003e` as the type for `numberOfDays` attribute in `ListCommand` class because the user input might or might not have an input argument. "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following are design considerations we had and its comparisons:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**Consideration 1**: Use of a single constructor which takes in `Index` parameter and pass an `Index` with zero base value 0 into the constructor when all assignments are to be listed."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Pros**: Straightforward way of coding and it has a simple implementation."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Cons**: It is not an intuitive way for developers to understand the code in a single glance."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**Consideration 2**: Use of overloaded constructors and `Optional\u003cIndex\u003e` for `numberOfDays` attribute in `ListCommand` class"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Pros**: Removes ambiguity and have clearer semantics."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Cons**: Optional requires a different thinking. For example `null` has to get replaced with `Optional.empty()`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Usage scenario"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following is a usage scenario of when the user wants to list assignments that are due within the next 3 days from the current date and time."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. `execute(\"list 3\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. `parseCommand(\"list 3\")` parses the String `\"list 3\"` and returns an initialized `ListCommandParser` object. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. `parseCommand(\"list 3\")` calls the `parse` method in `ListCommandParser` to return a `ListCommand` object."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. There is return call to `LogicManager` which then calls the `execute` method of `ListCommand`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `execute` method of `ListCommand` will call the `updateFilteredAssignmentList` method of the `Model` object which takes in `showLimitedAssignments` method of return type `Predicate\u003cAssignment\u003e`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `execute()` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " Given below is the sequence diagram for the interactions within `LogicManager` for the `execute(list 3)` API call."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![Interactions Inside the Logic Component for the `list 3` Command](images/ListSequenceDiagram.png)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Delete multiple assignments feature"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The user can delete one or multiple assignments at a time."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `delete 1` - Deletes the 1st assignment in the displayed assignment list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `delete 1 2 3` - Deletes the 1st, 2nd and 3rd assignments in the displayed assignment list."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It will provide convenience to users who want to delete more than one assignment at a time, and it makes the process of removing completed assignments faster."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### DeleteCommand class "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `DeleteCommand` class extends abstract class `Command` and it is responsible for deleting assignments based on the user\u0027s input indexes. It contains static `String` attributes of messages to be displayed to the user, and a `List\u003cIndex\u003e` attribute, `targetIndexes`. The constructor of `DeleteCommand` takes in a `List\u003cIndex\u003e` argument and `targetIndexes` is initialized to this value."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " It overrides the method `execute` to return a `CommandResult` object, which provides the result of command execution. In the `execute` method, `targetIndexes` is sorted in descending order with `INDEX_COMPARATOR` in `CommandLogic` class and then it calls `checkForDuplicationIndexes` and `checkForInvalidIndexes` methods in `CommandLogic`. The zero base value of each `Index` in `targetIndexes` is stored in a `List\u003cInteger\u003e` and the number of distinct values and size of the list is found so that duplicated indexes can be determined by comparing the number of distinct values and number of elements in the list. Invalid indexes includes numbers that are not in the range from 1 to the number of assignments in the list. If no `CommandException` is thrown when duplicated or invalid indexes are found, the assignments are deleted by calling `deleteAssignments` method on `model` repeatedly until all indexes in the `targetedIndexes` are accounted for."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### DeleteCommandParser Class"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The `DeleteCommandParser` class implements `Parser\u003cDeleteCommand\u003e` and it is responsible for parsing input arguments with the `parse` method to create a new `DeleteCommand` object. It calls `parseIndexes` method from `ParserUtil` class to parse the string user input into multiple `Index` which is then stored in a `List\u003cIndex\u003e`. A `ParseException` is caught if parsing is unsuccessful."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "To delete an assignment, it calls the `deleteAssignment` method of `model`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "When deleting multiple assignments, it calls this method repeatedly with a for loop as shown in the following sequence diagram under \"Usage Scenario\"."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Since the index of assignments in the list will update after each delete in the loop, we sorted the list from the largest index to the smallest, and implemented deleting of assignments from the largest index in the list to maintain order."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The following is a usage scenario of when the user wants to delete the first and second assignment in his displayed assignment list:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. The method `execute(\"delete 1 2\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. `parseCommand(\"delete 1 2\")` parses the String `\"delete 1 2\"` and returns an initialized `DeleteCommandParser` object. "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. `parseCommand(\"delete 1 2\")` calls the `parse` method in `DeleteCommandParser` which further parses the user input."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. If the indexes are valid, it returns a `DeleteCommand` object, which takes in `parsedIndexes`, of type `List\u003cIndex\u003e`, containing `Index` `1` and `2`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. There is return call to `LogicManager` which then calls the `execute` method of `DeleteCommand`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `execute` method of `DeleteCommand` will call the `checkForDuplicatedIndexes` method of `CommandLogic` to check for duplicated indexes. "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `execute()` method then calls `checkForInvalidIndexes` method of the `CommandLogic` to check for any indexes not found in the displayed assignment list."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `deleteAssignment` method of `Model` is repeatedly called, once for each `Index` in `List\u003cIndex\u003e`. In this case, the loop terminates after 2 times."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " 1. The `execute()` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " Given below is the sequence diagram for the interactions within `LogicManager` for the `execute(delete 1 2)` API call."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " ![Interactions Inside the Logic Component for the `delete 1 2` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Unremind, Unprioritize and Undone"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The user can use the unremind, unprioritize and undone commands to do the following:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- unremind removes specified assignments from \u0027Your reminders\u0027. Assignments are specified using the index as shown in `Your reminders`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- unprioritize removes any priority tags for specified assignments. Assignments are specified using the index as shown in the displayed **assignment list**."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- undone marks the specified done assignment as not done. Assignments are specified using the index as shwon in the displayed **assignment list**."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The following operations are implemented:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `unremind 1` - Removes the first assignment found in `Your reminders` from `Your reminders`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `unprioritze 1` - Removes priority tags for the first assignment found in the displayed assignment list."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `undone 1` - Marks the first assignment found in the displayed assignment list as not done."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "It is possible for the user to mistakenly set reminders, set priority tags or mark an assignment as done. "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "It is also likely that the user\u0027s schedule is constantly changing. For example, the user may set reminders for an assignment with a faraway deadline; however, as the deadline approaches, the user may not need to be reminded as the assignment is now more urgent. Hence, it is likely that the user may want to remove the assignment from `Your reminders` as he no longer needs to be reminded to finish the assignment."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Hence, the unremind, unprioritize and undone commands help users to easily manage their continuously changing schedule."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Current implementations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "As all three commands have a similar format (command word followed by an index) and all start with the prefix \"un\", all three commands extends the **abstract** `NegateCommand` class in order to enforce abstraction principles (Figure X)."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The following is a Class diagram illustrating the relationship between the classes of the three commands and `NegateCommand`:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Class diagram for NegateCommand, Unremind, Unprioritize and Undone](images/NegateCommandClassDiagram.png)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   \u003cbr/\u003e*Figure X: Class diagram for NegateCommand, Unremind, Unpriortize and Undone*"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The NegateCommand class contains the **final** class-level member `COMMAND_WORD` with String **\"un\"**, and private attribute `targetIndex` of type `Index`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The NegateCommand class also extends from the abstract `Command` class in order to inherit the `execute()` method found in `Command`. Hence, similarly for the other commands, unremind, unprioritize and undone will be able to inherit and override the `execute()` command."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "By implementing the abstract `NegateCommand` class, any future implementation of commands with similar functionality as unremind, unprioritize and undone will simply extend from the `NegateCommand` class, thereby enforcing the **Open-Closed Principle**."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### \\[Implemented\\] Undo"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The user can undo the most recent command that changes the data of the assignments or lessons."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "It is likely that the user might type in command mistakenly will want to go the previous state."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Instead of using a combination of adding, deleting, editting, ..., a single undo command will "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "help solving the problem easily."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- The undo command is a typical command used in ProductiveNUS. "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "- It extends `Command` and overrides the method `execute` in `CommandResult`."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `Undo` — Undo the most recent command that changes the data of the assignments or lessons."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "A usage scenario would be when a user wants to undo the most recent command that changes the data of the assignments"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "1. The `execute` method of `LogicManager` is called when a user keys in an input into the application and `execute` takes in the input."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "2. The `execute` calls the `UndoCommand`."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "4. There is return call to `LogicManager` which then calls the overridden `execute` method of `UndoCommand`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "5. The `execute` method of `UndoCommand` will call the `getPreviousModel` of the `Model` object and reassign `Model`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "6. The `execute` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Updating of Upcoming tasks in real time"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The displayed task list under `Upcoming tasks` updates in real time when the deadline of an assignment or the end time of a lesson has passed."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "It is likely that the user will refer to the `Upcoming tasks` to quickly view what is up next on their academic schedule. It is hence important that the `Upcoming tasks` accurately reflect what is next on their academic schedule."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The updating of `Upcoming tasks` in real time is implemented with **multithreading**."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "As the GUI of ProductiveNUS is implemented using JavaFX, Thread safety using synchronised thread actions cannot be achieved as JavaFx is modelled to execute on a **single JavaFX-Launcher thread.** Therefore, this feature makes use of `javafx.concurrent.Task\u003cV\u003e` for multithreading operations, which is designed to handle multithreading operations for JavaFX applications in a **thread-safe manner**."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "A `Timer` object is used alongside `javafx.concurrent.Task` to periodically check `UniqueTaskList` in `ProductiveNus` every second. The `Timer` object has `isDaemon` set to true. If the deadline of the upcoming assignment or the end time of the upcoming lesson has passed, the `updateTasks()` method in `ProductiveNus class` is called. The `Timer` object can be found in the private method `autoUpdateTaskList()` method in `ProductiveNus`, which is called in the `ProductiveNus constructor` when the user runs ProductiveNus."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Below is an Activity Diagram illustrating the flow of activities when the application starts up."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "![Activity diagram for Auto updating of task list](images/AutoUpdateTaskListActivityDiagram.png)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cbr/\u003e*Figure X: Activity diagram for automated updating of UniqueTaskList*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " **:information_source: Note:**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Due to limitations of PlantUML, arrows are not able to point towards the branch indicator (represented by a diamond) to represent loops."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " 1. When the user opens ProductiveNUS, the main JavaFX thread starts running. At approximately the same time, the `Timer` in `ProductiveNus` starts running as well."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " 1. All user interactions with the GUI are handled by the JavaFX thread. "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    1. Whenever a user inputs a command, if the command does not exit ProductiveNUS, the JavaFX thread handles any modifications the command entered causes to the GUI."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    1. If the user inputs the exit command, the JavaFX thread stops running."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " 1. Concurrently, the `Timer` thread periodically checks if the next task in `Upcoming tasks` has passed."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    1. If the user does not exit ProductiveNUS, the `Timer` thread checks if the next task has passed (deadline of assignment or end time of lesson is over). If the next task has passed, the task will be removed from `Upcoming tasks`. Else, nothing happens."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    1. If the user exits ProductiveNUS, the `Timer` thread stops running."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. ProductiveNUS closes."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Adding an assignment feature"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The user can add an assignment by providing keywords of the following fields:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- Name of assignment"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- Module code of assignment"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- Deadline of assignment (contains both due time and due date)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- Priority level (Optional)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- Remind (Optional)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `add n/Lab 3 mod/CS2100 d/24-10-2020 2359` - Adds an assignment with name Lab 3, module code CS2100, due time 2359, and with due date 24-10-2020."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `add n/Lab 3 mod/CS2100 d/24-10-2020 2359 p/HIGH` - Adds a high priority assignment with name Lab 3, module code CS2100, due time 2359 and with due date 24-10-2020.  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `add n/Lab 3 mod/CS2100 d/24-10-2020 2359 p/MEDIUM remind` - Adds a medium priority assignment with name Lab 3, module code CS2100, due time 2359, due date 24-10-2020, and with reminders set."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Being able to add an assignment is essential for the user to manage his/her academic tasks. "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "As a student user, the following scenarios are likely:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user wants to add an assignment with a certain priority level attach to it, so he/she knows how urgent the assignment is."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user wants to add an assignment and wants the assignment to appear directly in his/her Reminders list right away since it\u0027s something important."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user wants to add an assignment with a certain priority level and also wants the assignment to appear directly in his/her Reminders list right away."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "We decided to allow the user to include the priority level and remind tag if he/she wants to do so. We understand that not all users will "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "know the priority level of the assignment at the point he/she is adding the assignment and thus we made the priority level and remind keywords optional."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Prefixes used in identifying keywords"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The use of prefixes before keywords facilitates the extraction of keywords from the user\u0027s input and allow keywords to be validated subsequently."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The following prefixes are used to identify the type of keywords:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `/n` for Name keyword"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `/mod` for Module code keyword"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `/d` for Deadline keyword"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `/p` for Priority keyword"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### AddCommand Class"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `AddCommand` class extends abstract class `Command` and is responsible for adding assignments based on the user\u0027s input keywords."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It contains static `String` attributes of success and error messages to be displayed in the event of a valid and invalid user input."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It also contains an `Assignment` attribute, `toAdd`. The constructor of `AddCommand` takes in an `Assignment` and `toAdd` is initialized to this value."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It overrides the method `execute` to return a `CommandResult` object, which represents the result of the AddCommand execution."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "In the `execute` method, it checks whether the `toAdd` assignment already exist in `ProductiveNus` and throws a `CommandException` if it does."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If the `ToAdd` assignment is unique, it calls the `addAssignment` method of a `Model` object, `model`, it takes in, and adds the assignment `toAdd`."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### AddCommandParser Class"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `AddCommandParser` class implements `Parser\u003cAddCommand\u003e` and it is responsible for parsing the user\u0027s input arguments with the `parse` method to create a new `AddCommand` object."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It contains a private method `ArePrefixesPresent` which checks for the presence of non-optional prefixes and keywords."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If there are missing or invalid keywords, a `ParseException` will be thrown."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `parse` method takes in a String of user input, `args` and contains a `ArgumentMultimap` object, `argMultimap`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Regular expressions are used to identify whether optional keywords like `remind` and `/p` are present."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The remind keyword is identified using `.*\\bremind\\b.*` while priority keyword is identified using `.*\\bp/\\b.*`."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "In the event that the remind keyword is present, `remind` will be removed from `args` before the parsing of the other keywords by `argMultimap` since `remind` has no prefixes."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `tokenize` method of `ArgumentTokenizer` will be called. The keywords are parsed and return as `argMultimap`."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The keywords are subsequently extracted from `argMultimap` to create a new `Assignment` object, `assignment`, which is used"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "to return a new `AddCommand` object. "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "In the event that the keywords have an invalid format, such as the `Deadline` keyword not being in the required `dd-MM-yyyy HHmm` form for example,"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "a `ParseException` will be thrown. "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The following is a usage scenario when a user wants to add an assignment with the name \u0027Lab\u0027, module \u0027CS2103\u0027, and deadline \u002710-10-2020 2359\u0027."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. `execute (\"add n/Lab mod/CS2103 d/10-10-2020 2359\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2. `parseCommand(\"add n/Lab mod/CS2103 d/10-10-2020 2359\")` parses the String `\"add n/Lab mod/CS2103 d/10-10-2020 2359\"` and returns an initialized `AddCommandParser` object."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3. `parseCommand(\"add n/Lab mod/CS2103 d/10-10-2020 2359\")` calls the `parse` method in `AddCommandParser` which parses the user input into `Name`, `Time` and `ModuleCode`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " This is done by calling the methods `tokenize` followed by `getValue` of `ArgumentMultimap`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "4. If user input is valid, a `Assignment` object will be created, and it will be used to return a `AddCommand` object."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "5. There is a return call to `LogicManager` which then calls the overridden `execute` method of `AddCommand`."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "6. The `execute` method then calls `hasAssignment` of `model` to check if the `toAdd` assignment is a duplicate."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "7. If the assignment is not a duplicate, the `execute` method of `AddCommand` will call the `addAssignment` method of the `Model` object."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "8. The `execute` method returns a `CommandResult` object."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Given below is the sequence diagram for the interactions within `LogicManager` for the `execute (\"add n/Lab mod/CS2103 d/10-10-2020 2359\")` API call."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![Sequence Diagram for AddCommand](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   \u003cbr/\u003e*Figure X: Sequence Diagram for AddCommand*"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Marking assignments as done and Setting reminders for assignments features"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Both features are implemented in a similar way, though the reasons for implementation differs.There are also some differences in the implementation, which will be pointed out along the way."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Marking assignments as done and Setting reminders for assignments"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The user can mark one or multiple assignments as done at a time. Similarly, the user can also set reminders for one or multiple assignments at a time. "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Reminded assignments will be displayed in the `Your Reminders` section in ProductiveNUS for easy referral."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `done 1` - Marks the 1st assignment in the displayed assignment list as done."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `done 1 2 3` - Marks the 1st, 2nd and 3rd assignments in the displayed assignment list as done."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `remind 2` - Set reminders for the 2nd assignment in the displayed assignment list and adds it to `Your reminders`."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- `remind 1 2 3` - Set reminders for the 1st, 2nd and 3rd assignments in the displayed assignment list amd adds them to `Your reminders`."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Marking assignments as done"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "User may find it convenient to mark assignments that he/she has completed as done. Without the done feature, it will be difficult for the user to keep track of uncompleted assignments."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "As a student user, the following scenarios are likely:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user has completed an assignment and wants to indicate that the particular assignment in his/her assignment list has been completed."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user has completed several assignments and wants to indicate that those assignments have been completed."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "We realised that users would have to delete completed assignments from their assignment list in order to keep track of their uncompleted assignments."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "At the same, we understand that users might forget about the completed assignments after deleting them and thus we decided to implement the done feature"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "so users can easily find out what are their uncompleted assignments without deleting the completed ones."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Setting reminders for assignments"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Users may find it convenient to display certain assignments in another section, apart from their main assignment list, so they can refer to those assignments easily."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "As a student user, the following scenarios are likely:"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user wants to display an assignment in another section of the GUI for his/her easy referral."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- The user wants to display multiple assignments in another section of the GUI for his/her easy referral."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "We decided to create a `Your reminders` section in our GUI, allowing users to display only the assignments that have reminders set."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### DoneCommand Class and RemindCommand Class"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `DoneCommand` and `RemindCommand` class extends abstract class `Command` and are responsible for marking assignments as done or setting reminders to assignments respectively, based on the user\u0027s input indexes."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Both classes contain static `String` attributes of messages to be displayed to the user, and a `List\u003cIndex\u003e` attribute, `targetIndexes`. Both constructors of `DoneCommand` and `RemindCommand` takes in a `List\u003cIndex\u003e` argument and `targetIndexes` is initialized to this value."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Both `DoneCommand` and `RemindCommand` classes overrides the method `execute` to return a `CommandResult` object, which represents the result of the DoneCommand and RemindCommand execution respectively."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "In the `execute` method, `targetIndexes` is first passed into the `checkForDuplicatedIndexes` method followed by the `checkForInvalidIndexes` method, where both methods are in `CommandLogic`."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If there are duplicated or invalid indexes found, a `CommandException` will be thrown."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Next, each of the `Index`, `targetIndex`, in `targetIndexes` will be used to obtain its corresponding assignment in the `FilteredAssignmentList` of the `Model` object, `model`, by calling the `get` method."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The description below describes how each assignment obtained is validated and used to create a similar assignment before being added to another `List\u003cAssignment`, which contains all the assignments with the updated details."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "*Verifying that the assignment is valid*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "For `RemindCommand`, it will check whether the assignment obtained has already been reminded by calling the `isReminded` method of `Assignment`."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "For `DoneCommand`, it will check whether the assignment obtained has already been marked as done by calling the `isMarkedDone` method of `Assignment`."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "There will also be another check for both classes to ensure that the assignment obtained exist in the `model` by calling the `hasAssignment` method of `model`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If the assignment obtained is invalid, a `CommandException` will be thrown after all assignments have been checked."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "*Creating an assignment*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Next, the assignment obtained will be used to create an assignment with the updated details, `assignmentMarkedDone` or `remindedAssignment`, for `DoneCommand` and `RemindCommand` respectively."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The assignment is created using a private method called `createRemindedAssignment`, in `RemindCommand` or `createAssignmentMarkedDone`, in `DoneCommand`."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "*Updating the model*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "`setAssignment` method of `model` will be called to replace the assignment with the created assignment, `assignmentMarkedDone` or `remindedAssignment`, for `DoneCommand` and `RemindCommand` respectively"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "`updateFilteredAssignmentList` method of `model` will also be called to update the list shown to the user."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The created assignment will be added to the `List\u003cAssignment`, `assignmentsToRemind` or `assignmentsToMarkDone`, for `RemindCommand` and `DoneCommand` respectively."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The above process repeats until all assignments corresponding to all indexes in `targetedIndexes` are accounted for."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "A new `CommandResult` containing `assignmentsToRemind` or `assignmentsToMarkDone` list will be returned for `RemindCommand` and `DoneCommand` respectively."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### DoneCommandParser Class and RemindCommandParser Class"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The `DoneCommandParser` class and `RemindCommandParser` class implements `Parser\u003cDoneCommand\u003e` and `Parser\u003cRemindCommand\u003e` respectively, which is responsible for parsing the user\u0027s input arguments."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The user\u0027s arguments will be parsed using the `parse` method to create a new `DoneCommand` and `RemindCommand` object for `DoneCommandParser` and `RemindCommandParser` class respectively."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "It calls `parseIndexes` method from `ParserUtil` class to parse the string user input into multiple `Index` which is then stored in a `List\u003cIndex\u003e` named `parsedIndexes`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " A `ParseException` is caught if the parsing is unsuccessful."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Marking assignments as done"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The following is a usage scenario when a user wants to mark the first and third assignment in his/her displayed assignment list as done."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. `execute (\"done 1 3\")` of `LogicManager` calls the `parseCommand` method of `ProductiveNusParser`."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2. `parseCommand(\"done 1 3\")` parses the String `\"done 1 3\"` and returns an initialized `DoneCommandParser` object."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3. `parseCommand(\"done 1 3\")` calls the `parse` method in `DoneCommandParser` which parses the user input into `List\u003cIndex\u003e`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " This is done by calling the methods `parseIndexes` of `ParserUtil`."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "4. If the indexes are valid, a `DoneCommand` object will be returned, which takes in `parsedIndexes` of type `List\u003cIndex\u003e` containing `Index` `1` and  `3`."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "5. There is a return call to `LogicManager` which then calls the overridden `execute` method of `DoneCommand`."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "6. The static method `checkForDuplicatedIndexes` of `CommandLogic` is called to check for duplicated indexes."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "7. The static method `checkForInvalidIndexes` of  the `CommandLogic` is then called to check for any indexes not found in the displayed assignment list."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "8. For each `Index` in `List\u003cIndex\u003e`, the assignment in the displayed assignment list corresponding to that index, `assignmentToMarkDone` will be retrieved by calling the `get` method."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "9. For each assignment, a new assignment `assignmentMarkedDone` will be created by calling `createAssignmentMarkedDone` with `assignmentToMarkDone`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "10. `setAssignment` method of `model` will be called to replace `assignmentToMarkDone` with `assignmentMarkedDone`."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "11. Next, `assignmentToMarkDone` will be added to `List\u003cAssignment\u003e`, `assignmentsToMarkDone`."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "12. Since there are only 2 indexes, the loop from step 8 - 11 terminates after 2 times."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "13. The `execute` method returns a `CommandResult` object containing the `assignmentsToMarkDone` list. "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Given below is the sequence diagram for the interactions within `LogicManager` for the `execute (\"done 1 3\")` API call."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![Sequence Diagram for DoneCommand](images/DoneMultipleSequenceDiagram.png)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   \u003cbr/\u003e*Figure X: Sequence Diagram for DoneCommand*"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "##### Setting reminders to assignments"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "The usage scenario of a user setting reminders for the first and third assignment in his/her displayed assignment list is similar to the usage scenario above."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Here are the differences:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 2, `parseCommand(\"remind 1 3\")` will return an initialized `RemindCommandParser` object instead of `DoneCommandParser`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 4, a `RemindCommand` object will be returned instead of a `DoneCommand` object"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 5, the `LogicManager` will call the overridden `execute` method of `RemindCommand`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 8, Instead of `AssignmentToMarkDone`, the assignment corresponding to each `Index` in `List\u003cIndex\u003e` will be named as `AssignmentToRemind`."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 9, A new assignment, `remindedAssignment` will be created by calling `createRemindedAssignment` instead of `createAssignmentMarkedDone`."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 11, instead of `assignmentToMarkDone`, `remindedAssignment` will be added to `List\u003cAssignment\u003e`, `assignmentsToRemind`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "- In step 13, the `CommandResult` object returned by `execute` contains the `assignmentsToRemind` list."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Given below is the sequence diagram for the interactions within `LogicManager` for the `execute (\"remind 1 3\")` API call."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![Sequence Diagram for RemindCommand](images/RemindMultipleSequenceDiagram.png)"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   \u003cbr/\u003e*Figure X: Sequence Diagram for RemindCommand*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* NUS Computing Students with poor time management skills who have difficulties managing their weekly academic schedule"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* can type fast and prefer typing to mouse interactions"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* More convenient than typical apps as lessons and assignments are managed in just one app so there is no need to switch between different ones."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* Faster than typical mouse/GUI driven apps as most features are accomplished by typing simple commands."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* Easier to manage schedule than typical scheduling apps as assignments are automatically scheduled."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| Priority | As a … | I want to … | So that I can… |"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "|-|-|-|-|"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *` | student | import my timetable | better schedule my assignments with my lesson timings taken into account |"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `* * *` | forgetful student | view reminders for my lessons and assignments | avoid forgetting to attend lessons or do my work |"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *` | poor time manager | add and schedule assignments | keep track of what needs to be done |"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *` | poor time manager | delete assignments | remove assignments that i have completed or added wrongly |"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *` | student | view lessons and assignments together | view all assignments i have to complete amidst my lessons |"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *` | particular student | use a scheduler with a user-friendly interface | use the application easily and enjoyably |"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `* * *` | new user | navigate the UI easily | use the application efficiently |"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `* * *` | slow/confused student | i can access and view my academic duties easily | quickly find out what i need to do for the week |"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `* * ` | beginner user | view a summary of the features | quickly learn about the features available |"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `* * ` | experienced user | use shortcuts in my commands | manage my academic schedule quicker |"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "(For all use cases below, the **System** is the `Academic Schedule Manager` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC01 - Add an assignment**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User requests to add an assignment."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2.  Academic Schedule Manager adds the assignment."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3.  Academic Schedule Manager shows a success message with details of the assignment added."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 1a. The user did not supply all required parameters."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 1b. The given DEADLINE_OF_ASSIGNMENT parameter is in the wrong format."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1b1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC02 - Delete an assignment**"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User \u003cins\u003erequests to list assignments and lessons (UC05)\u003c/ins\u003e."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to delete a specific assignment in the list."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager shows a success message with details of the assignment deleted."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given index is invalid (index is referring to a lesson or index is out of range)."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC03 - Import timetable**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1.  User retrieves NUSMods timetable URL from the NUSMods website."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to import NUSMods timetable using their NUSMods timetable URL."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager adds all the lessons according to the data retrieved."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "4.  Academic Schedule Manager shows a success message with details of the lessons added."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given URL is invalid (not a valid NUSMods timetable URL)."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2b. User already has a timetable imported before."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2b1. Academic Schedule Manager informs user that previously imported lesson will be deleted."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC04 - Remind**"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1.  User \u003cins\u003erequests to list assignments and lessons (UC05)\u003c/ins\u003e."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to set reminder for a specific assignment in the list."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager adds the assignment to the remind list."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "4.  Academic Schedule Manager shows a success message with details of the assignment set as reminder."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given index is invalid (index is referring to a lesson or index is out of range)."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC05 - List assignments and lessons**"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User requests to list assignments and lessons."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2.  Academic Schedule Manager shows a list of all assignments and lessons."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 1a. User requests to list XX day(s) of assignments and lessons."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1a1. Academic Schedule Manager shows a filtered list of assignments and lessons."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      "
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "**Use case: UC06 - Prioritize assignment**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. User requests to prioritize an assignment HIGH."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2. ProductiveNUS sets a HIGH priority to the assignment."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 1a. User requests to prioritize an assignment with an invalid Priority such as VERY HIGH."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 1a1. ProductiveNUS shows an error message."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "2.  Should be able to hold up to `1000 lessons and assignments` without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "4.  The system should respond within two seconds."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "5.  The system should save a user\u0027s data `after every user command`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "6.  The system should be usable by a novice who has never used the app before."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **User**: NUS Computing student"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " **:information_source: Note:**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained.    "
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Deleting assignments"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Deleting one assignment while all assignments are being shown"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: First assignment is deleted from the list. Details of the deleted assignment shown in the Message Box."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: No assignment is deleted. Error details shown in the Message Box."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Deleting multiple assignments while all assignments are being shown "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `delete 1 2 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: First, second and third assignment is deleted from the list. Details of the deleted assignments shown in the Message Box."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            "
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `delete 2 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: First and second assignment is deleted from the list. Details of the deleted assignments shown in the Message Box."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `delete a % ^`\u003cbr\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: No assignment is deleted. Error details shown in the Message Box.            "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      "
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Deleting one assignment while some assignments are being shown"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Prerequisites: List some assignments using the `list x` command to obtain a filtered list with at least 1 assignment (where x is number of days from current date and time such that only some assignments are shown)."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    "
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "          Expected: First assignment is deleted from the list. Details of the deleted assignment shown in the Message Box."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "          "
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `delete -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "          Expected: No assignment is deleted. Error details shown in the Message Box."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Deleting multiple assignments while some assignments are being shown"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Prerequisites: List some assignments using the `list x` command to obtain a filtered list with at least 3 assignments (where x is number of days from current date and time such that only some assignments are shown)."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `delete 1 2 3`\u003cbr\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Expected: First, second and third assignment is deleted from the list. Details of the deleted assignments shown in the Message Box."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                           "
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Listing assignments"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. List all assignments."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: All assignments are listed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      "
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `list 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Error details shown in the Message Box."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      "
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. List assignments with deadlines that fall within current date and time and x number of days later"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `list 7`\u003cbr\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments with deadlines that fall within current date and time and 7 days later is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            "
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `list 100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     Expected: Error details shown in the Message Box."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `list a`\u003cbr\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Error details shown in the Message Box.           "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Finding assignments"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Finding assignments by name"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `find n/Lab`\u003cbr\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments with the name \"Lab\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `find n/Lab Tutorial`\u003cbr\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments with the name \"Lab\" or \"Tutorial\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      "
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Finding assignments by module code"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    "
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `find mod/CS2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments with the module code \"CS2100\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            "
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `find mod/CS2100 CS2103T`\u003cbr\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments with the module code \"CS2100\" or \"CS2103T\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Test case: `find mod/CS43`\u003cbr\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "         Expected: Error details shown in the Message Box.     "
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  "
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Finding assignments by date or time"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    "
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find d/1200`\u003cbr\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "       Expected: Assignments with due time \"1200\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "          "
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find d/13-10-2020`\u003cbr\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "       Expected: Assignments with due date \"13-10-2020\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "          "
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find d/13-10-2020 1200`\u003cbr\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "       Expected: Assignments with due date \"13-10-2020\" or due time \"1200\" is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Finding assignments by priority"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Prerequisites: List all assignments using the `list` command. Multiple assignments in the list."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find p/high`\u003cbr\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "       Expected: Assignments of HIGH priority is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "              "
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find p/LOW`\u003cbr\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "       Expected: Assignments of LOW priority is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "              "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    1. Test case: `find p/high medium`\u003cbr\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "      Expected: Assignments HIGH or MEDIUM priority is displayed. Message with number of assignments listed is displayed in Message Box."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Importing timetable"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1. Importing a timetable for the first time"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    1. Test case: `import url/www.google.com`\u003cbr\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "       Expected: No lessons imported. Error details shown in the status message."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    1. Test case: `import url/https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01\u0026EC1301\u003dTUT:S28`\u003cbr\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "       Expected: The corresponding lessons imported. Success message shown in the status message. Imported lessons are shown in the task list."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Setting reminders for assignments"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Setting reminders for assignments while all assignment are being shown"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: List all assignments using the `list` command. Multiple assignments in the list. `Your reminders` is empty."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: First assignment in assignment list is now displayed in `Your reminders` as well. Details of the assignment shown in the Message box."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 0` \u003cbr\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: No assignment is added into `Your reminders`. Error details shown int the Message box."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `remind`, `remnid 1`, `remind x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Setting reminders for one assignment while some assignments are being shown"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   1. Prerequisites: List some assignments using the `list x` command (where x is number of days from current date and time such that only some assignments are shown). Multiple assignments in the list. `Your reminders` is empty."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to `remind 1` test case when all assignments are shown."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 0` \u003cbr\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to `remind 0` test case when all assignments are shown."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `remind`, `remnid 1`, `remind x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Setting reminders for multiple assignments while all assignments are being shown"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: List all assignments using the `list` command. Multiple assignments in the list. `Your reminders` is not empty."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1 2` \u003cbr\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: First and second assignment in assignment list is now displayed in `Your reminders` as well. Details of the assignments are shown in the Message box."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1 x` (where x is the assignment list index of an assignment that is found in `Your reminders`)\u003cbr\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: No assignment is added into `Your reminders`. Error details shown int the Message box."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `remind`, `remnid 0`, `remind x x`, `...` (where x is the assignment list index of an assignment that is found in `Your reminders`)\u003cbr\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Setting reminders for multiple assignments while some assignments are being shown"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: List some assignments using the `list x` command (where x is number of days from current date such that only some assignments are shown).. Multiple assignments in the list. `Your reminders` is not empty."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1 2` \u003cbr\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to `remind 1 2` test case when some assignments are shown."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `remind 1 x` (where x is the assignment list index of an assignment that is found in `Your reminders`)\u003cbr\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to `remind 1 x` test case when some assignments are shown."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `remind`, `remnid 0`, `remind x x`, `...` (where x is the assignment list index of an assignment that is found in `Your reminders`)\u003cbr\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Removing reminded assignments"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Removing reminders for assignments found in `Your reminders` when `Your reminders` is non-empty"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: `Your reminders` must contain at least 1 assignment."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `unremind 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: First assignment in `Your reminders` is removed from `Your reminders`. Details of the assignment shown in the Message box."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `unremind x` (where x is larger than reminded list size but less then the assignment list size) \u003cbr\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: No assignment is removed from `Your reminders`. Error details shown int the Message box."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `unremind`, `unremnid 1`, `...`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Removing reminders for assignments found in `Your reminders` when `Your reminders` is empty."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: `Your reminders` must not contain any assignments."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   "
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: `unremind 1` \u003cbr\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: No assignment is removed from `Your reminders`. Error details shown int the Message box."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Other incorrect unremind commands to try: `unremind`, `unremnid 1`, `...`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Automated updating of task list"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Assignments in task list"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: `Upcoming tasks` must not be empty."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: Add or edit an assignment with a deadline 1 minute after the current time (if your current time is 1229, set the deadline with the current date and time 1230).\u003cbr\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: The first task in `Upcoming task` is now the assignment you just added/edited."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Wait till the current time passes the deadline (if deadline has time 1230, wait till the clock on your computer is 1230).\u003cbr\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: The first task is removed from `Upcoming tasks`."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Test case: Add or edit an assignment with a deadline equal to the current time (if your current time is 1229, set the deadline with the current date and time 1229).\u003cbr\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: The assignment you just added/edited is not found in `Upcoming tasks`."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Lessons in task list"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Prerequisites: `Upcoming tasks` must be empty."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Go to NUSMods and make a timetable with a lesson that has an end time before the current time. Import the timetable with the import command."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: The first task in `Upcoming task` is now the lesson you just imported."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   1. Wait till the current time passes the end time of the lesson (if end time is 1230, wait till the clock on your computer is 1230).\u003cbr\u003e"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      Expected: The first task is removed from `Upcoming tasks`."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "## Effort"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Difficulty level: Hard"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Challengers faced"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Brown-field project"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Familiarising ourselves with the code base was definitely one of the challenges faced when implementing ProductiveNUS. As ProductiveNUS is a brown-field project and builts upon the AddressBook3 (AB3) code base, implementing our desired features was extremely time-consuming during the first stages of this project."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Furthermore, as ProductiveNUS implements similar features to AB3, editing the AB3 code to match what we wanted was extremely painful as well as we had to manually edit go through the entire code base and change the name of classes, attritbutes, methods and test cases to suit ProductiveNUS."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "As such, much effort in the beginning was pooled into changing the code base of AB3 to suit our needs before we could start implementing any features."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Multiple entities"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Another challenged faced was that while AB3 only deals with one entity (Person), ProductiveNUS deals with 3 separate but related entities (Task, Assignment and Lessons). As such, it was challenging morphing the code base of AB3 to handle three separate entities instead of one, all while ensuring that all three entities are updated, saved and stored appropriately whenever the user would make changes to the data."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### JavaFx"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "As beginner users of JavaFX, reading and understanding the code base of the implementation of the AB3 GUI was especially difficult. Learning JavaFX alongside implementing the features of ProductiveNUS and changing the code base to suit our needs, implementing our desired GUI definitely posed a challenge."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Furthermore, JavaFX has its own set of classes for multithreading implementations. As we were unfamiliar with JavaFX, we first tried to implement multithreading using the Java 11 API. It was only after debugging for a few hours did we realise that using the conventional Thread class in Java 11 would not be feasible as JavaFX does not support multithreading using with the normal Java 11 API."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Effort required"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Achievements"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### JavaFx"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "We have successfully implemented multithreading with JavaFX applications in order to enhance the functionality of ProductiveNUS."
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 220,
      "andreatanky": 319,
      "hyngkng": 120,
      "minhhhnguyen2000": 53,
      "-": 267,
      "printinghelloworld": 268
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Welcome to ProductiveNUS User Guide! :blue_book:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**ProductiveNUS is a desktop application** made for you, **a School of Computing (SoC) student in National University of Singapore (NUS)**, to **manage and schedule your academic tasks more effectively**. It makes use of a **Graphical User Interface (GUI)**, which provides you with an intuitive interface and immediate visual feedback. ProductiveNUS uses a **Command Line Interface (CLI)**; this means that you operate the application by typing commands into a [Command Box](#gui-terminologies). If you are fast at typing, you can manage your academic tasks more efficiently."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "As a **student from the SoC in NUS**, you tend to have a **heavy workload**. ProductiveNUS helps **improve your productivity** by **enhancing your organisational skills**. Apart from simply **keeping track of your tasks**, ProductiveNUS is capable of **scheduling** them for you so you will never **miss any deadlines**. ProductiveNUS is also compatible with NUSMods, meaning all your **timetable information can be imported easily** into the application so all your academic tasks can be found in just one application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## About"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This user guide provides you with the necessary information on how to become an expert user of ProductiveNUS. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can familiarize yourself with the terminologies, syntax and icons used in this user guide by reading the following sub-sections.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### GUI terminologies"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The figure below shows the GUI of ProductiveNUS, with its sections labelled. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![GUI](images/GUI.png)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 1: Labelled GUI sections*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Icon usages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Wondering what each icon is used for? You can refer to the table below to find out."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| Icon        | Icon usage                                             | Box color |"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "|-------------|--------------------------------------------------------|-----------|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "| :clipboard: | - Notes about the command format\u003cbr\u003e- Pointers to note | Blue      |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "| :bulb:      | - Tip                                                  | Green     |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Command syntax"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "All commands and their examples are demarcated with `markups`. `Markups` appear as a grey box as shown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**:clipboard: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  e.g. in `add n/NAME_OF_ASSIGNMENT`, `NAME_OF_ASSIGNMENT` is a parameter which can be used as `add n/Assignment 2`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  e.g `n/NAME_OF_ASSIGNMENT [remind]` can be used as `n/Assignment 2 remind` or as `n/Assignment 2`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  e.g. if the command specifies `n/NAME_OF_ASSIGNMENT d/DEADLINE_OF_ASSIGNMENT`, `d/DEADLINE_OF_ASSIGNMENT n/NAME_OF_ASSIGNMENT` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* All instances of `INDEX` **must be a positive integer**.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  e.g. 1, 2, 3, …​"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Date and time format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "All commands with date and/or time parameters have a specific format you must follow, else your input will be deemed as invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Date parameters must be in the format `dd-MM-yyyy`, where `dd` is day of the month, `MM` is month and `yyyy` is year. The number of repeated letters indicate the number of digits required for day of the month, month and year. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "For example, `dd` means that the day of the month has to be a 2-digit number. Hence, for dates you want to input from the 1st to the 9th of any month, you must key in `09-01-2020`. `9-01-2020` will be deemed as invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Likewise for month and year, `09-1-2020` and `09-01-20` will be deemed as invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Time parameters must be in the format `HHmm`, where `HH` is the hour of the day and `mm` is the minute of the hour. You must input the time according to the 24-hour clock system."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "For example, 7:00 AM is `0700` while 7:00 PM is `1900`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "## Getting started"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Download the latest `productivenus.jar` from [here](https://github.com/AY2021S1-CS2103T-F11-3/tp/releases)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for ProductiveNUS."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 2: ProductiveNUS GUI*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Adding an assignment: `add`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `add n/NAME_OF_ASSIGNMENT d/DEADLINE_OF_ASSIGNMENT mod/MODULE_CODE_OF_ASSIGNMENT [p/PRIORITY_OF_ASSIGNMENT] "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[remind]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can add your assignments into your schedule so that you can manage all your assignments and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " academic tasks conveniently. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can include `remind` when adding an assignment instead of using the `remind` command to set reminders after adding an assignment."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "For example, to add a lab report assignment that is **due** on 23th April 2020 12.30pm and **associated** with the module CS2100, you can "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "simply enter `add n/Lab report d/23-04-2020 1230 mod/CS2100`. All the information of the assignment will be displayed as shown in the labelled diagram below."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideAddCommand](images/UserGuideAddCommand.PNG)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 3: Information of the assignment added labelled*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* `DEADLINE_OF_ASSIGNMENT` must be in the format dd-MM-yyyy and time in the format HHmm (24-hour)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If the lab report assignment is of **high priority**, you can enter `add n/Lab report d/23-04-2020 1230 mod/CS2100 p/HIGH`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* `add n/Lab report d/23-04-2020 1230 mod/CS2100 remind`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `add n/Lab report d/30-04-2020 1230 mod/CS2100`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Deleting assignments : `delete`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `delete INDEX [MORE_INDEXES]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can delete **one or more** assignments from your assignment list by specifying the `INDEX` of assignments you want to delete as shown in your list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Here is an example with steps for you to follow:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1) To delete assignments with the name \"Statistics tutorial\" and \"Biology lab report\" as shown in the figure below, you can simply enter `delete 1 3` into the Command Box which corresponds to their indexes in the assignment list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![DeleteCommand1](images/DeleteCommandDiagram1.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 4: User input and location of assignment indexes*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "2) You have successfully deleted both assignments from the assignment list, and they are no longer displayed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "3) A \"Deleted assignment(s)\" message that includes the information of your deleted assignments will be displayed in the Message Box."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![DeleteCommand2](images/DeleteCommandDiagram2.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 5: The displayed message and the updated list*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `delete 1`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `delete 2 3 1`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* At least one index must be **present**. For example, `delete` without any index is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* The indexes **must be found in your assignment list**."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* The indexes **must not be duplicated**. For example, `delete 3 3` is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Importing your timetable : `import`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Format: `import url/YOUR_NUSMODS_URL`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "You can import your NUSMods timetable data into ProductiveNUS by providing the URL to your NUSMods timetable share"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "link. Imported lesson information can be found in the `Upcoming tasks`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Follow these steps and try importing your timetable:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1) At your NUSMods timetable website, click on the \"Share/Sync\" button to obtain your timetable share link URL."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   ![NusModsShareSync](images/NusModsShareSync.PNG)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 6: The \"Share/Sync\" at the NUSMods website highlighted in green*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2) The URL obtained will be `YOUR_NUSMODS_URL` to be used in the import command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3) Added lesson information can be found in your task list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   ![UserGuideUpcomingTasks](images/UserGuideUpcomingTasks.PNG)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 7: Added lesson information can be found in the `Upcoming tasks` list highlighted in red*"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Importing a new timetable will override your previous timetable data."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Another example:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* `import url/https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01,LAB:11,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G16\u0026CS2105\u003dTUT:14,LEC:1\u0026EC1301\u003dTUT:S28,LEC:1\u0026IS1103\u003d` "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Listing assignments : `list`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `list [NUMBER_OF_DAYS]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can list all your assignments with `list`. Alternatively, you can type `list` followed by an index `NUMBER_OF_DAYS` to list your assignments with deadlines that fall within the current date and time and `NUMBER_OF_DAYS` later. `NUMBER_OF_DAYS` must be an index **from 1 to 50**."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can use the `NUMBER_OF_DAYS` index to quickly view assignments that you need to complete soon!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Here is an example with steps for you to follow: "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1) You can enter `list 3` as shown in the diagram below to list your assignments that are due within 3 days from the current date and time. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![ListCommand1](images/ListCommandDiagram1.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 8: `list 3` inputted by user*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "2) If the current date and time is 29/10/2020 1800, all assignments due within this date and time to 01/11/2020 1800 will be displayed in the assignment list. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "3) A message that indicates the number of assignments listed is displayed in the Message Box."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![ListCommand2](images/ListCommandDiagram2.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 9: The displayed message and the updated list*"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples: "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `list`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `list 7`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Only one** number can be keyed in. For example, `list 1 2` is invalid. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Finding assignments : `find`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `find PREFIX/KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can find your assignments based on keywords you enter. The types of keywords are the name, module code, deadline and priority of assignments. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "If your assignment list is really long, the `find` command comes in handy as it  filters the list based on assignments u want to see!"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This is the table of prefixes used:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| Prefix | Syntax | Example |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "|-|-|-|"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| `n/` | n/NAME_OF_ASSIGNMENT | - `n/Tutorial` |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `mod/` | mod/MODULE_CODE_OF_ASSIGNMENT | - `mod/ST2334` |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `d/` | d/DUE_DATE_OR_TIME_OF_ASSIGNMENT | - `d/24-10-2020 1300` |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `p/` | p/PRIORITY_OF_ASSIGNMENT | - `p/HIGH` |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " **:clipboard: Pointers to note for prefixes and keywords:**\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* For prefix `d/`, date and time from the deadline of an assignment are separate. Date keywords are **irrespective of time** and time keywords are **irrespective of date**. For example, `find d/1300 25-11-2020` finds all assignments due on 25-11-2020, at any time of the day and all assignments due at 1300, on any date."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Keywords used with prefixes `n/`,`mod/` and `p/` are **case-insensitive**."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Here is an example with steps for you to follow:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1) To find assignments from the modules CS2100 and ST2334, you can simply key in `find mod/CS2100 ST2334`. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![FindCommand1](images/FindCommandDiagram1.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 10: `find mod/CS2100 ST2334` inputted by user*"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "2) Assignments from the modules CS2100 and ST2334 will appear in the assignment list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "3) A message that indicates the number of assignments found is displayed in the Message Box."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![FindCommand2](images/FindCommandDiagram2.png)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 11: The displayed message and the updated list*"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `find p/medium low`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `find d/12-12-2020 13-10-2020`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* You can only **find assignments with keywords of the same prefix**. For example, `find n/Assignment d/23-10-2020` is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Editing your assignment : `edit`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `edit INDEX PREFIX/EDITED_FIELD [MORE_PREFIX/EDITED_FIELD]`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can specify an assignment\u0027s index to edit its fields. These fields are the name, module code and deadline of assignment."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can edit more than one field of an assignment at a time so that you can conveniently amend all spelling errors or mistakes when adding assignments! For example, you can key in `edit 1 n/Tutorial mod/CS2103T` to edit both the name and module code in a single command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This is the table of prefixes used:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| Prefix | Syntax | Example |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "|-|-|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `n/` | n/NAME_OF_ASSIGNMENT | - `n/Tutorial` |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `mod/` | mod/MODULE_CODE_OF_ASSIGNMENT | - `mod/ST2334` |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `d/` | d/DEADLINE_OF_ASSIGNMENT | - `d/24-10-2020 1300` |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Here is an example with steps for you to follow:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1) To edit the name of the assignment with the first index in the assignment list to \"Statistics Lab\", you can simply key in `edit 1 n/Statistics Lab` in the Command Box. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![EditCommand1](images/EditCommand1.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 12: `edit 1 n/Statistics Lab` inputted by user*"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "2) The name of the assignment is changed to \"Statistics Lab\"."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "3) A message that indicates details of the edited assignment is displayed in the Message Box."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "![EditCommand2](images/EditCommand2.png)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "*Figure 13: The displayed message and the edited assignment*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples: "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `edit 3 mod/CS2100`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "- `edit 1 d/10-10-2020 1200`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **One** `INDEX` and **at least one** `PREFIX/EDITED_FIELD` must be present. For example, `edit` is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Setting reminders for assignments : `remind`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Format: `remind INDEX [MORE_INDEXES]`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can set reminders for specific assignments which will be displayed in `Your reminders` (Highlighted in red in the figure below) for your easy referral."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![YourReminders](images/YourReminders.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 14: `Your reminders` highlighted in red*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can use the `INDEX` of the assignment as shown in your assignment list to set reminders for that assignment. "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "For example, `remind 1` will set reminders for the first assignment in your assignment list (\"Statistics tutorial\" as shown in the Figure X) and adds it to `Your reminders` (Figure X)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Remind1](images/Remind1.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 15: Before \"Statistics tutorial\" is added into `Your reminders`*"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "      "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Remind1InYourReminders](images/Remind1InYourReminders.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 16: \"Statistics tutorial\" (highlighted in red) is added into `Your reminders`*"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can set reminders for **more than one** assignments at a time as well. Here is an example with steps for you to follow:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1) To set reminders assignments \"Essay\" and \"Assignment 3\" (the second and fourth assignment respectively in your assignment list as shown in Figure X), you can simply enter `remind 2 4` into the Command Box."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Remind24](images/Remind24.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 17: Before \"Essay\" and \"Assignment 3\" are added into `Your reminders`*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "2) You have successfully set reminders for both assignments, and they can now be found under `Your reminders`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Remind24InYourReminders](images/Remind24InYourReminders.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 18: \"Essay\" and \"Assignment 3\" (highlighted in red) are added into `Your reminders`*"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* At least one `INDEX` must be present. For example, `remind` is invalid."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* The `INDEX` must be found in your assignment list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Removing reminders for assignments : `unremind`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Format: `unremind INDEX`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can remove your reminded assignments from `Your reminders` by specifying the `INDEX` of the assignment as shown in `Your reminders`. "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "For example, `unremind 1` will remove the first assignment in `Your reminders` (\"CS2106 Lab\" as shown in the figure below)."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Unemind1](images/Unremind1.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 19: Before \"Statistics tutorial\" (highlighted in red) is removed from `Your reminders`*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "      "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   ![Unremind1YourReminders](images/Unremind1YourReminders.png)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 20: \"Statistics tutorial\" is removed from`Your reminders`*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* At least one `INDEX` must be present. For example, `unremind` is invalid."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* The `INDEX` must be found in `Your reminders`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Setting priority for assignments : `prioritize`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `prioritize INDEX p/PRIORITY_OF_ASSIGNMENT`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "You can set priority levels for assignments based on their urgency. Assignments tagged with a priority level will be"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "shown with a coloured priority tag (As shown highlighted in red in the figure below)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   ![UserGuidePriorityTags](images/UserGuidePriorityTags.PNG)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 21: The priority tags of assignments highlighted in red*"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "You can use the `INDEX` of the assignment as shown in your assignment list to set priority tag for that assignment."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "For example, `prioritize 1 p/LOW` will set a low priority tag for the first assignment in your assignment list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "**:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* The `INDEX` must be found in your assignment list."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Priority levels you can use are `LOW`, `MEDIUM` and `HIGH` and they are case-insensitive."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* If the assignment already has a priority tag, this command will replace the previous priority tag with the new one."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Removing priority for assignments : `unprioritize`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Format: `unprioritize INDEX`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "You can remove a priority tag from an assignment that has a priority tag by specifying the `INDEX` of the assignment"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "you wish to have the priority tag removed."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "For example, `unprioritize 1` will remove the priority tag, if present, of the first assignment in your assignment list."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "**:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* At least one `INDEX` must be present. For example, `unprioritize` is invalid."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* The `INDEX` must be found in your assignment list."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Marking assignments as done : `done`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Format: `done INDEX [MORE_INDEXES]`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can keep track of your uncompleted assignments by marking assignments that you\u0027ve completed as done."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "You can mark **one or more** assignments as done by specifiying the assignment(s) `INDEX` as shown in your list. "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Here is an example with steps for you to follow:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1) To mark assignments with the name \"Essay\" and \"Biology lab report\" shown in the figure below as done, you can simply enter `done 2 3` into"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "the command line based on the indexes labelled in the figure."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideDoneCommandIndex](images/UserGuideDoneCommandIndex.PNG)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 22: `Indexes` of assignments labelled*"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2) The two assignments will be marked as done and each assignment will have a green tick displayed as labelled in the figure. "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideDoneCommandTicksAdded](images/UserGuideDoneCommandTicksAdded.PNG)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 23: Added ticks labelled*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3) A message that includes the information of the assignments marked as done will be displayed in the Command Box."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideDoneCommandSuccess](images/UserGuideDoneCommandSuccess.PNG)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 24: Message shown in Command Box labelled*"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* At least one index must be present. For example, `done` without any index is invalid."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* The indexes **must be found in your assignment list**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* The indexes **must not be duplicated**. For example, `done 4 4` is invalid."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Marking assignments as not done : `undone`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Format: `undone INDEX`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can unmark assignments that you have previously marked as done by specifying the assignment `INDEX` as shown in your"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can unmark `one` done assignment at a time. Here is an example with steps to follow:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1) If you have **accidentally** marked the assignment with the name \"Essay\" as done,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "you can simply enter `undone 2` into the command line based on the index labelled in the figure."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideUndoneCommandIndex](images/UserGuideUndoneCommandIndex.PNG)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 25: `Index` of assignment labelled*"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2) The green tick associated to the assignment is no longer displayed as shown in the diagram below."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideUndoneCommandTickRemoval](images/UserGuideUndoneCommandTickRemoval.PNG)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 26: Deleted green tick labelled*"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3) A message that includes the information of your assignment marked as undone will be displayed in the Command Box."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideUndoneCommandSuccess](images/UserGuideUndoneCommandSuccess.PNG)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "   *Figure 27: Message shown in Command Box labelled*"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* Assignments are marked as not done **by default**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* The index must be present. For example, `undone` without any index is invalid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* The index **must be found in your assignment list**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Scheduling assignments: `schedule`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Format: `schedule INDEX hrs/EXPECTED_HOUR af/AFTER_DATE AFTER_TIME by/BEFORE_DATE BEFORE_TIME`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "You can request for a possible suggested schedule to work on your assignments so that you will not be required to manually plan a time."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "You can schedule an assignment by specifying the assignment `INDEX` as shown in your assignment list,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "the expected hours to finish the assignment and the period of time you want to work on the assignment."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "The suggested schedule with start time and end time will be displayed in the assignment card (Highlighted"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "in red in the figure below)."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "You can be ensured that the suggested time slot will not clash with any of your lessons or the suggested time"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "slots of other assignments."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Here is an example with steps to follow:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "1) You want to schedule assignments with the name \"CS2106 Lab\" as shown in the figure below with an expected hour of 5 hours"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "and need to be done by a week from now (although the actual deadline is longer)."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideScheduleCommand](images/UserGuideScheduleCommand.PNG)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 28: Assignment to schedule*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "2) You can simply enter `schedule 3 hrs/5 af/01-01-2020 0000 by/23-12-2020 2359` into the command box."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideScheduleCommandInput](images/UserGuideScheduleCommandInput.PNG)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 29: Command inputted by user*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "3) The suggested time slot will be displayed in the assignment card."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideScheduleCommandResult](images/UserGuideScheduleCommandResult.PNG)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 30: Message shown in Command Box and suggested schedule displayed in the assignment card*"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `schedule 1 hrs/2 af/23-12-2020 1800 by/23-12-2020 2359`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `schedule 2 hrs/5 af/01-01-2020 0530 by/01-01-2021 0530`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* The index **must be found in your assignment list**."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* The expected number of hours **must be a positive integer between `1` and `5`**."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `BEFORE_DATE` is in the format dd-MM-yyyy and `BEFORE_TIME` is in the format `HHmm`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Removing suggested time for assignments: `unschedule`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Format: `unschedule INDEX`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "You can remove the suggested time slot of your assignments from the assignment list by specifying the "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "assignment `INDEX` as shown in your assignment list."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "For example, `unschedule 3` will remove the suggested time slot of your third assignment."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUnscheduleCommandInput](images/UserGuideUnscheduleCommandInput.PNG)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 31: Assignment to remove the suggested schedule*"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUnscheduleCommandResult](images/UserGuideUnscheduleCommandResult.PNG)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 32: Message shown in Command Box and suggested schedule removed*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "       "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "More examples:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `unschedule 1`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `unschedule 3`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* The index **must be found in your assignment list**."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Undoing commands: `undo`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "You can undo all previous commands one at a time if you make mistakes in commands."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Here is an example with steps to follow:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "1) You accidentally delete the first assignment by entering `delete 1` command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUndoCommandDeleteInput](images/UserGuideUndoCommandDeleteInput.PNG)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 33: Delete the first assignment*"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUndoCommandDeleteResult](images/UserGuideUndoCommandDeleteResult.PNG)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 34: Result after deleting the first assignment*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "2) You can enter `undo` to undo the `delete 1` command."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUndoCommandInput](images/UserGuideUndoCommandInput.PNG)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 35: Undo the delete command*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ![UserGuideUndoCommandResult](images/UserGuideUndoCommandResult.PNG)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    *Figure 36: Result after undoing the delete command*"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Clearing all assignments: `clear`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can clear all your existing assignments and lessons at the start of every semester."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If you cleared all your assignments and lessons by accident, use `undo` to retrieve your deleted data."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Accessing help: `help`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "If you are new to ProductiveNUS or want to have a quick overview of all the available commands, you can simply enter `help` and a Help Window will appear as shown in the labelled diagram below."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideHelpCommand](images/UserGuideHelpCommand.PNG)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 37: Help Window labelled*"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can use this command to exit the program."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Automated features and enhancements"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Upcoming tasks"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Your `Upcoming tasks` are updated in real time."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "If the current time is pass the **deadline of an assignment or the end time of a lesson**, ProductiveNUS **automatically removes** the assignment or lesson from `Upcoming tasks`."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "As such, you do not need to worry about manually updating your `Upcoming tasks` as you will receive accurate information of your academic schedule in real time."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Only assignments with deadlines **before** the current time and lessons with end time **before** the current time if displayed in `Upcoming tasks`. For example, if the deadline of an assignment has time `2359`, when the current time changes from `2358` to `2359`, the assignment will automatically be removed from `Upcoming tasks`."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Remarks on deadline of assignments and start time of lessons"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "You can easily view how much time you have left before your assignment is due and when your lessons start. As such, you can better plan out your time to ensure you have enough time to complete your assignments and attend your lessons on time."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "For your assignments and lessons, assignments due in **more than a week\u0027s time** will be displayed in white, while assignments that are **overdue** or due in **less than a day\u0027s time** will be displayed in red (Figure 29).  "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " ![AutoDiagram](images/AutoDiagram.png)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   *Figure 29: Hours or days due for assignments and lessons*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                 "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " **:clipboard: Pointers to note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Unlike your `Upcoming tasks`, the remarks are currently **not updated in real time**. As such, the remarks displayed is the time you have left from when you open ProductiveNUS. Only when you interact with the assignments (clicking or using the commands to alter the assignment list) will the remarks get updated."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cbr\u003eDo look forward to the next version of ProductiveNUS to have your remarks updated in real time!"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Saving the data"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "ProductiveNUS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| Action | Format | Examples |"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "|-|-|-|"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **add** | `add n/NAME_OF_ASSIGNMENT d/DEADLINE_OF_ASSIGNMENT TIME_ASSIGNMENT_IS_DUE mod/MODULE [p/PRIORITY] [remind]` | `add n/Math tutorial d/21-03-2020 1100 mod/ST2334` |"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **delete** | `delete INDEX [MORE_INDEXES]` | `delete 3`\u003cbr\u003e`delete 2 3 4` |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **import** | `import url/NUSMODS_URL` | `import url/https://nusmods.com/timetable/sem-2/share?CS2108\u003dLEC:1` |"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **list** | `list [NUMBER_OF_DAYS]` | `list 2`\u003cbr\u003e`list` |"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **find** | `find PREFIX/ KEYWORD [MORE_KEYWORD]` | `find mod/CS2103T CS2100`\u003cbr\u003e`find p/HIGH` |"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **remind** | `remind INDEX [MORE_INDEXES]` | `remind 5`\u003cbr\u003e`remind 2 4 5` |"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **unremind** | `unremind INDEX` | `unremind 2` |"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **prioritize** | `prioritize INDEX p/PRIORITY` | `prioritize 3 p/HIGH`\u003cbr\u003e`prioritize 1 p/LOW` |"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **unprioritize** | `unprioritize INDEX` | `unprioritize 1` |"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **done** | `done INDEX` | `done 4` |"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **undone** | `undone INDEX` | `undone 2` |"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "| **schedule** | `schedule INDEX expected/EXPECTED_HOUR dobefore/BEFORE_DATE BEFORE_TIME` | `schedule 1 expected/2 before/23-12-2020 2359` |"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "| **unschedule** | `unschedule INDEX` | `unschedule 1` |"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "| **undo** | `undo` | `undo` |"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **clear** | `clear` | `clear` |"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **help** | `help` | `help` |"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "| **exit** | `exit` | `exit` |"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**A**: "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. Install the app in your other computer and start the app."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2. Notice that a data file named `addressbook.json` is created under the `/data` folder."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3. Close the app in your other computer."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "4. Overwrite the newly created data file with the data file from your previous computer."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "5. All your existing data has been successfully transferred!"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Q**: I am not free during the time that my assignment has been scheduled. How do I reschedule?\u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can reschedule by using the schedule command on that assignment again.\u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. Type the schedule command into the Command Box with the index of the assignment that you want to reschedule. You can refer to the diagram below.\u003cbr\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideReschedule](images/UserGuideReschedule.PNG)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 38: Index of the assignment to reschedule labelled*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**:bulb: Tip:**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can copy the entire command if you intend to reschedule the assignment more than once. "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can paste the command into the command box after step 2 and repeat step 1-2 until you have obtained your"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " ideal schedule."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2. Press ENTER to reschedule your assignment and your assignment will be scheduled to another time or day as shown in the diagram below.\u003cbr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideRescheduleSuccess](images/UserGuideRescheduleSuccess.PNG)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 39: New suggested time for assignment labelled*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Q**: I double-clicked the productivenus.jar file but the app is not starting. What should I do?\u003cbr\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "**A**: This is most likely caused by the *Security and Privacy Settings* of your operating system. You can either"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "modify your *Security and Privacy Settings* (depends on your operating system) to accept"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "anonymous files or run ProductiveNUS with the `Command Prompt`."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Below are the instructions for using the `Command Prompt` to open ProductiveNUS for Windows Users."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "If your computer runs with Ubuntu or MacOS, the following instructions is applicable but in order to"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "open the `Command Prompt`, you need to run the `Terminal` application."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "*For Windows Users:*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1. Open the folder where you have downloaded and saved the productivenus.jar file."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2. Copy the file directory of the folder. You can refer to the labelled diagram below.\u003cbr\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideLocateDirectory](images/UserGuideLocateDirectory.PNG)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 40: File directory labelled*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3. Open your command prompt. To do so, press the Windows key on your keyboard, type in `cmd` and press ENTER."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "4. Your command prompt will start, and it should look something similar to the diagram below.\u003cbr\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideCommandPrompt](images/UserGuideCommandPrompt.PNG)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 41: Interface of Command Prompt*"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "4. In the command prompt, type `cd ` and paste the file directory that you have copied in step 2."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cbr\u003eFor example, `cd C:\\Users\\YourUserName\\Desktop\\ProductiveNUS`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "5. Press ENTER and the file directory will be shown in the command prompt as shown in the diagram below.\u003cbr\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   ![UserGuideChangeDirectory](images/UserGuideChangeDirectory.PNG)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "   *Figure 42: After changing file directory in Command Prompt*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "6. Finally, type `java -jar productivenus.jar` and press ENTER to start the app."
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 146,
      "andreatanky": 176,
      "hyngkng": 86,
      "minhhhnguyen2000": 105,
      "-": 100,
      "printinghelloworld": 120
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[-\u003e LogicManager : execute(\"add n/Lab mod/CS2103 d/10-10-2020 2359\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"add n/Lab mod/CS2103 d/10-10-2020 2359\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e AddCommandParser : parse(\"n/Lab mod/cS2103 d/10-10-2020 2359\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommandParser -\u003e AddCommand : AddCommand(assignment)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommand --\u003e AddCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser --\u003e LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommand -\u003e Model : hasAssignment(toAdd)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommand -\u003e Model : addAssignment(toAdd)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "printinghelloworld": 75
    }
  },
  {
    "path": "docs/diagrams/AutoUpdateTaskListActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "(*)  --\u003e \"Open ProductiveNUS\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \u003d\u003d\u003dB1\u003d\u003d\u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \"Run JavaFX thread\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \"User enters command\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "If \"[exit command entered]\" then"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e [Yes] \"Stop running JavaFX thread\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "else"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e [No] \"Update GUI according to command\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \"User enters command\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003d\u003d\u003dB1\u003d\u003d\u003d --\u003e \"Start Timer\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e Check if user exits"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "If \"[User exits]\" then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e [No] \"Check deadline of next task\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\"Check deadline of next task\" --\u003e If \"[current time \u003e deadline of task]\" then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    --\u003e [Yes] \"Remove task from task list\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    --\u003e \"Get next task\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    else"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    --\u003e [No] \"Do nothing\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    --\u003e \"Get next task\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    Endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\"Get next task\" --\u003e \"Check if user exits\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "else"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e [Yes] \"Stop Timer\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e \u003d\u003d\u003dB2\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "EndIf"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003d\u003d\u003dB2\u003d\u003d\u003d --\u003e \"ProductiveNUS closes\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 34
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \"d:CommandLogic\" as CommandLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1 2\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"delete 1 2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e DeleteCommandParser : parse(\"1 2\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommandParser --\u003e ProductiveNusParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommand -\u003e Model : getFilteredAssignmentList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommand -\u003e CommandLogic : checkForDuplicatedIndexes([1,2])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "CommandLogic --\u003e DeleteCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeleteCommand -\u003e CommandLogic : checkForInvalidIndexes([1,2], model, DeleteCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "CommandLogic --\u003e DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "loop 2 times"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    DeleteCommand -\u003e Model : deleteAssignment(assignmentToDelete)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 27,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/DoneMultipleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "skinparam ParticipantFontSize 30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "skinparam ArrowFontSize 28"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "skinparam defaultFontSize 28"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "box LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":DoneCommandParser\" as DoneCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":DoneCommand\" as DoneCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":CommandLogic\" as CommandLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "box MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[-\u003e LogicManager : execute(\"done 1 3\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"done 1 3\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create DoneCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e DoneCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate DoneCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate DoneCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e DoneCommandParser : parse(\"1 3\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate DoneCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create DoneCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommandParser -\u003e DoneCommand : DoneCommand(parsedIndexes)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate DoneCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommand --\u003e DoneCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate DoneCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate DoneCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "destroy DoneCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "LogicManager -\u003e DoneCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate DoneCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommand -\u003e CommandLogic : checkForDuplicatedIndexes([1 3])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandLogic --\u003e DoneCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommand -\u003e CommandLogic : checkForInvalidIndexes([1 3])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandLogic --\u003e DoneCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "loop 2 times"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    DoneCommand -\u003e Model : get"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Model --\u003e DoneCommand : assignmentToMarkDone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    DoneCommand -\u003e Model : setAssignment(assignmentToMarkDone, assignmentMarkedDone)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Model --\u003e DoneCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "end"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommand -\u003e CommandResult : CommandResult(assignmentsToMarkDone)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandResult --\u003e DoneCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "DoneCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate DoneCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "printinghelloworld": 91
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[-\u003e LogicManager : execute(\"find n/Lab\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"find n/Lab\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e FindCommandParser : parse(\"n/Lab\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommandParser --\u003e ProductiveNusParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommand -\u003e Model : updateFilteredAssignmentList(NameContainsKeywordsPredicate([\"Lab\"]))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 69
    }
  },
  {
    "path": "docs/diagrams/ImportSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":ImportCommandParser\" as ImportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \"f:ImportCommand\" as ImportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "box Timetable TIMETABLE_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":TimetableUrlParser\" as TimetableUrlParser TIMETABLE_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":TimetableRetriever\" as TimetableRetriever TIMETABLE_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[-\u003e LogicManager : execute(\"import url/URL\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"import url/URL\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create ImportCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser -\u003e ImportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser -\u003e ImportCommandParser : parse(\"url/URL\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ImportCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create TimetableUrlParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommandParser -\u003e TimetableUrlParser : parseTimetableUrl(\"URL\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate TimetableUrlParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "TimetableUrlParser -\u003e ImportCommandParser : timetableData"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate TimetableUrlParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create ImportCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommandParser -\u003e ImportCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommand --\u003e ImportCommandParser : f"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommandParser --\u003e ProductiveNusParser : f"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ImportCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "destroy ImportCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "LogicManager -\u003e ImportCommand : execute()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ImportCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommand -\u003e Model : importTimetable(timetableData)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Model -\u003e TimetableRetriever : retrieveLessons(timetableData)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate TimetableRetriever"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "TimetableRetriever --\u003e Model : lessons"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate TimetableRetriever"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Model --\u003e ImportCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "CommandResult --\u003e ImportCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ImportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ImportCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 87
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":ListCommandParser\" as ListCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \"l:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[-\u003e LogicManager : execute(\"list 3\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"list 3\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create ListCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e ListCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser -\u003e ListCommandParser : parse(\"3\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommandParser -\u003e ListCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommand --\u003e ListCommandParser : l"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommandParser --\u003e ProductiveNusParser : l"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "destroy ListCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNusParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommand -\u003e Model : updateFilteredAssignmentList(showLimitedAssignments())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ListCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 68
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Interface ReadOnlyProductivenus \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class Productivenus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class ReadOnlyProductivenus"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Package Assignment {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class Assignment"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class Remind"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027class Priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class Schedule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class UniqueAssignmentList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Package Lesson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027class Lesson"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class UniqueLessonList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027abstract class Task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class Deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class Name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class ModuleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Class UniqueTaskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Productivenus .left.|\u003e ReadOnlyProductivenus"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "ModelManager o-.down-\u003e \"1\" Productivenus"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Productivenus *-down-\u003e Assignment"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" Assignment"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus o--\u003e \"*\" Assignment"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" UniqueAssignmentList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027UniqueAssignmentList o--\u003e \"*\" Assignment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Assignment *--\u003e \"1\"Remind"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Assignment *--\u003e \"1\"Schedule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Assignment *--\u003e \"1\"Priority"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Task \u003c|-up- Assignment"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Productivenus *--\u003e Task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" Task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027UniqueTaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Task *--\u003e \"1\"Name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Task *--\u003e \"1\"Deadline"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Task *--\u003e \"1\"ModuleCode"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Task \u003c|-up- Lesson"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Productivenus *--\u003e Lesson"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" Lesson"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus o--\u003e \"*\" Lesson"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Productivenus *--\u003e \"1\" UniqueLessonList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027UniqueLessonList o--\u003e \"*\" Lesson"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Lesson -[hidden]right-\u003e Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Name -[hidden]right-\u003e ModuleCode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027ModuleCode -[hidden]right-\u003e Deadline"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Deadline -[hidden]right-\u003e Remind"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Remind -[hidden]right-\u003e Priority"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ModelManager --\u003e\"1\" Assignment : filtered list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ModelManager --\u003e\"1\" Task : filtered list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 46,
      "andreatanky": 9,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/NegateCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam classAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package Commands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class \"{abstract}\\nNegateCommand\" as NegateCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    {static} COMMAND_WORD : String \u003d \"un\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    index : Index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    getTargetIndex(targetIndex : Index)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class UnremindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class UnprioritizeCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class UndoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "NegateCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "UnremindCommand -up-|\u003e NegateCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "UnprioritizeCommand -up-|\u003e NegateCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "UndoneCommand -up-|\u003e NegateCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 26
    }
  },
  {
    "path": "docs/diagrams/PredicateClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "skinparam classAttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "show members"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "scale 1024 width"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "scale 1000 height"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "interface \"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\" : test(Assignment): boolean"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Package Assignment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "scale max 800 height"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class NameContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    keywords: List\u003cString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    test(Assignment): boolean"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class ModuleCodeContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    keywords: List\u003cString\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    test(Assignment): boolean"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class DeadlineContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    keywords: List\u003cString\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    test(Assignment): boolean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Class PriorityContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    keywords: List\u003cString\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    test(Assignment): boolean"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "NameContainsKeywordsPredicate ..up|\u003e \"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ModuleCodeContainsKeywordsPredicate ..up|\u003e \"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "DeadlineContainsKeywordsPredicate ..up|\u003e \"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "PriorityContainsKeywordsPredicate ..up|\u003e \"\u003c\u003cInterface\u003e\u003e\\nPredicate\u003cAssignment\u003e\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 38
    }
  },
  {
    "path": "docs/diagrams/PrioritizeSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":PrioritizeCommandParser\" as PrioritizeCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \"f:PrioritizeCommand\" as PrioritizeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[-\u003e LogicManager : execute(\"prioritize 3 p/HIGH\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"prioritize 3 p/HIGH\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create PrioritizeCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser -\u003e PrioritizeCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate PrioritizeCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate PrioritizeCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser -\u003e PrioritizeCommandParser : parse(\"3 p/HIGH\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate PrioritizeCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create PrioritizeCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommandParser -\u003e PrioritizeCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate PrioritizeCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommand --\u003e PrioritizeCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate PrioritizeCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommandParser --\u003e ProductiveNusParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate PrioritizeCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "destroy PrioritizeCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNusParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "LogicManager -\u003e PrioritizeCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate PrioritizeCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommand -\u003e Model : setAssignment(toPrioritize, prioritizedAssignment)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Model --\u003e PrioritizeCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "CommandResult --\u003e PrioritizeCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "PrioritizeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate PrioritizeCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 69
    }
  },
  {
    "path": "docs/diagrams/RemindMultipleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam ParticipantFontSize 30"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam ArrowFontSize 30"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "skinparam defaultFontSize 30"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "box LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":ProductiveNusParser\" as ProductiveNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "participant \":RemindCommandParser\" as RemindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "participant \":RemindCommand\" as RemindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "participant \":CommandLogic\" as CommandLogic LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "box MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[-\u003e LogicManager : execute(\"remind 1 3\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "LogicManager -\u003e ProductiveNusParser : parseCommand(\"remind 1 3\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "activate ProductiveNusParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "create RemindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e RemindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate RemindCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate RemindCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser -\u003e RemindCommandParser : parse(\"1 3\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate RemindCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "create RemindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommandParser -\u003e RemindCommand : RemindCommand(parsedIndexes)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate RemindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommand --\u003e RemindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate RemindCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommandParser --\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate RemindCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommandParser -[hidden]-\u003e ProductiveNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "destroy RemindCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNusParser --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "deactivate ProductiveNusParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "LogicManager -\u003e RemindCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate RemindCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommand -\u003e CommandLogic : checkForDuplicatedIndexes([1 3])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandLogic --\u003e RemindCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommand -\u003e CommandLogic : checkForInvalidIndexes([1 3])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate CommandLogic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "CommandLogic --\u003e RemindCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate CommandLogic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "loop 2 times"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    RemindCommand -\u003e Model : get"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Model --\u003e RemindCommand : assignmentToRemind"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    RemindCommand -\u003e Model : setAssignment(assignmentToRemind, remindedAssignment)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    Model --\u003e RemindCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "end"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "RemindCommand -\u003e CommandResult : CommandResult(assignmentsToRemind)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "CommandResult --\u003e RemindCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "RemindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate RemindCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 67,
      "printinghelloworld": 26
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Interface ProductiveNusStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Class JsonProductiveNusStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "StorageManager o--\u003e ProductiveNusStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "JsonProductiveNusStorage .left.|\u003e ProductiveNusStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "JsonProductiveNusStorage .down.\u003e JsonSerializableProductiveNusStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "JsonSerializableProductiveNusStorage .down.\u003e JsonSerializableAssignment"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "JsonSerializableProductiveNusStorage .down.\u003e JsonSerializableLesson"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "!define TIMETABLE_COLOR #FF6600"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "!define TIMETABLE_COLOR_T1 #FFA500"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "-": 75
    }
  },
  {
    "path": "docs/team/andreatanky.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "title: Andrea Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Project: ProductiveNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Project Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNUS is a desktop application targeted at Computing students of National University of Singapore (NUS) to help them manage and schedule their academic tasks efficiently. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### My Contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Code contributed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This is the link to the code contributed by me:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dandreatanky\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "#### Enhancements and features implemented"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Creating the module code class** [\\#35](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/35)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I refactored the address field in the original AB3 to module code field of ProductiveNUS. The validation regex had to be changed to suit that of module codes in NUS as well. This process was quite tedious as it was easy to miss out some address fields, which would cause a build error."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Implemented task list from assignment and lesson list** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#81](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/81/files)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "The task list we had in mind consists of assignments and lessons which are initially stored in two separate lists. Thus, I had to find a way to combine the two lists and sort the tasks by ascending time fields. I created the `UniqueTaskList` class along with other relevant classes and implemented methods that modifies and updates the list throughout relevant files. Many files had to be changed such as `Logic.java`, `Model.java`, `ModelManager.java` and `ReadOnlyAddressBook.java` etc. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This was challenging as I had to think about the method to add the assignments and lessons into the task list. There were many ways such as for example adding an assignment into the task list immediately after it is added into the assignment list or clearing the task list and then adding all assignments and lessons. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This was because the ease of deleting assignments had to be taken into account. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Created storage for lessons** "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#35](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/35)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I created the `JsonAdaptedLesson` class and updated other json files such as `JsonSerializableProductiveNus.java` so that lessons are be stored."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Update classes for help, clear, undo and exit command such that no arguments are accepted**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#237](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/237/files)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#247](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/247)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I changed the constructor of these commands and updated its `execute` method to include checking for user input with Regular Expressions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **List Command** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#81](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/81/files)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#119](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/119/files)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#81](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/81/files)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#237](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/237/files)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#272](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/272)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I enhanced the list command by allowing users to key in an optional argument index (number of days from 1 to 50) so that they can view assignments with deadlines that fall within the current date and time and number of days later. This command required quite a few changes as we initially did not decide on a fixed range of indexes that is deemed valid for this command. However, we eventually decided to do so as it would suit the purpose of this command better, which is to allow users to view assignments that he needs to complete soon. Also, we initially wanted to make this command work with task list instead of assignment list but after it was implemented, we felt that the list command should work with assignment list and more changes had to be made. There was also the use of Optionals in its implementation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Tests were also added for `ListCommand` and `ListCommandParser`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Find Command** "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#126](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/126/files)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#249](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/249)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I enhanced the find command by allowing users to find assignments by its name, module code, deadline or priority and multiple keywords is supported. This command was rather tedious to implement as there were many factors and aspects to consider. The prefixes found in the user\u0027s input have to be identified and the respective parse methods should be called. There were also many exceptions and invalid inputs to account for, such as having more than one prefix, inputting an empty command and whether there is a preamble before the prefix and after the `find` command. Since we decided to allow users to find assignments based on date or time of deadline to make it easier for them to find assignments (The user might not be able to remember the full deadline of assignment, and inputting an incorrect date or time will lead to inefficient searches), the keywords after the prefix for deadline have to be individually identified (whether it is in date or time format) with Regular Expressions before the String keyword can be parsed. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Tests were also added for `FindCommand` and `FindCommandParser`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Delete Command** "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#145](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/145/files)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#162](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/162/files)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I enhanced the delete command to support multiple deletions of assignments in a single command. I implemented the methods used in CommandLogic (Refactoring into this common class was done by another team member when we decided that other commands should support multiple indexes as well) which checks for invalid and duplicated index inputs. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Tests were also added for `DeleteCommand` and `DeleteCommandParser`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### My Contributions to User Guide "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I contributed to the introduction of the User Guide and added documentation for list, find, delete and edit under features. I also added the About segment description, GUI terminologies and diagrams. [\\#127](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/127/files)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#148](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/148/files)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#161](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/161/files)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#173](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/173/files)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#175](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/175/files)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#176](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/176/files)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                        [\\#235](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/235/files)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### My Contributions to Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "I contributed to list, find and delete features under Implementations and its UML diagrams. I also updated the description and contributed to the diagram for `Model` and added in the Introduction segment of the Developer Guide. I also contributed to the Appendix section (User stories, target user profile etc.).[\\#53](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/53/files)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                                                                                                                                        [\\#131](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/131)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                                                                                                                                        [\\#160](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/160/files)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                                                                                                                                                                                                                                                                                        [\\#255](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/255/files)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  [\\#273](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/273)                                                                                                                                                                                                                                                                                                                  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### My Contributions to team-based tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I had set up the Github team org/repo and I manage the github settings for our team."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I maintained the issue tracker and I assigned and added relevant tags for issues."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I released v1.2 of ProductiveNUS before the deadline [v1.2 release](https://github.com/AY2021S1-CS2103T-F11-3/tp/releases/tag/v1.2)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I updated parts of the User/Developer Guide that are not specific to a feature"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I contributed to team meeting notes that were taken down during our weekly team discussions"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I sent summaries of what was discussed during our team meeting into our chat group to remind everyone of our individual/team responsibilities and deadlines "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* I contributed to the README file for ProductiveNUS. [\\#57](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/57/files)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                      [\\#69](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/69/files)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                                      [\\#70](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/70/files)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Review contributions:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* PRs reviewed (with non-trivial review comments): [\\#253](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/253)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[\\#135](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/135), [\\#125](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/125), [\\#74](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/74)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/andreatanky/ped/issues/1), [2](https://github.com/andreatanky/ped/issues/2), [3](https://github.com/andreatanky/ped/issues/3), [4](https://github.com/andreatanky/ped/issues/4), [5](https://github.com/andreatanky/ped/issues/5), [6](https://github.com/andreatanky/ped/issues/6), [7](https://github.com/andreatanky/ped/issues/7), [8](https://github.com/andreatanky/ped/issues/8))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andreatanky": 103
    }
  },
  {
    "path": "docs/team/choojiaxin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "title: Choo Jia Xin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "## Project: ProductiveNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Project Overview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "ProductiveNUS is a desktop application targeted at Computing students of National University of Singapore (NUS) to help them manage and schedule their academic tasks efficiently. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### My Contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Code contributed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "This is the link to the code contributed by me:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dchoojiaxin)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Enhancements and features implemented"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Creating the deadline class** "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#39](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/39)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I refactored the phone field in AB3 to the deadline field of Task in ProductiveNUS. The validation regex for phone had to be deleted and replaced with `DateTimeFormatter` to check for valid dates and times. This process was quite tedious as it was easy to miss out some phone fields in the comments, JavaDocs and names of methods and classes. Refactoring the test cases for phone to take in valid deadlines was also tedious and took quite some time, especially since this was done near the beginning of the project when I was still familiarising myself with the code base."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Creating the abstract Task class** "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#62](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/62)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#129](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/129)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I implemented the abstract Task class, which is the parent class of `Assignment` and `Lesson`. The creation of this class improves the product as it not only allowed us to implement a `UniqueTaskList` to store a user\u0027s upcoming tasks, but it enforces OOP principles as well."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The existence of the Task class also meant that the model package had to be refactored as the fields used in Task (`Name`, `Deadline` and `ModuleCode`) were currently in `Assignment` due to the way AB3 was implemented."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Set and remove reminders for assignments** "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#16](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/16)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#118](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/118)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#143](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/143)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#152](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/152)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I implemented the remind and unremind list command which allows the user to **set/remove reminders for one assignments at a time**. The user can set reminders for **multuiple assignments at a time** as well. This feature improves the product because a user may forget assignments that have faraway deadline and the app should provide a convenient way for users to be reminded to finish their assignments. A user can make mistakes when setting reminders for assignments as well, thus the app should provide a way for users to rectify their mistake. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The remind command was especially challenging to implement as it was implemented near the beginning of the project when I was still familiarising myself with the code base. The test cases for `RemindCommand` especially took some trial and error as I was unsure of the difference between the unfiltered and filtered list in `DeleteCommandTest`, which was where I was referencing the test cases from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "While implementing the unremind command, I also implemented the abstract `NegateCommand` class which `UnremindCommand` extends from. The `NegateCommand` was implemented to **enforce OOP principles** as other commands similar to unremind (unprioritize and undone) also extends from `NegateCommand`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Automated updating of task list**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#144](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/144)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#243](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/243)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I added automation of the task list so that it is updated in real time. This feature enables the app to check the user\u0027s upcoming tasks in real time and automatically updates removes any task that has passed. This feature improves the product significantly because a user will refer to their upcoming tasks frequently to quickly view what task they have next on their schedule. Thus, the app should accurately reflect the next task in their schedule without the need for a user to manually update it himself."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "This feature was particularly challenging to implement as I had to figure out a way for the app to periodically check data that can be modified in real time as well (whenever a user adds/deletes/edits an assignment or imports lessons). The implementation too was challenging as it required an **in-depth understanding of both multithreading and JavaFX** and a good amount of time was spent exploring multithreading using the typical Thread Java 11 API, before I found out that that would not be possible to use the typical Java 11 API for multithreading as JavaFX is not compatible with them."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**Credits**: Code implemented is adapted from one of the examples given in the [Task\u003cV\u003e JavaFX API](https://docs.oracle.com/javafx/2/api/javafx/concurrent/Task.html) as well as an answer from [StackOverflow](https://stackoverflow.com/questions/9966136/javafx-periodic-background-task)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "#### Bug fixes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Found bug in JsonSerializableAddressBookTest** "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#89](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/89)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "During v1.2b, there was a bug in the code which was causing the test cases in `JsonSerializableAddressBookTest` to fail. Upon further inpsection of the code, I managed to determine the source of the bug, which was that the `addressbook.json` file contained some invalid and unknown fields. This was due to our unfamiliarity with the code base at the time; hence we believed modifying the data stored in the `addressbook.json` file directly was safe."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "The root of the bug took some time figuring out as I was unfamilair with the storage package in the code base as, at that point in time, I did not need to modify any code in that package. Therefore, it was challenging to find the root of the bug as I had to spend a good amount of time exploring the code base using IntelliJ and understanding how `JsonSerializableAddressBook` was implemented."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### My Contributions to User Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I added documentation for remind, unremind and automated features and enhancements under features. I also added the icon usages, command syntax, as well as date and time format under About segment. I also helped to fix any formatting errors found in the User Guide. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#94](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/94), "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#128](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/128), "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#150](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/150), "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#153](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/153), "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#157](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/157), "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#168](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/168), "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#169](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/169), "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#179](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/179), "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#244](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/244), "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#268](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/268), "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#284](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/284) "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### My Contributions to Developer Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "I contributed to the remind feature under Imeplementations and its Sequence diagram. I also included documentation on the NegateCommand and automated updating of task list and their UML diagrams. I also editted the Class diagram for Storage and Model. I also contributed to the Appendix section (Manual testing etc.) "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#130](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/130), "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#137](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/137), "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#158](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/158), "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#266](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/266), "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#283](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/283)  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### My Contributions to team-based tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I maintained the issue tracker and I assigned and added relevant tags for issues."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I released v1.3 of ProductiveNUS before the deadline [v1.3 release](https://github.com/AY2021S1-CS2103T-F11-3/tp/releases/tag/v1.3)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I updated parts of the User/Developer Guide that are not specific to a feature"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I contributed to team meeting notes that were taken down during our weekly team discussions"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I sent a timeline of our deadline and deliverables to the group so that we would finish our tasks on time "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* I added user stories to the README. [\\#54](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/54/files)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Review contributions:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#35](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/35),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#61](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/61), "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#65](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/65), "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#68](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/68),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#73](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/73),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#74](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/74),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#80](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/80),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#81](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/81),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#120](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/120),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#122](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/122),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#126](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/126),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#163](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/163),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#166](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/166),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#182](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/182),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#230](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/230),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[\\#241](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/241)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Reported bugs and suggestions for other teams in the class (examples: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[1](https://github.com/ChooJiaXin/ped/issues/1), "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[2](https://github.com/ChooJiaXin/ped/issues/2), "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[3](https://github.com/ChooJiaXin/ped/issues/3), "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[4](https://github.com/ChooJiaXin/ped/issues/4), "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[5](https://github.com/ChooJiaXin/ped/issues/5))"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 121
    }
  },
  {
    "path": "docs/team/hyngkng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "title: Hwang Yong Kang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "## Project: ProductiveNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Project Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "ProductiveNUS is a desktop application targeted at Computing students of National University of Singapore (NUS) to help them manage and schedule their academic tasks efficiently. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### My Contributions to the Code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhyngkng)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Created the Lesson class**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#68](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/68/files)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **What:** A separate class that stores the user\u0027s lesson information which will be imported using an import feature."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Why:** Lessons are meant to be viewed only and cannot be modified by the user, unlike the Assignment class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Credits:** Code implemented is adapted from existing Person class in AddressBook3."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Import Command**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#73](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/73/files),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#80](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/80/files),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#241](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/241/files),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#276](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/276/files)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **What:** Allows the user to import their NUSMods lesson information into ProductiveNUS."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Why:** This feature improves the product significantly because a user can conveniently refer to their timetable on ProductiveNUS instead of having to go to NUSMods. Other commands such as Schedule also works best if the user can import their weekly timetable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Note:** This enhancement retrieves data from the NUSMods API by sending a HTTP GET request. A new model class Lesson is also implemented to support the import command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Credits:** Code implemented is adapted from examples on [Baldeung](https://www.baeldung.com/java-http-request) and the [NUSMods API](https://api.nusmods.com/v2/)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Created the Priority class**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#124](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/124/files)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **What:** An assignment field that is optional. Users can set priorities to their assignments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **Why:** It is likely that users have assignments of different importance and hence, having a priority tagged to the assignment would help them better manage their work."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **Credits:** Code implemented is adapted from existing fields in AddressBook3."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Prioritize/Unprioritize Command**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#124](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/124/files),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#167](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/167/files),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#276](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/276/files)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **What:** Allows the user to set the priority level of their assignments in ProductiveNUS, which is displayed as a coloured tag in the assignment card."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **Why:** This feature improves the user\u0027s experience as it is easier for them to spot assignments that are of greater importance so as to better plan their schedule."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * **Note:** This enhancement is compatible with the Find feature, where users are able to list assignments of a specific priority tag."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### My Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#36](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/36/files),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#95](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/95/files),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#132](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/132/files),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#163](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/163/files),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#170](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/170/files),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#248](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/248/files)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I added the Import and Prioritize/Unprioritize segments of the User Guide."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I also made format changes to ensure that the document is standardised."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### My Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#59](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/59/files),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#61](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/61/files),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#134](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/134/files),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#272](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/272/files)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I added the Import and Prioritize/Unprioritize segments of the Developer Guide."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I also made format changes to ensure the document is standardised."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### My Contributions to team-based tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#180](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/180/files),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  [\\#254](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/254/files)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I helped to refactor and rename all \"AddressBook\" to \"ProductiveNUS\"."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * I also helped with formatting issues with the User Guide."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### My Review Contributions"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **PRs reviewed:**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#58](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/58),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#60](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/60),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#65](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/65),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#120](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/120),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#126](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/126),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#131](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/131),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#145](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/145),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#148](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/148),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#150](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/150),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#154](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/154),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [\\#173](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/173)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * **Bugs found for PED:**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [1](https://github.com/hyngkng/ped/issues/1),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [2](https://github.com/hyngkng/ped/issues/2),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [3](https://github.com/hyngkng/ped/issues/3),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    [4](https://github.com/hyngkng/ped/issues/4)"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 87
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "title: Nguyen Hoang Hai Minh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 45
    }
  },
  {
    "path": "docs/team/minhhhnguyen2000.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "title: Nguyen Hoang Hai Minh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 46
    }
  },
  {
    "path": "docs/team/printinghelloworld.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "title: Jerry Ho\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "## Project: ProductiveNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "ProductiveNUS is a desktop application targeted at Computing students of National University of Singapore (NUS) to help them manage and schedule their academic tasks efficiently. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dprintinghelloworld)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* **New Feature**: Added the ability to mark assignments as done and undone."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * What it does: Allows the user to mark (multiple) completed assignments as done and uncompleted assignments as undone. Allows the user to easily differentiate between completed assignments and uncompleted assignments simply by looking at the Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Justification: This feature improves the product because a user can now keep track of the assignments that he/she has completed and focus on those that are not yet completed. In the event that the user realised that he/she an uncompleted assignment marked as done, he/she can simply remove the done status of the assignment using the undone command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Highlights: This enhancement affects several other classes and some of the existing features. The implementation required changes to the existing GUI, CommandParser and AssignmentBuilder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Credits: Some reference was made to RemindCommand*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Updated the Add assignment feature to handle the new features (remind \u0026 priority) added by my teammates (Pull requests [\\#74](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/74), [\\#154](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/154))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Updated the Help feature to make it informative by providing a comprehensive summary of the features in our project (Pull requests [\\#146](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/146), [\\#233](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/233))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Updated the Remind feature and made the error messages more informative (added support for multiple remind) (Pull request [\\#280](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/280))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* **Team-based tasks contributions**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Removed multiple classes and attributes from the existing classes to facilitate the morphing process of our project from an Addressbook to ProductiveNus (Pull requests [\\#66](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/66), [\\#67](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/67))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Renamed Deadline class to Time class as Time is a more suitable name for the parent Task class. (Pull request [\\#230](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/230))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added documentation for the features `Done` and `Undone` (Pull request [\\#135](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/135))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added documentation for the features `Help` and `Clear` (Pull request [\\#166](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/166))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added documentation for the FAQ section: (Pull requests [\\#166](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/166), [\\#182](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/182))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added Sequence Diagram for `Add` and `Done` features, and Class Diagram for `Task`. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added implementation details of the `Add assignment` feature. (Pull request [\\#279](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/279))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Added implementation details for the `Mark assignments as done` feature. (Pull request [\\#279](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/279)) "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * Modified implementation details for the `Set reminders to assignments` feature (Combined it together with `Mark assignments as done` feature). (Pull request [\\#279](https://github.com/AY2021S1-CS2103T-F11-3/tp/pull/279))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/223), [2](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/222), [3](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/217), [4](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/219), [5](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/220), [6](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/221), [7](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/216), [8](https://github.com/AY2021S1-CS2103T-W10-1/tp/issues/218))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "  * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/359))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "printinghelloworld": 27
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.assignment`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.assignment.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.storage.JsonProductiveNusStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.storage.ProductiveNusStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ProductiveNus ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNusStorage productiveNusStorage \u003d new JsonProductiveNusStorage(userPrefs.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        storage \u003d new StorageManager(productiveNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s ProductiveNus and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The data from the sample ProductiveNus will be used instead if {@code storage}\u0027s ProductiveNus is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * or an empty ProductiveNus will be used instead if errors occur when reading {@code storage}\u0027s ProductiveNus."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Optional\u003cReadOnlyProductiveNus\u003e productiveNusOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ReadOnlyProductiveNus initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            productiveNusOptional \u003d storage.readProductiveNus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (!productiveNusOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ProductiveNus\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            initialData \u003d productiveNusOptional.orElseGet(SampleDataUtil::getSampleProductiveNus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ProductiveNus\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            initialData \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProductiveNus\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            initialData \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new ModelManager(initialData, userPrefs, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProductiveNus\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        logger.info(\"Starting ProductiveNus \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ProductiveNus ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 23,
      "minhhhnguyen2000": 1,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String LOG_FILE \u003d \"productivenus.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \"The assignment index provided is greater than the size of the list.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW \u003d \"%1$d assignments listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INDEXES \u003d \"Duplicated indexes found.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_PREFIXES_FOUND \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \"Invalid command format! \\nMultiple instances of the same prefix found. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_INVALID_URL \u003d \"Invalid NUSMods URL found.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON \u003d \"Invalid NUSMods lessons found.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "andreatanky": 4,
      "hyngkng": 2,
      "minhhhnguyen2000": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns ProductiveNus."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @see seedu.address.model.Model#getProductiveNus()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    ReadOnlyProductiveNus getProductiveNus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of reminder assignments */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getRemindedAssignmentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns the user prefs\u0027 ProductiveNus file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Path getProductiveNusFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 8,
      "andreatanky": 3,
      "minhhhnguyen2000": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.ProductiveNusParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ProductiveNusParser productiveNusParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNusParser \u003d new ProductiveNusParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Command command \u003d productiveNusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(command instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            model.preUpdateModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (CommandException commandException) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!(command instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                model.goToPreviousModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw commandException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            storage.saveProductiveNus(model.getProductiveNus());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ReadOnlyProductiveNus getProductiveNus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return model.getProductiveNus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getRemindedAssignmentList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getRemindedAssignmentsList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return model.getProductiveNusFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 13,
      "andreatanky": 3,
      "minhhhnguyen2000": 16,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Adds an assignment to ProductiveNus."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_NAME + \"ASSIGNMENT NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY\" + \"] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"[remind]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in ProductiveNus\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Assignment toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AddCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        toAdd \u003d assignment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (model.hasAssignment(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "hyngkng": 6,
      "andreatanky": 1,
      "minhhhnguyen2000": 9,
      "-": 36,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Clears ProductiveNus."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"ProductiveNus has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ClearCommand(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean hasNoArgument \u003d userInput.trim().contentEquals(\"clear\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (hasNoArgument) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            model.setProductiveNus(new ProductiveNus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "andreatanky": 11,
      "hyngkng": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandLogic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class CommandLogic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    static final Comparator\u003cIndex\u003e INDEX_COMPARATOR \u003d (firstIndex, secondIndex) -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        int firstIndexValue \u003d firstIndex.getZeroBased();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        int secondIndexValue \u003d secondIndex.getZeroBased();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return secondIndexValue - firstIndexValue; // sort by descending order"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    static void checkForDuplicatedIndexes(List\u003cIndex\u003e targetIndexes) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cInteger\u003e zeroBasedIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (Index targetIndex : targetIndexes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            int zeroBasedIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            zeroBasedIndexes.add(zeroBasedIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        long distinctIndexes \u003d zeroBasedIndexes.stream().distinct().count();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        long lengthOfIndexesList \u003d zeroBasedIndexes.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        boolean containsDuplicates \u003d distinctIndexes \u003c lengthOfIndexesList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (containsDuplicates) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Messages.MESSAGE_DUPLICATE_INDEXES));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    static void checkForInvalidIndexes("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            List\u003cIndex\u003e targetIndexes, Model model, String messageUsage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (targetIndexes.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (Index targetIndex : targetIndexes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 45,
      "hyngkng": 6,
      "andreatanky": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (feedbackToUser.contains(\"[\") \u0026\u0026 feedbackToUser.contains(\"]\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String bracketRemovedFeedbackToUser \u003d feedbackToUser.replaceAll(\"\\\\[\", \"\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .replaceAll(\"]\", \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return bracketRemovedFeedbackToUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Deletes a assignment identified using it\u0027s displayed index from the assignment list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + COMMAND_WORD + \" INDEX [MORE_INDEXES] (must be positive integers)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Assignment(s): %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a DeleteCommand to delete the specified assignment(s)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param targetIndexes indexes of assignments in the filtered assignment list to delete"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public DeleteCommand(List\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cAssignment\u003e deletedAssignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        targetIndexes.sort(CommandLogic.INDEX_COMPARATOR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        CommandLogic.checkForDuplicatedIndexes(targetIndexes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        CommandLogic.checkForInvalidIndexes(targetIndexes, model, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (Index targetIndex : targetIndexes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            Assignment assignmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            deletedAssignments.add(assignmentToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            model.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedAssignments));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 targetIndexes.equals(((DeleteCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 11,
      "andreatanky": 14,
      "hyngkng": 1,
      "minhhhnguyen2000": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Sets assignment(s) identified using it\u0027s displayed index(es) from ProductiveNus as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \" INDEX [MORE_INDEXES] (must be positive integers)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MARK_ASSIGNMENT_AS_DONE_SUCCESS \u003d \"Marks assignment as done: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MARK_ASSIGNMENTS_AS_DONE_SUCCESS \u003d \"Mark assignments as done: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // for done single index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_ALREADY_MARKED_ASSIGNMENT_AS_DONE \u003d \"This assignment is already marked as done.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // for done multiple indexes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENTS_AS_DONE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            \"These assignments are already marked as done: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENT_AS_DONE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            \"This assignment is already marked as done: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Constructs a DoneCommand to mark the specified assignment(s) as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @param targetIndexes index(es) of the assignment(s) in the filtered assignment list to be marked done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public DoneCommand(List\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToMarkDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cInteger\u003e assignmentsAlreadyMarkedDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        CommandLogic.checkForDuplicatedIndexes(targetIndexes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        CommandLogic.checkForInvalidIndexes(targetIndexes, model, DoneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isMultipleIndexes \u003d targetIndexes.size() \u003e 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean hasException \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        for (Index targetIndex : targetIndexes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            Assignment assignmentToMarkDone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            if (assignmentToMarkDone.isMarkedDone() \u0026\u0026 model.hasAssignment(assignmentToMarkDone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                hasException \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                assignmentsAlreadyMarkedDone.add(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            assert(!assignmentToMarkDone.isMarkedDone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            Assignment assignmentMarkedDone \u003d createAssignmentMarkedDone(assignmentToMarkDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            model.setAssignment(assignmentToMarkDone, assignmentMarkedDone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            assignmentsToMarkDone.add(assignmentToMarkDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (hasException) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            if (isMultipleIndexes \u0026\u0026 assignmentsAlreadyMarkedDone.size() \u003e 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENTS_AS_DONE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        assignmentsAlreadyMarkedDone));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            } else if (isMultipleIndexes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENT_AS_DONE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        assignmentsAlreadyMarkedDone));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(MESSAGE_ALREADY_MARKED_ASSIGNMENT_AS_DONE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return isMultipleIndexes"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ? new CommandResult(String.format(MESSAGE_MARK_ASSIGNMENTS_AS_DONE_SUCCESS, assignmentsToMarkDone))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                : new CommandResult(String.format(MESSAGE_MARK_ASSIGNMENT_AS_DONE_SUCCESS, assignmentsToMarkDone));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToMarkDone}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static Assignment createAssignmentMarkedDone(Assignment assignmentToMarkAsDone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assert assignmentToMarkAsDone !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Name updatedName \u003d assignmentToMarkAsDone.getName();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToMarkAsDone.getDeadline();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToMarkAsDone.getModuleCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Remind updatedRemind \u003d assignmentToMarkAsDone.getRemind();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToMarkAsDone.getSchedule();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Priority priority \u003d assignmentToMarkAsDone.getPriority();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // TODO: following method (and method in createRemindedCommand violates Law of Demeter."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        //  might have to think of another way to do this after this iteration"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done done \u003d assignmentToMarkAsDone.getDone().markAsDone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, done);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 targetIndexes.equals(((DoneCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 1,
      "printinghelloworld": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Edits the details of an existing assignment in ProductiveNus."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \"MODULE CODE] \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_EDIT_ASSIGNMENT_SUCCESS \u003d \"Edited Assignment: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in ProductiveNus.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final EditAssignmentDescriptor editAssignmentDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param editAssignmentDescriptor details to edit the assignment with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditCommand(Index index, EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.editAssignmentDescriptor \u003d new EditAssignmentDescriptor(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d createEditedAssignment(assignmentToEdit, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!assignmentToEdit.isSameAssignment(editedAssignment) \u0026\u0026 model.hasAssignment(editedAssignment)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.setAssignment(assignmentToEdit, editedAssignment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * edited with {@code editAssignmentDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                                     EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert assignmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Name updatedName \u003d editAssignmentDescriptor.getName().orElse(assignmentToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d editAssignmentDescriptor.getDeadline().orElse(assignmentToEdit.getDeadline());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editAssignmentDescriptor.getModuleCode()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .orElse(assignmentToEdit.getModuleCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind updatedRemind \u003d assignmentToEdit.getRemind();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToEdit.getSchedule();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d assignmentToEdit.getPriority();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToEdit.getDone();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 editAssignmentDescriptor.equals(e.editAssignmentDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Stores the details to edit the assignment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * corresponding field value of the assignment."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static class EditAssignmentDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        private Time deadline;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public EditAssignmentDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public EditAssignmentDescriptor(EditAssignmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, deadline, moduleCode);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        public void setDeadline(Time deadline) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        public Optional\u003cTime\u003e getDeadline() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!(other instanceof EditAssignmentDescriptor)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            EditAssignmentDescriptor e \u003d (EditAssignmentDescriptor) other;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    \u0026\u0026 getModuleCode().equals(e.getModuleCode());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 9,
      "hyngkng": 14,
      "andreatanky": 6,
      "minhhhnguyen2000": 33,
      "-": 117,
      "printinghelloworld": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting ProductiveNus as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ExitCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean hasNoArgument \u003d userInput.trim().contentEquals(\"exit\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (hasNoArgument) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "andreatanky": 11,
      "hyngkng": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Finds and lists all assignments in ProductiveNus based on prefix and argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Formats: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_NAME + \"NAME_OF_ASSIGNMENT [MORE_NAME_OF_ASSIGNMENT]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_MODULE_CODE + \"MODULE_CODE_OF_ASSIGNMENT [MORE_MODULE_CODE_OF_ASSIGNMENT]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_DEADLINE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \" DUE_DATE_OR_TIME_OF_ASSIGNMENT [MORE_DUE_DATE_OR_TIME_OF_ASSIGNMENT]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_PRIORITY + \" PRIORITY_OF_ASSIGNMENT [MORE_PRIORITY_OF_ASSIGNMENT]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String INVALID_DATE_OR_TIME_MESSAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \"Deadline field should have date or time keywords in the format dd-MM-yyyy and HHmm respectively.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "             + \"It should not be left empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String NO_PREFIX_AND_KEYWORD \u003d \"At least one prefix and keyword must be keyed in.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MORE_THAN_ONE_PREFIX_MESSAGE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \"Multiple prefixes detected. There should only be one prefix used.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final Predicate\u003cAssignment\u003e predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructor for find command, which takes in a predicate."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param predicate Predicate to filter assignments."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public FindCommand(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assert predicate !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String.format(Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 5,
      "andreatanky": 23,
      "minhhhnguyen2000": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Input \u0027\" + COMMAND_WORD + \"\u0027 to see an overview of all\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \" current available commands.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean hasNoArgument \u003d userInput.trim().contentEquals(\"help\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (hasNoArgument) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 12,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + PREFIX_TIMETABLE_URL + \"TIMETABLE URL \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Timetable imported.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final TimetableData data;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ImportCommand(TimetableData data) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.importTimetable(data);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Lists assignments in ProductiveNUS to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \" [INDEX] (must be a positive integer from 1 to 50)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_INDEX_NOT_IN_RANGE \u003d \"Index should only be from 1 to 50.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final Optional\u003cIndex\u003e numberOfDays;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructor of List Command which takes in an Index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param numberOfDays Number of days as Index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ListCommand(Index numberOfDays) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assert numberOfDays !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.numberOfDays \u003d Optional.of(numberOfDays);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        numberOfDays \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Predicate\u003cAssignment\u003e showLimitedAssignments() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return assignment -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(Time.TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String dateAndTimeToParse \u003d assignment.getDeadline().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime currentDateAndTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            assert numberOfDays.isPresent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            int zeroBaseValue \u003d numberOfDays.get().getZeroBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            long inputNumberOfDays \u003d Optional.of(zeroBaseValue).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime lastDateAndTime \u003d currentDateAndTime.plusDays(inputNumberOfDays);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime parsedDateAndTime \u003d LocalDateTime.parse(dateAndTimeToParse, inputFormat);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isAfterCurrentDateAndTime \u003d parsedDateAndTime.isAfter(currentDateAndTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isBeforeLastDateAndTime \u003d parsedDateAndTime.isBefore(lastDateAndTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return isAfterCurrentDateAndTime \u0026\u0026 isBeforeLastDateAndTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (numberOfDays.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            model.updateFilteredAssignmentList((showLimitedAssignments()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new CommandResult(String.format("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 numberOfDays.equals(((ListCommand) other).numberOfDays)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 4,
      "andreatanky": 54,
      "-": 21,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NegateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a command with hidden internal logic and the ability to reverse the execution of other commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public abstract class NegateCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"un\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a {@code NegateCommand} to reverse the execution of other commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    NegateCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    protected Index getTargetIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 27,
      "hyngkng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PrioritizeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Sets priority for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class PrioritizeCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prioritize\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY LEVEL\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_PRIORITIZE_ASSIGNMENT_SUCCESS \u003d \"Set priority for Assignment: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructs a PriorityCommand to set priority to the specified assignment."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to prioritise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param priority Priority to be tagged to the assignment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public PrioritizeCommand(Index targetIndex, Priority priority) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentToPrioritise \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment prioritizedAssignment \u003d createPrioritisedAssignment(assignmentToPrioritise, priority);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.setAssignment(assignmentToPrioritise, prioritizedAssignment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PRIORITIZE_ASSIGNMENT_SUCCESS, prioritizedAssignment));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToPrioritise}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static Assignment createPrioritisedAssignment(Assignment assignmentToPrioritize, Priority priority) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assert assignmentToPrioritize !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Name updatedName \u003d assignmentToPrioritize.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToPrioritize.getDeadline();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToPrioritize.getModuleCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Remind updatedRemind \u003d assignmentToPrioritize.getRemind();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToPrioritize.getSchedule();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority updatedPriority \u003d priority;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToPrioritize.getDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                updatedPriority, updatedDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof PrioritizeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PrioritizeCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 priority.equals(((PrioritizeCommand) other).priority));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 85,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Sets reminders for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \" INDEX [MORE_INDEXES] (must be positive integers)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_REMIND_ASSIGNMENT_SUCCESS \u003d \"Set reminder for Assignment: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_REMIND_ASSIGNMENTS_SUCCESS \u003d \"Mark assignments as done: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // for single index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_REMINDED_ASSIGNMENT \u003d \"This assignment already has reminders set.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // for multiple indexes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_REMINDED_ASSIGNMENT \u003d \"This assignment already has reminders set: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MULTIPLE_REMINDED_ASSIGNMENTS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            \"These assignments already have reminders set: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a RemindCommand to set reminders to the specified assignment(s)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param targetIndexes indexes of assignments in the filtered assignment list to remind"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public RemindCommand(List\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(targetIndexes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e assignmentsToRemind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cInteger\u003e assignmentsAlreadyReminded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        CommandLogic.checkForDuplicatedIndexes(targetIndexes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        CommandLogic.checkForInvalidIndexes(targetIndexes, model, RemindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isMultipleIndexes \u003d targetIndexes.size() \u003e 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean hasException \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (Index targetIndex : targetIndexes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Assignment assignmentToRemind \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (assignmentToRemind.isReminded() \u0026\u0026 model.hasAssignment(assignmentToRemind)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                hasException \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                assignmentsAlreadyReminded.add(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            assert(!assignmentToRemind.isReminded());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Assignment remindedAssignment \u003d createRemindedAssignment(assignmentToRemind);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            model.setAssignment(assignmentToRemind, remindedAssignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            assignmentsToRemind.add(assignmentToRemind);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (hasException) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            if (isMultipleIndexes \u0026\u0026 assignmentsAlreadyReminded.size() \u003e 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MULTIPLE_REMINDED_ASSIGNMENTS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        assignmentsAlreadyReminded));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            } else if (isMultipleIndexes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MULTIPLE_REMINDED_ASSIGNMENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        assignmentsAlreadyReminded));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                throw new CommandException(MESSAGE_REMINDED_ASSIGNMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return isMultipleIndexes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ? new CommandResult(String.format(MESSAGE_REMIND_ASSIGNMENTS_SUCCESS, assignmentsToRemind))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                : new CommandResult(String.format(MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentsToRemind));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToRemind}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static Assignment createRemindedAssignment(Assignment assignmentToRemind) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert assignmentToRemind !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Name updatedName \u003d assignmentToRemind.getName();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToRemind.getDeadline();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToRemind.getModuleCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind updatedRemind \u003d assignmentToRemind.getRemind().setReminder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToRemind.getSchedule();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d assignmentToRemind.getPriority();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToRemind.getDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                || (other instanceof RemindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                \u0026\u0026 targetIndexes.equals(((RemindCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 73,
      "hyngkng": 15,
      "minhhhnguyen2000": 1,
      "printinghelloworld": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DO_AFTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DO_BEFORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_HOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Schedules an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String START_TIME \u003d \"06:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String END_TIME \u003d \"23:59\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final int MAX_HOURS \u003d 5;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final int MIN_HOURS \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_ASSIGNMENT_SUCCESS \u003d \"Schedule Assignment: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_ASSIGNMENT_FAIL \u003d \"No possible schedule\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENT_DUE \u003d \"The deadline of this assignment is over\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + PREFIX_EXPECTED_HOURS + \"EXPECTED HOURS (must be between \" + MIN_HOURS + \" and \" + MAX_HOURS + \" hours) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + PREFIX_DO_AFTER + \"AFTER \" + PREFIX_DO_BEFORE + \"BEFORE\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final LocalTime WORKING_START_TIME \u003d LocalTime.parse(START_TIME, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final LocalTime WORKING_END_TIME \u003d LocalTime.parse(END_TIME, DateTimeFormatter.ISO_TIME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Time doBefore;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Time doAfter;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final int expectedHours;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a ScheduleCommand to set reminders to the specified assignment."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ScheduleCommand(Index targetIndex, int expectedHours, Time doAfter, Time doBefore) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.doAfter \u003d doAfter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.doBefore \u003d doBefore;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.expectedHours \u003d expectedHours;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToSchedule \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // assignment is already due"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (assignmentToSchedule.getDeadline().toLocalDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_ASSIGNMENT_DUE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(model.getFilteredTaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        taskList.remove(assignmentToSchedule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule schedule \u003d createValidSchedule(assignmentToSchedule, taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment scheduledAssignment \u003d createScheduledAssignment(assignmentToSchedule, schedule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.setAssignment(assignmentToSchedule, scheduledAssignment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCHEDULE_ASSIGNMENT_SUCCESS, scheduledAssignment));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Schedule createValidSchedule(Assignment assignmentToSchedule, List\u003cTask\u003e taskList) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime after \u003d doAfter.toLocalDateTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime before \u003d doBefore.toLocalDateTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (assignmentToSchedule.getDeadline().isBefore(doBefore)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            before \u003d assignmentToSchedule.getDeadline().toLocalDateTime();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (after.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            after \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        after \u003d roundToHour(after.plusMinutes(59));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cLocalDateTime\u003e possibleTime \u003d generateAllPossibleTime(after, before, taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (possibleTime.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_ASSIGNMENT_FAIL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return getRandom(possibleTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private LocalDateTime roundToHour(LocalDateTime time) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return time.truncatedTo(ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Schedule getRandom(List\u003cLocalDateTime\u003e list) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        int rnd \u003d new Random().nextInt(list.size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time suggestedStartTime \u003d new Time(list.get(rnd));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time suggestedEndTime \u003d new Time(list.get(rnd).plusHours(expectedHours));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new Schedule(suggestedStartTime, suggestedEndTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private List\u003cLocalDateTime\u003e generateAllPossibleTime(LocalDateTime start, LocalDateTime end, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cLocalDateTime\u003e possibleTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (LocalDateTime i \u003d start; !i.plusHours(expectedHours).isAfter(end); i \u003d i.plusHours(1)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            boolean canSchedule \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            // working hours"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!isWorkingHour(i, i.plusHours(expectedHours))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                canSchedule \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            // no overlap"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            for (Task j: taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                if (!haveNoOverlap(i, i.plusHours(expectedHours), j)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    if (canSchedule) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        System.out.println(i + \" \" + j.getTime());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    canSchedule \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (canSchedule) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                possibleTime.add(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return possibleTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private boolean isWorkingHour(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return !start.toLocalTime().isBefore(WORKING_START_TIME) \u0026\u0026 !end.toLocalTime().isAfter(WORKING_END_TIME)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 !end.toLocalTime().isBefore(WORKING_START_TIME);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private boolean haveNoOverlap(LocalDateTime start, LocalDateTime end, Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!((Assignment) task).getSchedule().isScheduled()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return (!end.isAfter(((Assignment) task).getSchedule().getSuggestedStartTime().toLocalDateTime())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    || (!start.isBefore(((Assignment) task).getSchedule().getSuggestedEndTime().toLocalDateTime())));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return (!end.isAfter(task.getTime().toLocalDateTime())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                || (!start.isBefore(((Lesson) task).getEndTime().toLocalDateTime())));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToSchedule}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Assignment createScheduledAssignment(Assignment assignmentToSchedule, Schedule schedule) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert assignmentToSchedule !\u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Name updatedName \u003d assignmentToSchedule.getName();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToSchedule.getDeadline();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToSchedule.getModuleCode();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Remind updatedRemind \u003d assignmentToSchedule.getRemind();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d assignmentToSchedule.getPriority();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToSchedule.getDone();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, schedule,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                || (other instanceof ScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ScheduleCommand) other).targetIndex)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 doAfter.equals(((ScheduleCommand) other).doAfter)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 doBefore.equals(((ScheduleCommand) other).doBefore)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 expectedHours \u003d\u003d ((ScheduleCommand) other).expectedHours); // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 19,
      "minhhhnguyen2000": 165,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Undoes the most recent command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Successfully undo the most recent command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_UNDO_FAIL \u003d \"No recent command.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a UndoCommand to undo the most recent command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public UndoCommand(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean hasNoArgument \u003d userInput.trim().contentEquals(\"undo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Model previousModel \u003d model.getPreviousModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!hasNoArgument) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (previousModel \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_FAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.goToPreviousModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "hyngkng": 3,
      "andreatanky": 9,
      "minhhhnguyen2000": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Removes done status for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class UndoneCommand extends NegateCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String COMMAND_WORD_SUFFIX \u003d \"done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String COMMAND_WORD \u003d NegateCommand.COMMAND_WORD + COMMAND_WORD_SUFFIX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_MARK_ASSIGNMENT_AS_UNDONE_SUCCESS \u003d \"Marks assignment as undone: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNDONE_ASSIGNMENT \u003d \"This assignment is not marked as done.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Constructs an UndoneCommand to remove done status from the specified assignment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to remove done status"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public UndoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentToMarkAsUndone \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!assignmentToMarkAsUndone.isMarkedDone() \u0026\u0026 model.hasAssignment(assignmentToMarkAsUndone)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_UNDONE_ASSIGNMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assert(assignmentToMarkAsUndone.isMarkedDone());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment undoneAssignment \u003d createUndoneAssignment(assignmentToMarkAsUndone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(assignmentToMarkAsUndone, undoneAssignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_ASSIGNMENT_AS_UNDONE_SUCCESS, undoneAssignment));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToMarkUndone}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static Assignment createUndoneAssignment(Assignment assignmentToMarkUndone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assert assignmentToMarkUndone !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Name updatedName \u003d assignmentToMarkUndone.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToMarkUndone.getDeadline();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToMarkUndone.getModuleCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Remind updatedRemind \u003d assignmentToMarkUndone.getRemind();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToMarkUndone.getSchedule();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Priority priority \u003d assignmentToMarkUndone.getPriority();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d new Done();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                || (other instanceof UndoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((UndoneCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 14,
      "printinghelloworld": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnprioritizeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Removes priority for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UnprioritizeCommand extends NegateCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String COMMAND_WORD_SUFFIX \u003d \"prioritize\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String COMMAND_WORD \u003d NegateCommand.COMMAND_WORD + COMMAND_WORD_SUFFIX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_UNPRIORITIZE_ASSIGNMENT_SUCCESS \u003d \"Removed priority for Assignment: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_UNPRIORITIZE_ASSIGNMENT \u003d \"This assignment does not have priority set.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructs an UnprioritiseCommand to remove priority from the specified assignment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to remove priority."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public UnprioritizeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentToUnprioritize \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!assignmentToUnprioritize.hasPriority() \u0026\u0026 model.hasAssignment(assignmentToUnprioritize)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new CommandException(MESSAGE_UNPRIORITIZE_ASSIGNMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert(assignmentToUnprioritize.hasPriority());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment unprioritisedAssignment \u003d createUnprioritizedAssignment(assignmentToUnprioritize);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.setAssignment(assignmentToUnprioritize, unprioritisedAssignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNPRIORITIZE_ASSIGNMENT_SUCCESS, unprioritisedAssignment));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToUnprioritise}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static Assignment createUnprioritizedAssignment(Assignment assignmentToUnprioritize) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assert assignmentToUnprioritize !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Name updatedName \u003d assignmentToUnprioritize.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToUnprioritize.getDeadline();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToUnprioritize.getModuleCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Remind updatedRemind \u003d assignmentToUnprioritize.getRemind();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToUnprioritize.getSchedule();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToUnprioritize.getDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof UnprioritizeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((UnprioritizeCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 83,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnremindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Removes reminders for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class UnremindCommand extends NegateCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String COMMAND_WORD_SUFFIX \u003d \"remind\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String COMMAND_WORD \u003d NegateCommand.COMMAND_WORD + COMMAND_WORD_SUFFIX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_UNREMIND_ASSIGNMENT_SUCCESS \u003d \"Removed reminder for Assignment: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_REMINDERS_INDEX \u003d \"The assignment\u0027s Your reminders index \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"provided is invalid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs an UnremindCommand to remove reminders from the specified assignment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param targetIndex index of the assignment in the reminded assignments list to remove reminders"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public UnremindCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e remindedAssignmentsList \u003d model.getRemindedAssignmentsList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d remindedAssignmentsList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DISPLAYED_REMINDERS_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToUnremind \u003d remindedAssignmentsList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert(assignmentToUnremind.isReminded());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment unremindedAssignment \u003d createUnremindedAssignment(assignmentToUnremind);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentToUnremind, unremindedAssignment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNREMIND_ASSIGNMENT_SUCCESS, unremindedAssignment));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToUnremind}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static Assignment createUnremindedAssignment(Assignment assignmentToUnremind) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert assignmentToUnremind !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Name updatedName \u003d assignmentToUnremind.getName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToUnremind.getDeadline();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToUnremind.getModuleCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind updatedRemind \u003d new Remind();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule updatedSchedule \u003d assignmentToUnremind.getSchedule();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d assignmentToUnremind.getPriority();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToUnremind.getDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind, updatedSchedule,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                priority, updatedDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                || (other instanceof UnremindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((UnremindCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 66,
      "hyngkng": 15,
      "minhhhnguyen2000": 1,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnscheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Removes the scheduler for an assignment identified using it\u0027s displayed index from ProductiveNus."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UnscheduleCommand extends NegateCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String COMMAND_WORD_SUFFIX \u003d \"schedule\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d NegateCommand.COMMAND_WORD + COMMAND_WORD_SUFFIX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Format: \" + COMMAND_WORD + \" INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_UNSCHEDULE_ASSIGNMENT_SUCCESS \u003d \"Removed scheduler for Assignment: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_UNSCHEDULED_ASSIGNMENT \u003d \"This assignment does not have schedulers set.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs an UnscheduleCommand to remove reminders from the specified assignment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to remove schedulers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UnscheduleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (getTargetIndex().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToUnschedule \u003d lastShownList.get(getTargetIndex().getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!assignmentToUnschedule.getSchedule().isScheduled() \u0026\u0026 model.hasAssignment(assignmentToUnschedule)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_UNSCHEDULED_ASSIGNMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(assignmentToUnschedule.getSchedule().isScheduled());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment unscheduledAssignment \u003d createUnscheduledAssignment(assignmentToUnschedule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.setAssignment(assignmentToUnschedule, unscheduledAssignment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNSCHEDULE_ASSIGNMENT_SUCCESS, unscheduledAssignment));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates and returns an {@code Assignment} with the details of {@code assignmentToUnschedule}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static Assignment createUnscheduledAssignment(Assignment assignmentToUnschedule) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert assignmentToUnschedule !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Name updatedName \u003d assignmentToUnschedule.getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time updatedDeadline \u003d assignmentToUnschedule.getDeadline();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToUnschedule.getModuleCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Remind updatedRemind \u003d assignmentToUnschedule.getRemind();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule updatedSchedule \u003d new Schedule();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Priority updatedPriority \u003d assignmentToUnschedule.getPriority();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done updatedDone \u003d assignmentToUnschedule.getDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                updatedSchedule, updatedPriority, updatedDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                || (other instanceof UnscheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 getTargetIndex().equals(((UnscheduleCommand) other).getTargetIndex())); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 14,
      "minhhhnguyen2000": 71,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 17,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isRemindPresent \u003d args.matches(\".*\\\\bremind\\\\b.*\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isRemindTypo \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        boolean isPriorityPresent \u003d args.matches(\".*\\\\bp/\\\\b.*\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!isRemindPresent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            isRemindTypo \u003d args.matches(\".*re[a-z]*$\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (isRemindPresent || isRemindTypo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            // remove remind from args as ArgumentTokenizer cannot parse remind without prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            String argsWithoutRemind \u003d args.replace(\" remind\", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsWithoutRemind, PREFIX_NAME, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    PREFIX_MODULE_CODE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE_CODE, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty() || isRemindTypo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind remind \u003d new Remind();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done done \u003d new Done();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (isRemindPresent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            remind \u003d remind.setReminder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (isPriorityPresent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignment \u003d new Assignment(name, deadline, moduleCode, remind, schedule, priority, done);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new AddCommand(assignment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 11,
      "andreatanky": 1,
      "minhhhnguyen2000": 2,
      "-": 41,
      "printinghelloworld": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (argMultimap.getValue(argPrefix).isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new ParseException(MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 11,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"mod/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Prefix PREFIX_TIMETABLE_URL \u003d new Prefix(\"url/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Prefix PREFIX_EXPECTED_HOURS \u003d new Prefix(\"hrs/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Prefix PREFIX_DO_BEFORE \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Prefix PREFIX_DO_AFTER \u003d new Prefix(\"af/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "andreatanky": 1,
      "hyngkng": 2,
      "minhhhnguyen2000": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            List\u003cIndex\u003e parsedIndexes \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new DeleteCommand(parsedIndexes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "andreatanky": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            List\u003cIndex\u003e parsedIndexes \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return new DoneCommand(parsedIndexes);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "printinghelloworld": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor editAssignmentDescriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setModuleCode(ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!editAssignmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new EditCommand(index, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 3,
      "andreatanky": 2,
      "minhhhnguyen2000": 6,
      "-": 43,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static boolean moreThanOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        long countPrefixesPresent \u003d Stream.of(prefixes)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return countPrefixesPresent \u003e 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private FindCommand findByName(String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ParserUtil.parseName(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private FindCommand findByModuleCode(String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ParserUtil.parseModuleCode(keyword);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new FindCommand(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static void tryParseDateFormat(String keyword) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(keyword, inputFormat);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            date.format(inputFormat);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static void tryParseTimeFormat(String keyword) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(keyword, inputFormat);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            time.format(inputFormat);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private FindCommand findByDeadline(String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isDateFormat \u003d keyword.matches(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isTimeFormat \u003d keyword.matches(\"^\\\\d{4}$\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            if (isDateFormat) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommandParser.tryParseDateFormat(keyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } else if (isTimeFormat) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommandParser.tryParseTimeFormat(keyword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new FindCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private FindCommand findByPriority(String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            ParserUtil.parsePriority(keyword);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new FindCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private String[] getKeywords(Prefix prefix, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assert argMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return argMultimap.getValue(prefix).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_MODULE_CODE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isPreambleMissing \u003d argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isPrefixNamePresent \u003d argMultimap.getValue(PREFIX_NAME).isPresent();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isPrefixDeadlinePresent \u003d argMultimap.getValue(PREFIX_DEADLINE).isPresent();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isPrefixModuleCodePresent \u003d argMultimap.getValue(PREFIX_MODULE_CODE).isPresent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isPrefixPriorityPresent \u003d argMultimap.getValue(PREFIX_PRIORITY).isPresent();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isMoreThanOnePrefixPresent \u003d moreThanOnePrefixPresent("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                argMultimap, PREFIX_NAME, PREFIX_MODULE_CODE, PREFIX_DEADLINE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.NO_PREFIX_AND_KEYWORD));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else if (isMoreThanOnePrefixPresent) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MORE_THAN_ONE_PREFIX_MESSAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else if (isPrefixNamePresent \u0026\u0026 isPreambleMissing) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            keywords \u003d getKeywords(PREFIX_NAME, argMultimap);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return findByName(keywords);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else if (isPrefixModuleCodePresent \u0026\u0026 isPreambleMissing) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            keywords \u003d getKeywords(PREFIX_MODULE_CODE, argMultimap);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return findByModuleCode(keywords);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else if (isPrefixDeadlinePresent \u0026\u0026 isPreambleMissing) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            keywords \u003d getKeywords(PREFIX_DEADLINE, argMultimap);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return findByDeadline(keywords);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else if (isPrefixPriorityPresent \u0026\u0026 isPreambleMissing) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            keywords \u003d getKeywords(PREFIX_PRIORITY, argMultimap);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return findByPriority(keywords);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 112,
      "hyngkng": 8,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableUrlParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIMETABLE_URL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIMETABLE_URL)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String url \u003d argMultimap.getValue(PREFIX_TIMETABLE_URL).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!TimetableUrlParser.isValidUrl(url)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_URL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            TimetableData data \u003d TimetableUrlParser.parseTimetableUrl(url);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new ImportCommand(data);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_LESSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean hasArgumentIndex \u003d args.matches(\"(.+|[$\u0026+,:;\u003d?@#|\u0027\u003c\u003e.^*()%!-])$\"); //Has argument"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!hasArgumentIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isWithinArgumentRange \u003d args.trim().matches(\"^([1-9]|[1-4][0-9]|50)$\"); //Argument range is 1 to 50"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            if (isWithinArgumentRange) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Index index \u003d ParserUtil.parseListIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                return new ListCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                throw new ParseException(ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Parses {@code multipleIndexes} into many {@code Index} and returns a list of indexes. Leading and trailing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws ParseException if any of the specified indexes are invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String multipleIndexes) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String trimmedIndexes \u003d multipleIndexes.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String[] indexes \u003d trimmedIndexes.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e parsedIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (String s : indexes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Index index \u003d parseIndex(s);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                parsedIndexes.add(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return parsedIndexes;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses {@code zeroBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static Index parseListIndex(String zeroBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String trimmedIndex \u003d zeroBasedIndex.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Time}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @throws ParseException if the given deadline is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static Time parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!Time.isValidTime(trimmedDeadline)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Time(trimmedDeadline);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Parses a {@code String num} into a int."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws ParseException if the given int is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static int parseExpectedTime(String num) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(num);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String trimmedNum \u003d num.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            int n \u003d Integer.parseInt(trimmedNum);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!isValidExpectedTime(n)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                throw new ParseException(\"Invalid expected time\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return n;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new ParseException(\"Invalid expected time\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static boolean isValidExpectedTime(int n) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return (ScheduleCommand.MIN_HOURS \u003c\u003d n \u0026\u0026 n \u003c\u003d ScheduleCommand.MAX_HOURS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Parses a {@code String moduleCode} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws ParseException if the given {@code ModuleCode} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws ParseException if the given {@code Priority} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String priorityLevel \u003d priority.trim().toUpperCase();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (priorityLevel.equals(Priority.LOW_PRIORITY)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new Priority(Priority.LOW_PRIORITY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (priorityLevel.equals(Priority.MEDIUM_PRIORITY)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new Priority(Priority.MEDIUM_PRIORITY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (priorityLevel.equals(Priority.HIGH_PRIORITY)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new Priority(Priority.HIGH_PRIORITY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 25,
      "hyngkng": 18,
      "andreatanky": 20,
      "minhhhnguyen2000": 19,
      "-": 73,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PrioritizeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.PrioritizeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class PrioritizeCommandParser implements Parser\u003cPrioritizeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PriorityCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * and returns a PriorityCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public PrioritizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrioritizeCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrioritizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new PrioritizeCommand(index, priority);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProductiveNusParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.PrioritizeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnprioritizeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnremindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnscheduleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ProductiveNusParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_HELP));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ClearCommand(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new RemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        case UnremindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new UnremindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ExitCommand(userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new UndoCommand(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case UnscheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return new UnscheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        case PrioritizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new PrioritizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        case UnprioritizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new UnprioritizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        case UndoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return new UndoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_HELP));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 8,
      "hyngkng": 20,
      "andreatanky": 5,
      "minhhhnguyen2000": 8,
      "-": 69,
      "printinghelloworld": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandParser implements Parser\u003cRemindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * and returns a RemindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public RemindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            List\u003cIndex\u003e parsedIndexes \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new RemindCommand(parsedIndexes);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 23,
      "hyngkng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DO_AFTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DO_BEFORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_HOURS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * and returns an ScheduleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXPECTED_HOURS, PREFIX_DO_AFTER, PREFIX_DO_BEFORE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXPECTED_HOURS, PREFIX_DO_AFTER, PREFIX_DO_BEFORE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Time doAfter \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DO_AFTER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time doBefore \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DO_BEFORE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        int expectedTime \u003d ParserUtil.parseExpectedTime(argMultimap.getValue(PREFIX_EXPECTED_HOURS).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (doBefore.isBefore(doAfter)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new ScheduleCommand(index, expectedTime, doAfter, doBefore);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 7,
      "minhhhnguyen2000": 50,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UndoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class UndoneCommandParser implements Parser\u003cUndoneCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoneCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * and returns an UndoneCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public UndoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return new UndoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "printinghelloworld": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnprioritizeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnprioritizeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UnprioritizeCommandParser implements Parser\u003cUnprioritizeCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnprioritiseCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * and returns an UnprioritiseCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public UnprioritizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new UnprioritizeCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnprioritizeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnremindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnremindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class UnremindCommandParser implements Parser\u003cUnremindCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnremindCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * and returns an UnremindCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public UnremindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new UnremindCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnremindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 21,
      "hyngkng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnscheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnscheduleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UnscheduleCommandParser implements Parser\u003cUnscheduleCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnscheduleCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * and returns an UnscheduleCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UnscheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return new UnscheduleCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnscheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 5,
      "minhhhnguyen2000": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_ASSIGNMENT \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_REMINDED_ASSIGNMENTS \u003d assignment -\u003e assignment.isReminded();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void setPreviousModel(Model previousModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * return previous model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    Model getPreviousModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * before update model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void preUpdateModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Goes to previous model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void goToPreviousModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the filtered assignment list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    FilteredList\u003cAssignment\u003e getFilteredAssignments();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns the user prefs\u0027 ProductiveNus file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Path getProductiveNusFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the user prefs\u0027 ProductiveNus file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void setProductiveNusFilePath(Path productiveNusFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Replaces ProductiveNus data with the data in {@code productiveNus}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void setProductiveNus(ReadOnlyProductiveNus productiveNus);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /** Returns ProductiveNus */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    ReadOnlyProductiveNus getProductiveNus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds lessons based on NUSMods Timetable data."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void importTimetable(TimetableData data);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in ProductiveNus."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean hasAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Deletes the given assignment."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The assignment must exist in ProductiveNus."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void deleteAssignment(Assignment target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code assignment} must not already exist in ProductiveNus."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void addAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the given assignment {@code target} with {@code editedAssignment}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code target} must exist in ProductiveNus."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * existing assignment in ProductiveNus."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void setAssignment(Assignment target, Assignment editedAssignment);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered assignment list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Updates the filter of the filtered assignment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /** Returns an unmodifiable view of the reminded assignments list */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    ObservableList\u003cAssignment\u003e getRemindedAssignmentsList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 18,
      "andreatanky": 3,
      "minhhhnguyen2000": 33,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents the in-memory model of ProductiveNus data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ProductiveNus productiveNus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e remindedAssignments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    //private final FilteredList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Model previousModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes a ModelManager with the given productiveNus, userPrefs and previousModel."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ModelManager(ReadOnlyProductiveNus productiveNus, ReadOnlyUserPrefs userPrefs, Model previousModel) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireAllNonNull(productiveNus, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        logger.fine(\"Initializing with ProductiveNus: \" + productiveNus + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNus \u003d new ProductiveNus(productiveNus);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.productiveNus.getAssignmentList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindedAssignments \u003d new FilteredList\u003c\u003e("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                this.productiveNus.getAssignmentList(), PREDICATE_SHOW_ALL_REMINDED_ASSIGNMENTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        //lessons \u003d new FilteredList\u003c\u003e(this.productiveNus.getLessonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.productiveNus.getTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.previousModel \u003d previousModel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes a ModelManager with the given productiveNus, userPrefs, previousModel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * and filterAssignments."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ModelManager(ReadOnlyProductiveNus productiveNus, ReadOnlyUserPrefs userPrefs, Model previousModel,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        FilteredList\u003cAssignment\u003e filteredAssignments) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireAllNonNull(productiveNus, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        logger.fine(\"Initializing with ProductiveNus: \" + productiveNus + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNus \u003d new ProductiveNus(productiveNus);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.filteredAssignments \u003d new FilteredList\u003c\u003e(this.productiveNus.getAssignmentList(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                filteredAssignments.getPredicate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        remindedAssignments \u003d new FilteredList\u003c\u003e("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                this.productiveNus.getAssignmentList(), PREDICATE_SHOW_ALL_REMINDED_ASSIGNMENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        //lessons \u003d new FilteredList\u003c\u003e(this.productiveNus.getLessonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.productiveNus.getTaskList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.previousModel \u003d previousModel;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this(new ProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void preUpdateModel() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.previousModel \u003d new ModelManager(this.productiveNus, this.userPrefs, this.previousModel,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                this.filteredAssignments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void goToPreviousModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        setProductiveNus(previousModel.getProductiveNus());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        setUserPrefs(previousModel.getUserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        filteredAssignments.setPredicate(previousModel.getFilteredAssignments().getPredicate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        setPreviousModel(previousModel.getPreviousModel());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public FilteredList\u003cAssignment\u003e getFilteredAssignments() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setPreviousModel(Model previousModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.previousModel \u003d previousModel;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return userPrefs.getProductiveNusFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNusFilePath(Path productiveNusFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(productiveNusFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        userPrefs.setProductiveNusFilePath(productiveNusFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProductiveNus \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNus(ReadOnlyProductiveNus productiveNus) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNus.resetData(productiveNus);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ReadOnlyProductiveNus getProductiveNus() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNus;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.importTimetable(data);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNus.hasAssignment(assignment);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.removeAssignment(target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.addAssignment(assignment);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Model getPreviousModel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this.previousModel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Assignment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Assignment} backed by the internal list of"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code versionedProductiveNus}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        filteredAssignments.setPredicate(predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminded Assignments List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Assignment} backed by the internal list of"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code versionedProductiveNus}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getRemindedAssignmentsList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remindedAssignments;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNus.equals(other.productiveNus)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 filteredAssignments.equals(other.filteredAssignments)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 (previousModel \u003d\u003d null || previousModel.equals(other.previousModel))"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 (other.previousModel \u003d\u003d null || other.previousModel.equals(previousModel));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 12,
      "hyngkng": 45,
      "andreatanky": 7,
      "minhhhnguyen2000": 59,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProductiveNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.task.Time.TIME_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableRetriever;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Wraps all data at the ProductiveNus level"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Duplicates are not allowed (by .isSameAssignment comparison)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ProductiveNus implements ReadOnlyProductiveNus {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final UniqueAssignmentList assignments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNus() { }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a ProductiveNus using the Assignments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNus(ReadOnlyProductiveNus toBeCopied) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        autoUpdateTaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Replaces the contents of the tasks list with {@code tasks}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Resets the existing data of this {@code ProductiveNus} with {@code newData}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void resetData(ReadOnlyProductiveNus newData) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        setAssignments(newData.getAssignmentList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //// assignment-level operations"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in ProductiveNus."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds an assignment to ProductiveNus."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The assignment must not already exist in ProductiveNus."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addAssignment(Assignment a) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignments.add(a);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        updateTasks();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the given assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code target} must exist in ProductiveNus."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * existing assignment in ProductiveNus."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(editedAssignment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        updateTasks();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Removes {@code key} from this {@code ProductiveNus}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code key} must exist in ProductiveNus."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        updateTasks();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    //// lesson-level operations"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Imports and adds lessons based on NUSMods timetable data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            clearLessons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            List\u003cLesson\u003e lessons \u003d TimetableRetriever.retrieveLessons(data);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addLesson(lesson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            updateTasks();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            // nothing happens for now."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds a lesson to ProductiveNus."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must not already exist in ProductiveNus."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Clears all lessons in ProductiveNus."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void clearLessons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons.removeAll();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Retrieves all assignments and lessons from the respective lists and adds them into the task list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void retrieveTasks() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().addAll(assignments.getInternalList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().addAll(lessons.getInternalList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if the upcoming task is over. A task is considered over if the deadline or end time of the lesson"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * has passed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param upcomingTask the user\u0027s upcoming task displayed in the task list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if the assignment\u0027s deadline or lesson is over"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean isOver(Task upcomingTask) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // If upcoming task is a lesson, check if end time of lesson has passed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (upcomingTask instanceof Lesson) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            LocalDateTime lessonEndTime \u003d LocalDateTime.parse(((Lesson) upcomingTask).getEndTime().value, inputFormat);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return lessonEndTime.isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert(upcomingTask instanceof Assignment);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Check if deadline of assignment has passed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        LocalDateTime deadline \u003d LocalDateTime.parse(upcomingTask.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return deadline.isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Removes any tasks that are overdue."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * A task is overdue if the date and time of the task is before the current date and time."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void filterOverdueTasks() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().removeIf(task -\u003e {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return isOver(task);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Sorts the task list according to date and time of the task."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void sortTasks() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks.getInternalList().sort((firstTask, secondTask) -\u003e {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime firstTaskDateTime \u003d LocalDateTime.parse(firstTask.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime secondTaskDateTime \u003d LocalDateTime.parse(secondTask.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return firstTaskDateTime.compareTo(secondTaskDateTime);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        });"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Updates the task list in ProductiveNus."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void updateTasks() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        retrieveTasks();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        filterOverdueTasks();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        sortTasks();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Checks upcoming tasks every second and updates the task list if a task is over."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void checkTaskListEverySecond() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Solution below adapted from https://stackoverflow.com/questions/9966136/javafx-periodic-background-task"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        new Timer(true).schedule("
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                        if (tasks.getInternalList().size() \u003e 0) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                            Task upcomingTask \u003d tasks.getInternalList().get(0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                            boolean isOver \u003d isOver(upcomingTask);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                            if (isOver) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                                    updateTasks();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                                });"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }, 0, 1000);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Updates the task list whenever a task is over."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void autoUpdateTaskList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Solution below adapted from https://docs.oracle.com/javafx/2/api/javafx/concurrent/Task.html"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        javafx.concurrent.Task\u003cVoid\u003e task \u003d new javafx.concurrent.Task\u003c\u003e() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            protected Void call() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                checkTaskListEverySecond();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        };"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        task.run();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return assignments.asUnmodifiableObservableList().size() + \" assignments\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + lessons.asUnmodifiableObservableList().size() + \"lessons\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + tasks.asUnmodifiableObservableList().size() + \"tasks\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        updateTasks();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof ProductiveNus // instanceof handles nulls"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 assignments.equals(((ProductiveNus) other).assignments))"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 lessons.equals(((ProductiveNus) other).lessons);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // multiply sum of fields with prime number 31"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return 31 * (assignments.hashCode() + lessons.hashCode());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 121,
      "hyngkng": 75,
      "andreatanky": 28,
      "minhhhnguyen2000": 24,
      "-": 66,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyProductiveNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Unmodifiable view of ProductiveNus"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public interface ReadOnlyProductiveNus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an unmodifiable view of the Assignments list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void importTimetable(TimetableData data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 9,
      "andreatanky": 2,
      "minhhhnguyen2000": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Path getProductiveNusFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Path productiveNusFilePath \u003d Paths.get(\"data\" , \"productivenus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        setProductiveNusFilePath(newUserPrefs.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNusFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNusFilePath(Path productiveNusFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(productiveNusFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNusFilePath \u003d productiveNusFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 productiveNusFilePath.equals(o.productiveNusFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Objects.hash(guiSettings, productiveNusFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + productiveNusFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents an Assignment in ProductiveNus."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Remind remind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Done done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Assignment(Name name, Time deadline, ModuleCode moduleCode, Remind remind, Schedule schedule,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                      Priority priority, Done done) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(name, deadline, moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireAllNonNull(name, deadline, moduleCode, remind);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time getDeadline() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return super.getTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind getRemind() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remind;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Done getDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if both assignments of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 otherAssignment.getName().equals(getName())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 (otherAssignment.getDeadline().equals(getDeadline()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if the assignment already has reminders set. Otherwise, returns false."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if the assignment already has reminders set. Otherwise, returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean isReminded() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remind.isReminded();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Returns true if assignment is already marked as done. Otherwise, returns false."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public boolean isMarkedDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return done.isMarkedDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if the assignment already has a priorty. Otherwise, returns false."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean hasPriority() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return priority.hasPriority();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if both assignments have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This defines a stronger notion of equality between two assignments."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof Assignment)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment otherAssignment \u003d (Assignment) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return otherAssignment.getName().equals(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 otherAssignment.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 otherAssignment.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return Objects.hash(super.getName(), getDeadline(), super.getModuleCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // TODO: Consider printing Remind as well"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .append(getModuleCode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 23,
      "hyngkng": 19,
      "andreatanky": 1,
      "minhhhnguyen2000": 19,
      "-": 45,
      "printinghelloworld": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/DeadlineContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Tests that an {@code Assignment}\u0027s deadline matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DeadlineContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public DeadlineContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .containsWordIgnoreCase(assignment.getDeadline().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof DeadlineContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeadlineContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "andreatanky": 29,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Done.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Represents a done tag of an assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Guarantees: immutable; assignment is marked as done as declared in {@link #isMarkedDone()}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class Done {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private boolean isMarkedDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Constructs a {@code Done}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Done() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.isMarkedDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Done(boolean isMarkedDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.isMarkedDone \u003d isMarkedDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Sets done tag to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @return Done object with done tag set to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Done markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Done markedDone \u003d new Done();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        markedDone.isMarkedDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return markedDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Returns true if done tag is set to true. Otherwise, returns false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @return true if done tag is set to true. Otherwise, returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public boolean isMarkedDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return isMarkedDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Returns a tick symbol if done. Otherwise, returns a cross symbol."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return isMarkedDone ? \"Done \\u2714\" : \"Undone \\u2718\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "printinghelloworld": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/ModuleCodeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Tests that an {@code Assignment}\u0027s {@code ModuleCode} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ModuleCodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .containsWordIgnoreCase(assignment.getModuleCode().moduleCode, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof ModuleCodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleCodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "andreatanky": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Tests that an {@code Assignment}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(assignment.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 1,
      "minhhhnguyen2000": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents a Priority Tag in ProductiveNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String LOW_PRIORITY \u003d \"LOW\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MEDIUM_PRIORITY \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String HIGH_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NONE_PRIORITY \u003d \"NONE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority levels should be either LOW, MEDIUM or HIGH.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public enum Level {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        NONE, LOW, HIGH, MEDIUM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public final Level priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructs a none Priority."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        priority \u003d Level.NONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.priority \u003d getLevel(priority);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static boolean isValidPriority(String priority) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String toTest \u003d priority.toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return (toTest.equals(\"LOW\")) || (toTest.equals(\"MEDIUM\")) || (toTest.equals(\"HIGH\")) || ("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                toTest.equals(\"NONE\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static Level getLevel(String priority) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String level \u003d priority.toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (level.equals(\"LOW\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return Level.LOW;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (level.equals(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return Level.MEDIUM;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (level.equals(\"HIGH\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return Level.HIGH;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Level.NONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean hasPriority() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return priority !\u003d Level.NONE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 priority.equals(((Priority) other).priority)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return priority.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return priority.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 81,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/PriorityContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Tests that an {@code Assignment}\u0027s {@code Priority} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class PriorityContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public PriorityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(assignment.getPriority().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof PriorityContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 keywords.equals(((PriorityContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "andreatanky": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Remind.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a remind tag of an assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Guarantees: immutable; assignment is reminded as declared in {@link #isReminded()}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Remind {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean isReminded;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a {@code Remind}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isReminded \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind(boolean isReminded) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isReminded \u003d isReminded;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Sets remind tag to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Remind object with remind tag set to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind setReminder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind reminded \u003d new Remind();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        reminded.isReminded \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return reminded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if remind tag is set to true. Otherwise, returns false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if remind tag is set to true. Otherwise, returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean isReminded() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return isReminded;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 39,
      "hyngkng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    // message constraints occurs if saved data is modified wrongly"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Suggested start time should be\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"before suggested end time\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String START_TIME_MESSAGE_CONSTRAINS \u003d \"Suggested start time \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"should only be in the format \u0027dd-MM-uuuu HHmm\u0027, and contain a valid date and time\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String END_TIME_MESSAGE_CONSTRAINS \u003d \"Suggested end time \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"should only be in the format \u0027dd-MM-uuuu HHmm\u0027, and contain a valid date and time\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NOT_SCHEDULED_CONSTRAINS \u003d \"Assignment is not scheduled but \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"suggest start time or end time is present\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final boolean schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Time suggestedStartTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Time suggestedEndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a false schedule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        schedule \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedEndTime \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a suggested schedule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Schedule(Time suggestedStartTime, Time suggestedEndTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(suggestedStartTime, suggestedEndTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        checkArgument(isValidSchedule(true, suggestedStartTime, suggestedEndTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        schedule \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.suggestedStartTime \u003d suggestedStartTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.suggestedEndTime \u003d suggestedEndTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if a given schedule is a valid schedule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static boolean isValidSchedule(boolean schedule, Time suggestedStartTime, Time suggestedEndTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!schedule) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return (suggestedStartTime \u003d\u003d null \u0026\u0026 suggestedEndTime \u003d\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireAllNonNull(suggestedStartTime, suggestedEndTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return !suggestedEndTime.isBefore(suggestedStartTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean isScheduled() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time getSuggestedStartTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return suggestedStartTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time getSuggestedEndTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return suggestedEndTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 58,
      "printinghelloworld": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/UniqueAssignmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSameAssignment(Assignment)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * adding and updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * that the assignment being added or updated is unique in terms of identity in the UniqueAssignmentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * However, the removal of an assignment uses Assignment#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * as to ensure that the assignment with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UniqueAssignmentList implements Iterable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * another existing assignment in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!target.isSameAssignment(editedAssignment) \u0026\u0026 contains(editedAssignment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.set(index, editedAssignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(UniqueAssignmentList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the contents of this list with {@code assignments}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(assignments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!assignmentsAreUnique(assignments)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.setAll(assignments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getInternalList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Iterator\u003cAssignment\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                || (other instanceof UniqueAssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAssignmentList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                if (assignments.get(i).equals(assignments.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 4,
      "andreatanky": 4,
      "minhhhnguyen2000": 133,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Signals that the operation will result in duplicate Assignments"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * (Assignments are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Signals that the operation will result in duplicate tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * (Tasks are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Lesson(Name name, Time time, Time endTime, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        super(name, time, moduleCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        requireAllNonNull(name, time, endTime, moduleCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both lessons of the same name and same time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both lessons have the same identity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * This defines a stronger notion of equality between two lessons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Objects.hash(super.getName(), super.getTime(), getEndTime(), super.getModuleCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getModuleCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 75,
      "printinghelloworld": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A lesson is considered unique by comparing using {@code Lesson#isSameLesson(Lesson)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * lessons uses Lesson#isSameLesson(Lesson) for equality so as to ensure that the lesson being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * unique in terms of identity in the UniqueLessonList. However, the removal of a lesson uses Lesson#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * @see Lesson#isSameLesson(Lesson)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Removes all lessons from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cLesson\u003e getInternalList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                if (lessons.get(i).isSameLesson(lessons.get(j))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 118,
      "andreatanky": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Signals that the operation will result in duplicate Lessons (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents a task\u0027s module code in ProductiveNus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            \"Module codes should begin with 2 or 3 alphabets, have 4 numbers and may end with an alphabet.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"It should not be left empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Module code should begin with 2 or 3 alphabets, have 4 numbers and may end with an alphabet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z]{2,3}[0-9]{4}[a-zA-Z]?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs an {@code Module Code}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "andreatanky": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents an Assignment\u0027s name in ProductiveNus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Task(Name name, Time time, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireAllNonNull(name, time, moduleCode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Checks if task is the same."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param otherTask Another task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return True if task is the same, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 (otherTask.getTime().equals(getTime()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 23,
      "hyngkng": 6,
      "andreatanky": 15,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Represents the time found in a task in ProductiveNUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            \"Deadlines should only be in the format \u0027dd-MM-yyyy HHmm\u0027\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    + \"\\nDate and time (24 hour format) should be valid.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String TIME_DATE_TIME_FORMAT \u003d \"dd-MM-uuuu HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * @param deadline A valid time with format LocalDateTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public Time(LocalDateTime deadline) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        value \u003d deadline.format(inputFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            LocalDateTime taskDate \u003d LocalDateTime.parse(test, inputFormat);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskDate.format(inputFormat);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Returns true if the time is before another time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public boolean isBefore(Time other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime thisTime \u003d LocalDateTime.parse(value, inputFormat);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime thatTime \u003d LocalDateTime.parse(other.value, inputFormat);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return thisTime.isBefore(thatTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public LocalDateTime toLocalDateTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return LocalDateTime.parse(value, inputFormat);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 48,
      "hyngkng": 2,
      "minhhhnguyen2000": 19,
      "printinghelloworld": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * adding and updating of tasks uses Task#isSameTask(Task) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * that the task being added or updated is unique in terms of identity in the UniqueTaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * However, the removal of an assignment uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * as to ensure that the assignment with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getInternalList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Replaces the contents of this list with {@code task}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * {@code tasks} must not contain duplicate task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 15,
      "hyngkng": 4,
      "andreatanky": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Contains utility methods for populating {@code ProductiveNus} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Remind NOT_REMINDED \u003d new Remind();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final Remind IS_REMINDED \u003d new Remind(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final Schedule NOT_SCHEDULED \u003d new Schedule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final Priority NO_PRIORITY \u003d new Priority();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final Priority HIGH_PRIORITY \u003d new Priority(\"HIGH\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final Priority LOW_PRIORITY \u003d new Priority(\"LOW\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final Priority MEDIUM_PRIORITY \u003d new Priority(\"MEDIUM\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Done NOT_DONE \u003d new Done();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Done IS_DONE \u003d new Done(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_OVERDUE \u003d new Time(LocalDateTime.now().minusDays(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_12_HOURS \u003d new Time(LocalDateTime.now().plusHours(12));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_5_DAYS \u003d new Time(LocalDateTime.now().plusDays(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_15_DAYS \u003d new Time(LocalDateTime.now().plusDays(15));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_25_DAYS \u003d new Time(LocalDateTime.now().plusDays(25));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final Time DEADLINE_60_DAYS \u003d new Time(LocalDateTime.now().plusDays(60));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static Assignment[] getSampleAssignments() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"CS1231S Homework\"), DEADLINE_5_DAYS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"CS1231S\"), NOT_REMINDED, getValidScheduleBeforeNextWeek(), MEDIUM_PRIORITY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    IS_DONE),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"CS2103T Quiz\"), DEADLINE_12_HOURS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"CS2103T\"), NOT_REMINDED, NOT_SCHEDULED, HIGH_PRIORITY, IS_DONE),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"CS2106 Lab\"), DEADLINE_25_DAYS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"CS2106\"), IS_REMINDED, NOT_SCHEDULED, LOW_PRIORITY, NOT_DONE),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"Peer review\"), DEADLINE_60_DAYS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"CS2101\"), NOT_REMINDED, getValidScheduleBeforeNextMonth(), NO_PRIORITY, NOT_DONE),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"IS1103 Mission\"), DEADLINE_OVERDUE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"IS1103\"), IS_REMINDED, NOT_SCHEDULED, NO_PRIORITY, IS_DONE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            new Assignment(new Name(\"Oral Presentation\"), DEADLINE_15_DAYS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new ModuleCode(\"CS2101\"), NOT_REMINDED, NOT_SCHEDULED, NO_PRIORITY, NOT_DONE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static Schedule getValidScheduleBeforeNextWeek() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime suggestedStartTime \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // round to nearest hour"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime \u003d suggestedStartTime.withHour(7);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime \u003d suggestedStartTime.withMinute(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime suggestedEndTime \u003d suggestedStartTime.plusHours(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Schedule(new Time(suggestedStartTime), new Time(suggestedEndTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static Schedule getValidScheduleBeforeNextMonth() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime suggestedStartTime \u003d LocalDateTime.now().plusDays(20);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // round to nearest hour"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime \u003d suggestedStartTime.withHour(19);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime \u003d suggestedStartTime.withMinute(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime suggestedEndTime \u003d suggestedStartTime.plusHours(3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Schedule(new Time(suggestedStartTime), new Time(suggestedEndTime));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static ReadOnlyProductiveNus getSampleProductiveNus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus sampleAb \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            sampleAb.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 13,
      "minhhhnguyen2000": 28,
      "-": 18,
      "printinghelloworld": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Jackson-friendly version of {@link Assignment}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final boolean isReminded;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final boolean isScheduled;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final String suggestedStartTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final String suggestedEndTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"name\") String name, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                 @JsonProperty(\"module\") String moduleCode,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                 @JsonProperty(\"isReminded\") boolean isReminded,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                 @JsonProperty(\"isScheduled\") boolean isScheduled,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                 @JsonProperty(\"suggestedStartTime\") String suggestedStartTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                 @JsonProperty(\"suggestedEndTime\") String suggestedEndTime,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                                 @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                                 @JsonProperty(\"isDone\") boolean isDone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.isReminded \u003d isReminded;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.isScheduled \u003d isScheduled;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.suggestedStartTime \u003d suggestedStartTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.suggestedEndTime \u003d suggestedEndTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        isReminded \u003d source.getRemind().isReminded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        isScheduled \u003d source.getSchedule().isScheduled();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (isScheduled) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedStartTime \u003d source.getSchedule().getSuggestedStartTime().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedEndTime \u003d source.getSchedule().getSuggestedEndTime().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedStartTime \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedEndTime \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        isDone \u003d source.getDone().isMarkedDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        final Priority modelPriority;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (priority \u003d\u003d null || priority.equals(\"\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            modelPriority \u003d new Priority();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!Time.isValidTime(deadline)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        final Time modelDeadline \u003d new Time(deadline);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        final Remind modelRemind \u003d new Remind(isReminded);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        final Done modelDone \u003d new Done(isDone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // the assignment is scheduled"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if ((suggestedStartTime.equals(\"\") || suggestedEndTime.equals(\"\")) \u0026\u0026 isScheduled) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Schedule.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (isScheduled \u0026\u0026 !Time.isValidTime(suggestedStartTime)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new IllegalValueException(Schedule.START_TIME_MESSAGE_CONSTRAINS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (isScheduled \u0026\u0026 !Time.isValidTime(suggestedEndTime)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new IllegalValueException(Schedule.END_TIME_MESSAGE_CONSTRAINS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // the assignment is not scheduled"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!isScheduled \u0026\u0026 (!suggestedStartTime.equals(\"\") || !suggestedEndTime.equals(\"\"))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new IllegalValueException(Schedule.NOT_SCHEDULED_CONSTRAINS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (isScheduled) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            final Schedule modelSchedule \u003d new Schedule(new Time(suggestedStartTime),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    new Time(suggestedEndTime));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return new Assignment(modelName, modelDeadline, modelModuleCode, modelRemind, modelSchedule, modelPriority,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    modelDone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new Assignment(modelName, modelDeadline, modelModuleCode, modelRemind, new Schedule(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    modelPriority, modelDone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 10,
      "hyngkng": 20,
      "andreatanky": 9,
      "minhhhnguyen2000": 48,
      "-": 40,
      "printinghelloworld": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"name\") String name, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                             @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"module\") String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        startTime \u003d source.getTime().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!Time.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        final Time modelStartTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        final Time modelEndTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new Lesson(modelName, modelStartTime, modelEndTime, modelModuleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "andreatanky": 69,
      "printinghelloworld": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProductiveNusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A class to access ProductiveNus data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class JsonProductiveNusStorage implements ProductiveNusStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProductiveNusStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public JsonProductiveNusStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return readProductiveNus(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Similar to {@link #readProductiveNus()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Optional\u003cJsonSerializableProductiveNus\u003e jsonProductiveNus \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                filePath, JsonSerializableProductiveNus.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!jsonProductiveNus.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return Optional.of(jsonProductiveNus.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus(ReadOnlyProductiveNus productiveNus) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        saveProductiveNus(productiveNus, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Similar to {@link #saveProductiveNus(ReadOnlyProductiveNus)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus(ReadOnlyProductiveNus productiveNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(productiveNus);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProductiveNus(productiveNus), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableProductiveNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * An Immutable ProductiveNus that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "@JsonRootName(value \u003d \"productivenus\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "class JsonSerializableProductiveNus {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignments list contains duplicate assignment(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructs a {@code JsonSerializableProductiveNus} with the given assignments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public JsonSerializableProductiveNus("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            @JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Converts a given {@code ReadOnlyProductiveNus} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProductiveNus}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public JsonSerializableProductiveNus(ReadOnlyProductiveNus source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.addAll(source.getAssignmentList().stream().map(JsonAdaptedAssignment::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                                     .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Converts this ProductiveNus into the model\u0027s {@code ProductiveNus} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus productiveNus \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (productiveNus.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            productiveNus.addAssignment(assignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            productiveNus.addLesson(lesson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNus;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 21,
      "andreatanky": 8,
      "minhhhnguyen2000": 8,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ProductiveNusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ProductiveNus}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public interface ProductiveNusStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Path getProductiveNusFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyProductiveNus}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @see #getProductiveNusFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Saves the given {@link ReadOnlyProductiveNus} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void saveProductiveNus(ReadOnlyProductiveNus addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @see #saveProductiveNus(ReadOnlyProductiveNus)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void saveProductiveNus(ReadOnlyProductiveNus addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public interface Storage extends ProductiveNusStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Path getProductiveNusFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void saveProductiveNus(ReadOnlyProductiveNus productiveNus) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Manages storage of ProductiveNus data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ProductiveNusStorage productiveNusStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ProductiveNusStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public StorageManager(ProductiveNusStorage productiveNusStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNusStorage \u003d productiveNusStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProductiveNus methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNusStorage.getProductiveNusFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return readProductiveNus(productiveNusStorage.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNusStorage.readProductiveNus(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus(ReadOnlyProductiveNus productiveNus) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        saveProductiveNus(productiveNus, productiveNusStorage.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus(ReadOnlyProductiveNus productiveNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNusStorage.saveProductiveNus(productiveNus, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleCodeArray;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleLessonArray;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructor for TimetableData."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableData(int semester, String[] moduleCodeArray, String[] moduleLessonArray) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCodeArray \u003d moduleCodeArray;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleLessonArray \u003d moduleLessonArray;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String[] getModuleCodeArray() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.moduleCodeArray;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String[] getModuleLessonArray() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.moduleLessonArray;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both data is of the same semester and same arrays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean isSameTimetableData(TimetableData otherData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (otherData \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherData !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherData.getSemester() \u003d\u003d getSemester()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 Arrays.equals(otherData.getModuleCodeArray(), getModuleCodeArray())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 Arrays.equals(otherData.getModuleLessonArray(), getModuleLessonArray());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableRetriever.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableRetriever {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String JSON_API \u003d \"https://api.nusmods.com/v2/2020-2021/modules/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String DOT_JSON \u003d \".json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final LocalDate SEMESTER_1_START_DATE \u003d LocalDate.of(2020, 8, 10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final LocalDate SEMESTER_2_START_DATE \u003d LocalDate.of(2021, 1, 11);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final DateTimeFormatter LOCAL_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Retrieves timetable json information from NUSMods API and prints out the relevant information."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static List\u003cLesson\u003e retrieveLessons(TimetableData timetableData) throws IOException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int semester \u003d timetableData.getSemester();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        LocalDate startDate \u003d semester \u003d\u003d 1 ? SEMESTER_1_START_DATE : SEMESTER_2_START_DATE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d timetableData.getModuleCodeArray();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d timetableData.getModuleLessonArray();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int moduleIter \u003d 0; moduleIter \u003c moduleCodeArray.length; moduleIter++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String module \u003d moduleCodeArray[moduleIter];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            URL url \u003d getModuleUrl(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String inline \u003d httpGetModuleJsonData(url);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            JSONArray semesterSpecificTimetableData \u003d getSemesterSpecificTimetableData(semester, inline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String[] specificModuleLessonArray \u003d getSpecificModuleLessonArray(moduleLessonArray, moduleIter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            findLessonAndAdd(lessons, module, semesterSpecificTimetableData, specificModuleLessonArray, startDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getUrlString(String moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return JSON_API + moduleCode + DOT_JSON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static URL getModuleUrl(String moduleCode) throws MalformedURLException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String urlString \u003d getUrlString(moduleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new URL(urlString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String httpGetModuleJsonData(URL url) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        connection.connect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int responseCode \u003d connection.getResponseCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (responseCode !\u003d 200) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new RuntimeException(\"HttpResponseCode: \" + responseCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String inline \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Scanner sc \u003d new Scanner(url.openStream());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            inline +\u003d sc.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return inline;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static JSONArray getSemesterSpecificTimetableData(int sem, String inline) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONObject moduleData \u003d (JSONObject) jsonParser.parse(inline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray semesterData \u003d (JSONArray) moduleData.get(\"semesterData\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONObject bothSemesterTimetableData \u003d (JSONObject) semesterData.get(sem - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray semesterSpecificTimetableData \u003d (JSONArray) bothSemesterTimetableData.get(\"timetable\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return semesterSpecificTimetableData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getSpecificModuleLessonArray(String[] moduleLessonArray, int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String specificModuleLesson \u003d moduleLessonArray[index];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] specificModuleLessonArray \u003d specificModuleLesson.split(\",\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return specificModuleLessonArray; // [\"T:1\",\"L:2\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void findLessonAndAdd(List\u003cLesson\u003e lessons, String module, JSONArray timetableData,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                         String[] moduleLessonArray, LocalDate startDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int lessonIter \u003d 0; lessonIter \u003c moduleLessonArray.length; lessonIter++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (!moduleLessonArray[0].equals(\"\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String lessonInfo \u003d moduleLessonArray[lessonIter];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addLesson(lessons, module, lessonInfo, timetableData, startDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void addLesson(List\u003cLesson\u003e lessons, String module, String lessonInfo, JSONArray timetableData,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                  LocalDate startDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonType \u003d getLessonType(lessonInfo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonNum \u003d getLessonNum(lessonInfo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int dataIter \u003d 0; dataIter \u003c timetableData.size(); dataIter++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            JSONObject currentData \u003d (JSONObject) timetableData.get(dataIter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currentLessonType \u003d (String) currentData.get(\"lessonType\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currentLessonNum \u003d (String) currentData.get(\"classNo\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (currentLessonType.equals(lessonType) \u0026\u0026 currentLessonNum.equals(lessonNum)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addSpecificLesson(lessons, module, startDate, currentLessonType, currentData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getLessonType(String lessonInfo) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonType \u003d lessonInfo.split(\":\")[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"LEC\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Lecture\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"TUT\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"LAB\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Laboratory\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"REC\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Recitation\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"SEC\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Sectional Teaching\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getLessonNum(String lessonInfo) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonNum \u003d lessonInfo.split(\":\")[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessonNum;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int getDayOffset(String day) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] daysOfWeek \u003d {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int dayOffset \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currDay \u003d daysOfWeek[i];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (currDay.equals(day)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                dayOffset \u003d i;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return dayOffset;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int[] getWeeksAsIntegerArray(JSONArray jsonWeeks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int[] weeks \u003d new int[jsonWeeks.size()];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonWeeks.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            Long week \u003d (Long) jsonWeeks.get(i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            weeks[i] \u003d week.intValue() \u003e 6 ? week.intValue() + 1 : week.intValue();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void addSpecificLesson(List\u003cLesson\u003e lessons, String module, LocalDate startDate,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                          String currentLessonType, JSONObject currentData) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String day \u003d (String) currentData.get(\"day\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String name \u003d module + \" \" + currentLessonType + \" \" + day;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray jsonWeeks \u003d (JSONArray) currentData.get(\"weeks\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int[] weeks \u003d getWeeksAsIntegerArray(jsonWeeks);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int dayOffset \u003d getDayOffset(day);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int week : weeks) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            int daysToAdd \u003d 7 * (week - 1) + dayOffset;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            LocalDate date \u003d startDate.plusDays(daysToAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (date.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String startTime \u003d date.format(LOCAL_DATE_FORMATTER) + \" \" + (String) currentData.get(\"startTime\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String endTime \u003d date.format(LOCAL_DATE_FORMATTER) + \" \" + (String) currentData.get(\"endTime\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                lessons.add(new Lesson(new Name(name), new Time(startTime), new Time(endTime),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                        new ModuleCode(module)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 190,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableUrlParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableUrlParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String NUSMODS_HOST \u003d \"https://nusmods.com/timetable/\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses timetable url and returns timetable data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static TimetableData parseTimetableUrl(String url) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int semester \u003d parseTimetableUrlForSem(url);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleDataArray \u003d parseTimetableUrlForData(url);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d getModuleCodeArray(moduleDataArray);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d getModuleLessonArray(moduleDataArray);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new TimetableData(semester, moduleCodeArray, moduleLessonArray);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if url is a valid NUSMods timetable URL."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static boolean isValidUrl(String url) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return url.contains(NUSMODS_HOST);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int parseTimetableUrlForSem(String url) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String semester \u003d url.split(\"/sem-\", 2)[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d semester.substring(0, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Integer.parseInt(semester);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] parseTimetableUrlForData(String url) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String moduleData \u003d url.split(\"\\\\?\", 2)[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleDataArray \u003d moduleData.split(\"\u0026\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleDataArray; // [\"CS\u003dT:1,L\u003d2\u0026MA\u003dL:9\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getModuleCodeArray(String[] moduleDataArray) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d moduleDataArray.clone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleCodeArray.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            moduleCodeArray[i] \u003d moduleCodeArray[i].split(\"\u003d\", 2)[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleCodeArray; // [\"CS\",\"MA\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getModuleLessonArray(String[] moduleDataArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d moduleDataArray.clone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleLessonArray.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            moduleLessonArray[i] \u003d moduleLessonArray[i].split(\"\u003d\", 2)[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleLessonArray; // [\"T:1,L:2\",\"L:9\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.task.Time.TIME_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_DAY_PER_MONTH \u003d 28;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String OVERDUE_STYLE_CLASS \u003d \"overdue\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_SOON_STYLE_CLASS \u003d \"due-soon\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_IN_A_WEEK_STYLE_CLASS \u003d \"due-in-a-week\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String HIGH_PRIORITY_STYLE_CLASS \u003d \"high-priority\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String MEDIUM_PRIORITY_STYLE_CLASS \u003d \"medium-priority\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String LOW_PRIORITY_STYLE_CLASS \u003d \"low-priority\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String NONE_PRIORITY_STYLE_CLASS \u003d \"none-priority\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label displaySchedule;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label suggestedStartTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label suggestedEndTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Label done;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline.setText(\"Deadline: \" + assignment.getDeadline().value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getDueDate(dueDate, assignment.getDeadline());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getSchedule(displaySchedule, suggestedStartTime, suggestedEndTime, assignment.getSchedule());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getPriority(priority, assignment.getPriority());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        done.setText(assignment.getDone().toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getDone(done, assignment.getDone());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getDone(Label label, Done done) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!done.isMarkedDone()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        label.setText(done.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getSchedule(Label displaySchedule, Label suggestedStartTime, Label suggestedEndTime,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                            Schedule schedule) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!schedule.isScheduled()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            displaySchedule.setText(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedStartTime.setText(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            suggestedEndTime.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        displaySchedule.setText(\"Suggested:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedStartTime.setText(\"Start time: \" + schedule.getSuggestedStartTime());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        suggestedEndTime.setText(\"End time: \" + schedule.getSuggestedEndTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getPriority(Label label, Priority priority) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        label.setText(\"priority.\" + priority.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        switch (priority.toString()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case Priority.HIGH_PRIORITY:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateHighPriority(label);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case Priority.LOW_PRIORITY:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateLowPriority(label);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case Priority.MEDIUM_PRIORITY:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateMediumPriority(label);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        case Priority.NONE_PRIORITY:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateNonePriority(label);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateHighPriority(Label label) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(HIGH_PRIORITY_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(HIGH_PRIORITY_STYLE_CLASS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateMediumPriority(Label label) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(MEDIUM_PRIORITY_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(MEDIUM_PRIORITY_STYLE_CLASS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateLowPriority(Label label) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(LOW_PRIORITY_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(LOW_PRIORITY_STYLE_CLASS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateNonePriority(Label label) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(NONE_PRIORITY_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(NONE_PRIORITY_STYLE_CLASS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void getDueDate(Label label, Time deadline) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateOverdue(label);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Overdue!\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toMinutes() + \" minutes\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toHours() + \" hours\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueInAWeek(label);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c MIN_DAY_PER_MONTH) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateOverdue(Label label) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(OVERDUE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(OVERDUE_STYLE_CLASS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateDueSoon(Label label) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateDueInAWeek(Label label) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof AssignmentCard)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 7,
      "minhhhnguyen2000": 233,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new AssignmentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Assignment} using a {@code AssignmentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class AssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(new AssignmentCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "minhhhnguyen2000": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f11-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Welcome to ProductiveNUS!\\n\\nHere are some of the commands that you can\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \" try:\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"-----------------------------------------Basic Features---------------------------------------------\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To add an assignment: add n/Lab report 3 d/23-04-2020 1230 mod/CS2100\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can include `remind` when adding an assignment for it to appear in Your reminders\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To delete an assignment shown in the list: delete 3\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can delete multiple assignments by including multiple indexes: delete 3 4 7\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To list all assignments: list\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: Use `list 2` to list assignments with deadlines 2 days from current date\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"----------------------------------------Advance Features-------------------------------------------\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To import your timetable: import url/YOUR_NUSMODS_URL\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To undo your most recent command: undo\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To find assignments by name: find n/Lab\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can also find assignments by module code, deadline or priority using\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    `mod/`, `d/` and `p/` prefixes respectively.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To edit the details of an assignment: edit 3 n/Lab 5\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can edit multiple fields, such as name, deadline and module code, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"     of an assignment at the same using `n/`, `d/` and `mod/` prefixes respectively.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To schedule an assignment: schedule 3 hrs/2 af/05-11-2020 1000 by/10-11-2020 2359\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To unschedule an assignment: unschedule 3\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To set reminders for an assignment shown in the list: remind 3\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can remind multiple assignments by including multiple indexes: remind 3 4 7\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: Assignments with reminders set will be displayed in Your reminders permanently\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To remove reminders for an assignment: unremind 3\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: The index refers to the index of the assignment in Your reminders\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To set a priority tag for an assignment: prioritize 3 p/HIGH\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: There are 3 priority tags to choose from: LOW, MEDIUM, HIGH\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To remove the priority tag for an assignment: unprioritize 3\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To mark an assignment shown in the list as done: done 3\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"    *Tip: You can mark multiple assignments as done: done 3 4 7\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"- To mark an assignment shown in the list as not done: undone 3\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"For more information, kindly refer to our user guide:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + USERGUIDE_URL;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 100,
      "printinghelloworld": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private AssignmentListPanel assignmentListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private UpcomingTaskListPanel upcomingTaskListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private StackPane assignmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //System.out.println(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //System.out.println(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListPanelPlaceholder.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getRemindedAssignmentList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListPanel \u003d new UpcomingTaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(upcomingTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingTaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return upcomingTaskListPanel;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 2,
      "minhhhnguyen2000": 21,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline.setText(\"Deadline: \" + assignment.getDeadline().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "minhhhnguyen2000": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cAssignment\u003e reminderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code ReminderListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Assignment} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(new ReminderCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "minhhhnguyen2000": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingAssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.ui.UpcomingTaskListPanel.getDueDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingAssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingAssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingAssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getDueDate(dueDate, assignment.getDeadline());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private String overdue(LocalDateTime due) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof UpcomingAssignmentCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UpcomingAssignmentCard card \u003d (UpcomingAssignmentCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "minhhhnguyen2000": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingLessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.task.Time.TIME_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingLessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingLessonListCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_DAY_PER_MONTH \u003d 28;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String START_SOON_STYLE_CLASS \u003d \"start-soon\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String START_IN_A_WEEK_STYLE_CLASS \u003d \"start-in-a-week\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //private Label moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label startIn;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Creates a {@code LessonCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingLessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        name.setText(lesson.getName().fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        time.setText(formatTime(lesson.getTime(), lesson.getEndTime()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getStartDate(startIn, lesson.getTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //moduleCode.setText(\"Module: \" + lesson.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private String formatTime(Time startDate, Time endDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String date \u003d LocalDateTime.parse(startDate.value, inputFormat).toLocalDate().format("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalTime startTime \u003d LocalDateTime.parse(startDate.value, inputFormat).toLocalTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalTime endTime \u003d LocalDateTime.parse(endDate.value, inputFormat).toLocalTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return date + \" \" + startTime + \"-\" + endTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void getStartDate(Label label, Time deadline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String formattedDue \u003d due.toLocalDate().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartSoon(label);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toMinutes() + \" minutes\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartSoon(label);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toHours() + \" hours\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartInAWeek(label);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c MIN_DAY_PER_MONTH) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in months\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateStartSoon(Label label) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(START_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(START_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateStartInAWeek(Label label) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(START_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(START_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof UpcomingLessonCard)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UpcomingLessonCard card \u003d (UpcomingLessonCard) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "andreatanky": 50,
      "minhhhnguyen2000": 80,
      "printinghelloworld": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.task.Time.TIME_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_DAY_PER_MONTH \u003d 28;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_SOON_STYLE_CLASS \u003d \"due-soon\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String OVERDUE_STYLE_CLASS \u003d \"overdue\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_IN_A_WEEK_STYLE_CLASS \u003d \"due-in-a-week\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DISPLAY_DATE_AND_TIME_FORMAT \u003d \"dd MMM yyyy HH:mm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UpcomingTaskListPanel.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cTask\u003e upcomingTaskListView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a {@code UpcomingTaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListView.setItems(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListView.setCellFactory(listView -\u003e new UpcomingTaskListViewCell());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static void getDueDate(Label label, Time deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String formattedDue \u003d due.format(DateTimeFormatter.ofPattern(DISPLAY_DATE_AND_TIME_FORMAT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateOverdue(label);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Overdue, on \" + formattedDue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toMinutes() + \" minutes, on \" + formattedDue);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toHours() + \" hours, on \" + formattedDue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueInAWeek(label);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days, on \" + formattedDue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c MIN_DAY_PER_MONTH) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days, on \" + formattedDue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due on \" + formattedDue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateOverdue(Label label) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(OVERDUE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(OVERDUE_STYLE_CLASS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateDueSoon(Label label) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateDueInAWeek(Label label) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class UpcomingTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    setGraphic(new UpcomingAssignmentCard((Assignment) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                } else if (task instanceof Lesson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    setGraphic(new UpcomingLessonCard((Lesson) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 5,
      "minhhhnguyen2000": 118,
      "printinghelloworld": 4
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cGridPane styleClass\u003d\"card-with-big-round-border\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cColumnConstraints percentWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"1\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"displaySchedule\" styleClass\u003d\"cell_small_label_blue_text\" text\u003d\"\\$schedule\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"suggestedStartTime\" styleClass\u003d\"cell_small_label_blue_text\" text\u003d\"\\$suggestedStartTime\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"suggestedEndTime\" styleClass\u003d\"cell_small_label_blue_text\" text\u003d\"\\$suggestedEndTime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cVBox alignment\u003d\"BOTTOM_RIGHT\" GridPane.columnIndex\u003d\"2\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"15\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"done\" styleClass\u003d\"done_label\" text\u003d\"\\$isDone\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cminWidth\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label_round_border\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cLabel fx:id\u003d\"dueDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dueDate\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 63
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".trans-back {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".something {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: red;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".main-window {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-image: url(\u0027../images/background.png\u0027);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-size: 100% 100%;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-padding: 5 0 5 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".reminder {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".done_label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #00ff6e !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".cell_small_label_blue_text {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #2af5eb !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".trans-card {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".grid-with-border {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-hgap: 10;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".grid-with-vgap {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     -fx-vgap: 10;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".black-pane-with-big-round-border {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: rgba(0, 0, 0, 0.6);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".white-pane-with-big-round-border {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: rgba(255, 255, 255, 0.5);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".pane-dull {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: red;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".card-with-big-round-border {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".blue-back {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: #33cccc;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".pane-with-small-round-border {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-radius: 10 10 10 10;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-radius: 10 10 10 10;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".cell_small_label_round_border {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-border-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-radius: 20 20 20 20;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-padding: 2 5 2 5;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-min-width: 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-pref-width: 0;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-max-width: 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-pref-height: 0;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-padding: 5 1 5 1;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "#filterField, #assignmentListPanel, #assignmentWebpage {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 111,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".overdue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #d06651 !important;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".due-soon {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #d06651 !important;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".due-in-a-week {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #e0de9b !important;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".start-in-a-week {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #e0de9b !important;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".high-priority {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: #f54947 !important;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #010504 !important;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".low-priority {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: #73f079 !important;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #010504 !important;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".medium-priority {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: #eef567 !important;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #010504 !important;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".none-priority {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: transparent !important;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ".start-soon {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-text-fill: #d06651 !important;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 40,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ProductiveNUS\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cVBox styleClass\u003d\"main-window\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cGridPane styleClass\u003d\"grid-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cHBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-small-round-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cVBox fx:id\u003d\"assignmentList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" styleClass\u003d\"white-pane-with-big-round-border\" GridPane.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cStackPane fx:id\u003d\"assignmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cGridPane styleClass\u003d\"grid-with-vgap\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cVBox fx:id\u003d\"reminderList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" GridPane.hgrow\u003d\"ALWAYS\" styleClass\u003d\"black-pane-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                      \u003cInsets bottom\u003d\"20\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cLabel styleClass\u003d\"reminder\" text\u003d\"Your reminders\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" GridPane.hgrow\u003d\"ALWAYS\" styleClass\u003d\"black-pane-with-big-round-border\" GridPane.rowIndex \u003d \"1\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                      \u003cInsets bottom\u003d\"20\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cLabel styleClass\u003d\"reminder\" text\u003d\"Upcoming tasks\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 69,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"trans-card\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 31
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 9
    }
  },
  {
    "path": "src/main/resources/view/UpcomingAssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"card-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"dueDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dueDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 33,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/main/resources/view/UpcomingLessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"card-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"startIn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startIn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 32,
      "minhhhnguyen2000": 2
    }
  },
  {
    "path": "src/main/resources/view/UpcomingTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cListView fx:id\u003d\"upcomingTaskListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 8,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/test/data/JsonProductiveNusStorageTest/invalidAndValidAssignmentProductiveNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \"assignments\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\": \"Valid Assignment\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \"deadline\": \"01-01-2020 1800\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\": \"CS2103T\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\": \"Assignment With Invalid Deadline Field\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \"deadline\": \"99-99-9999 9999\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\": \"CS2103T\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "minhhhnguyen2000": 13,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonProductiveNusStorageTest/invalidAssignmentProductiveNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \"assignments\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\": \"Assignment with invalid name field: C$123!S H*mew0rk\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\": \"02-02-2020 1900\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\": \"CS1231S\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableProductiveNusTest/duplicateAssignmentProductiveNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \"assignments\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\": \"CS1231S Homework\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\": \"03-03-2020 1300\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\": \"CS1231S\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\": \"CS1231S Homework\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\": \"03-03-2020 1300\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\": \"CS1231S\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"tasks\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "minhhhnguyen2000": 18
    }
  },
  {
    "path": "src/test/data/JsonSerializableProductiveNusTest/invalidAssignmentProductiveNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \"assignments\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"CS2030 Lab\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    \"deadline\" : \"04-04-2020 invalid23:59\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \"moduleCode\" : \"CS2030\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : false,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"tasks\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "minhhhnguyen2000": 6,
      "-": 2,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableProductiveNusTest/typicalAssignmentsProductiveNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  \"_comment\": \"ProductiveNus save file which contains the same Assignment values as in TypicalAssignments#getTypicalProductiveNus()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \"assignments\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"CS1231S Homework\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"01-01-2020 1800\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS1231S\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"06-11-2020 0600\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"06-11-2020 0800\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"CS2103T Tutorial\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"02-03-2020 2359\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"CS2106 Lab\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"12-12-2020 1200\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS2106\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"16-11-2020 1100\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"16-11-2020 1400\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"CS2102 Tutorial Quiz\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"03-03-2020 0300\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS2102\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"IS1103 Mission\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"12-10-2020 1900\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"IS1103\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"16-11-2020 1400\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"16-11-2020 1700\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"Peer review\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"10-10-2020 1700\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS2101\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"name\" : \"Oral presentation\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"deadline\" : \"03-12-2020 0400\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"moduleCode\" : \"CS2101\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedStartTime\" : \"10-11-2020 0600\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"suggestedEndTime\" : \"10-11-2020 0900\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"name\" : \"MA1101R Tut 1\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"deadline\" : \"03-12-2020 0400\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"moduleCode\" : \"MA1101R\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"suggestedStartTime\" : \"10-11-2020 0600\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"suggestedEndTime\" : \"10-11-2020 0900\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"name\" : \"MA1101R Tut 2\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"deadline\" : \"03-12-2020 0400\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"moduleCode\" : \"MA1101R\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"suggestedStartTime\" : \"10-11-2020 0600\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"suggestedEndTime\" : \"10-11-2020 0900\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"isReminded\" : true,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \"isScheduled\" : true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  \"tasks\" : [ ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "hyngkng": 1,
      "andreatanky": 16,
      "minhhhnguyen2000": 58
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  \"productiveNusFilePath\" : \"productivenus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  \"productiveNusFilePath\" : \"productivenus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final Index fifthAssignmentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(fifthAssignmentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.storage.JsonProductiveNusStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonProductiveNusStorage productiveNusStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                new JsonProductiveNusStorage(temporaryFolder.resolve(\"productivenus.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(productiveNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseException(invalidCommand, String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_HELP));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredReminderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getRemindedAssignmentList().remove(0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(listCommand, String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()), model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Setup LogicManager with JsonProductiveNusIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonProductiveNusStorage productiveNusStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                new JsonProductiveNusIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionProductiveNus.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(productiveNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_HW + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.preUpdateModel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.addAssignment(expectedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAssignmentList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static class JsonProductiveNusIoExceptionThrowingStub extends JsonProductiveNusStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        private JsonProductiveNusIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void saveProductiveNus(ReadOnlyProductiveNus productiveNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 21,
      "andreatanky": 2,
      "minhhhnguyen2000": 9,
      "-": 134,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_newAssignment_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.addAssignment(validAssignment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAssignment), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAssignment), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(new AddCommand(assignmentInList), model, AddCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 6,
      "minhhhnguyen2000": 7,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_assignmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStubAcceptingAssignmentAdded modelStub \u003d new ModelStubAcceptingAssignmentAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAssignment).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAssignment), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Arrays.asList(validAssignment), modelStub.assignmentsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAssignment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAssignment(validAssignment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ASSIGNMENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment cs1231SHomework \u003d new AssignmentBuilder().withName(\"CS1231S Homework\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment cs2103TTutorial \u003d new AssignmentBuilder().withName(\"CS2103T Tutorial\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs1231SHomeworkCommand \u003d new AddCommand(cs1231SHomework);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs2103TTutorialCommand \u003d new AddCommand(cs2103TTutorial);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addCs1231SHomeworkCommand.equals(addCs1231SHomeworkCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs1231SHomeworkCommandCopy \u003d new AddCommand(cs1231SHomework);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addCs1231SHomeworkCommand.equals(addCs1231SHomeworkCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(addCs2103TTutorialCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void setPreviousModel(Model previousModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void goToPreviousModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public FilteredList\u003cAssignment\u003e getFilteredAssignments() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public Model getPreviousModel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public Path getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void setProductiveNusFilePath(Path productiveNusFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void preUpdateModel() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void setProductiveNus(ReadOnlyProductiveNus newData) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public ReadOnlyProductiveNus getProductiveNus() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getRemindedAssignmentsList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * A Model stub that contains a single assignment."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private class ModelStubWithAssignment extends ModelStub {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        private final Assignment assignment;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStubWithAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return this.assignment.isSameAssignment(assignment);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * A Model stub that always accept the assignment being added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private class ModelStubAcceptingAssignmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final ArrayList\u003cAssignment\u003e assignmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return assignmentsAdded.stream().anyMatch(assignment::isSameAssignment);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            assignmentsAdded.add(assignment);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public ReadOnlyProductiveNus getProductiveNus() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new ProductiveNus();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "hyngkng": 13,
      "andreatanky": 5,
      "minhhhnguyen2000": 70,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_emptyProductiveNus_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.setProductiveNus(new ProductiveNus());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"clear\"), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_nonEmptyProductiveNus_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.setProductiveNus(new ProductiveNus());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(new ClearCommand(\"clear\"), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_emptyProductiveNus_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.setProductiveNus(new ProductiveNus());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(new ClearCommand(\"clear 3\"), expectedModel,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "andreatanky": 11,
      "hyngkng": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_NAME_HW \u003d \"CS1231S Homework\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_NAME_LAB \u003d \"CS2106 Lab\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_DEADLINE_HW \u003d \"01-01-2020 1800\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_DEADLINE_LAB \u003d \"02-02-2020 2000\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_MODULE_CODE_HW \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_MODULE_CODE_LAB \u003d \"CS2100\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String VALID_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String VALID_PRIORITY \u003d Priority.HIGH_PRIORITY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NAME_DESC_HW \u003d \" \" + PREFIX_NAME + VALID_NAME_HW;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NAME_DESC_LAB \u003d \" \" + PREFIX_NAME + VALID_NAME_LAB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEADLINE_DESC_HW \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEADLINE_DESC_LAB \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MODULE_CODE_DESC_HW \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MODULE_CODE_DESC_LAB \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String REMIND_DESC \u003d \" \" + VALID_REMIND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"CS1231\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"31-02-2020 0000\"; // 31st Feb does not exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + PREFIX_MODULE_CODE; // empty string not allowed for module code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String INVALID_REMIND_DESC \u003d \" \" + \"remin\"; // wrong spelling"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"average\"; // invalid priority"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final EditCommand.EditAssignmentDescriptor DESC_HW;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final EditCommand.EditAssignmentDescriptor DESC_LAB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DESC_HW \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_HW)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DESC_LAB \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * - the ProductiveNus, filtered assignment list and selected assignment in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus expectedProductiveNus \u003d new ProductiveNus(actualModel.getProductiveNus());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e expectedRemindedList \u003d new ArrayList\u003c\u003e(actualModel.getRemindedAssignmentsList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(expectedProductiveNus, actualModel.getProductiveNus());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedRemindedList, actualModel.getRemindedAssignmentsList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the assignment at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code model}\u0027s ProductiveNus."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void showAssignmentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d model.getFilteredAssignmentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final String[] splitName \u003d assignment.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(1, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 12,
      "andreatanky": 2,
      "minhhhnguyen2000": 26,
      "-": 72,
      "printinghelloworld": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private List\u003cIndex\u003e indexesToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private List\u003cAssignment\u003e assignmentsToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment assignmentToDelete \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentsToDelete.add(assignmentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexesToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, assignmentsToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment firstAssignmentToDelete \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentsToDelete.add(firstAssignmentToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexesToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, assignmentsToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.deleteAssignment(firstAssignmentToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        showNoAssignment(expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_validMultipleIndexesUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(INDEX_FIRST_ASSIGNMENT); // Add index 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(INDEX_SECOND_ASSIGNMENT); // Add index 2"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment firstAssignmentToDelete \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment secondAssignmentToDelete \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentsToDelete.add(secondAssignmentToDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentsToDelete.add(firstAssignmentToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexesToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, assignmentsToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.deleteAssignment(secondAssignmentToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.deleteAssignment(firstAssignmentToDelete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cIndex\u003e assignmentIndexesToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentIndexesToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(assignmentIndexesToDelete);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexesToDelete);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_duplicatedIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Index duplicatedIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // adds duplicated indexes to list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(duplicatedIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        indexesToDelete.add(duplicatedIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(duplicatedIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexesToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(deleteCommand, model, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Messages"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .MESSAGE_DUPLICATE_INDEXES));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cIndex\u003e firstCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        firstCommandIndexes.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        firstCommandIndexes.add(INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cIndex\u003e secondCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        secondCommandIndexes.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondCommandIndexes);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private void showNoAssignment(Model model) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        model.updateFilteredAssignmentList(p -\u003e false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(model.getFilteredAssignmentList().isEmpty());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "hyngkng": 14,
      "andreatanky": 92,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * {@code DoneCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private List\u003cIndex\u003e indexesToMarkDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private List\u003cAssignment\u003e assignmentsToMarkDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DoneCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentToMarkDone \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assignmentsToMarkDone.add(assignmentToMarkDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_ASSIGNMENT_AS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                assignmentsToMarkDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToMarkDone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignmentToMarkDone \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment secondAssignmentToMarkDone \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assignmentsToMarkDone.add(firstAssignmentToMarkDone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assignmentsToMarkDone.add(secondAssignmentToMarkDone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_ASSIGNMENTS_AS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                assignmentsToMarkDone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), firstAssignmentToMarkDone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(1), secondAssignmentToMarkDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentToMarkDone \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assignmentsToMarkDone.add(assignmentToMarkDone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_ASSIGNMENT_AS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                assignmentsToMarkDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToMarkDone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedDoneAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Set assignment in filtered list in ProductiveNus as done"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignmentMarkedDone \u003d new AssignmentBuilder(firstAssignment).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(firstAssignment, firstAssignmentMarkedDone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model, DoneCommand.MESSAGE_ALREADY_MARKED_ASSIGNMENT_AS_DONE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedDonePartialAssignmentsUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Set assignment in filtered list in ProductiveNus as done"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignmentMarkedDone \u003d new AssignmentBuilder(firstAssignment).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(firstAssignment, firstAssignmentMarkedDone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                String.format(DoneCommand.MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENT_AS_DONE, \"[1]\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedDoneAllAssignmentsUnfilteredList_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Set all assignments in filtered list in ProductiveNus as done"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment firstAssignmentMarkedDone \u003d new AssignmentBuilder(firstAssignment).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment secondAssignment \u003d model.getFilteredAssignmentList().get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment secondAssignmentMarkedDone \u003d new AssignmentBuilder(secondAssignment).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment thirdAssignment \u003d model.getFilteredAssignmentList().get(INDEX_THIRD_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment thirdAssignmentMarkedDone \u003d new AssignmentBuilder(thirdAssignment).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(firstAssignment, firstAssignmentMarkedDone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(secondAssignment, secondAssignmentMarkedDone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(thirdAssignment, thirdAssignmentMarkedDone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model, String.format("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                DoneCommand.MESSAGE_MULTIPLE_ALREADY_MARKED_ASSIGNMENTS_AS_DONE, \"[1, 2, 3]\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedDoneAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Set assignment in filtered list in ProductiveNus as done"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentInListMarkedDone \u003d new AssignmentBuilder(assignmentInList).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListMarkedDone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(doneCommand, model, DoneCommand.MESSAGE_ALREADY_MARKED_ASSIGNMENT_AS_DONE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cIndex\u003e firstCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        firstCommandIndexes.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        firstCommandIndexes.add(INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cIndex\u003e secondCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        secondCommandIndexes.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand markFirstCommandDone \u003d new DoneCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand markSecondCommandDone \u003d new DoneCommand(secondCommandIndexes);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markFirstCommandDone.equals(markFirstCommandDone));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markSecondCommandDone.equals(markSecondCommandDone));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand markFirstCommandDoneCopy \u003d new DoneCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markFirstCommandDone.equals(markFirstCommandDoneCopy));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        DoneCommand markSecondCommandDoneCopy \u003d new DoneCommand(secondCommandIndexes);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markSecondCommandDone.equals(markSecondCommandDoneCopy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstCommandDone.equals(1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markSecondCommandDone.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstCommandDone.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markSecondCommandDone.equals(null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstCommandDone.equals(markSecondCommandDone));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "printinghelloworld": 234
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAssignmentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class EditAssignmentDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptorWithSameValues \u003d new EditAssignmentDescriptor(DESC_HW);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(DESC_HW.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(DESC_HW.equals(DESC_HW));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(DESC_LAB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 8,
      "minhhhnguyen2000": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(editedAssignment).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(), null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_nameAndDeadlineFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withName(VALID_NAME_LAB).withDeadline(VALID_DEADLINE_LAB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(), null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_nameAndModuleCodeFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withName(VALID_NAME_LAB).withModuleCode(VALID_MODULE_CODE_LAB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(), null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, new EditAssignmentDescriptor());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentInFilteredList \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(assignmentInFilteredList).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(), null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(firstAssignment).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ASSIGNMENT, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // edit assignment in filtered list into a duplicate in ProductiveNUS"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder(assignmentInList).build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidAssignmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * but smaller than size of ProductiveNus"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidAssignmentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, DESC_HW);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor copyDescriptor \u003d new EditCommand.EditAssignmentDescriptor(DESC_HW);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, copyDescriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand(\"clear\")));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ASSIGNMENT, DESC_HW)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ASSIGNMENT, DESC_LAB)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 24,
      "andreatanky": 21,
      "minhhhnguyen2000": 50,
      "-": 99,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(new ExitCommand(\"exit\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_exit_failed() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(new ExitCommand(\"exit 3\"), expectedModel,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "andreatanky": 6,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2106_LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.IS1103_MISSION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.MA1101R_TUTORIAL_ONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.MA1101R_TUTORIAL_TWO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.PEER_REVIEW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Assignment 1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Lab\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_zeroNameKeywords_noAssignmentFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d preparePredicateName(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findName \u003d new FindCommand(namePredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(namePredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findName, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_zeroModuleCodeKeywords_noAssignmentFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate moduleCodePredicate \u003d preparePredicateModuleCode(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findModuleCode \u003d new FindCommand(moduleCodePredicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(moduleCodePredicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findModuleCode, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_zeroDeadlineKeywords_noAssignmentFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeadlineContainsKeywordsPredicate deadlinePredicate \u003d preparePredicateDeadline(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findDeadline \u003d new FindCommand(deadlinePredicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(deadlinePredicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findDeadline, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_zeroPriorityKeywords_noAssignmentFound() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        PriorityContainsKeywordsPredicate priorityPredicate \u003d preparePredicatePriority(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findPriority \u003d new FindCommand(priorityPredicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(priorityPredicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findPriority, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_multipleNameKeywords_multipleAssignmentsFound() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicateName(\"Lab Mission Peer\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Arrays.asList(CS2106_LAB, IS1103_MISSION, PEER_REVIEW), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_multipleModuleCodeKeywords_multipleAssignmentsFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate moduleCodePredicate \u003d preparePredicateModuleCode(\"CS2103T CS1231S\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findModuleCode \u003d new FindCommand(moduleCodePredicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(moduleCodePredicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findModuleCode, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Arrays.asList(CS1231S_HW, CS2103T_TUT), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_multipleDeadlineKeywords_multipleAssignmentsFound() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        DeadlineContainsKeywordsPredicate deadlinePredicate \u003d preparePredicateDeadline(\"01-01-2020 1800 1200\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findDeadline \u003d new FindCommand(deadlinePredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(deadlinePredicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findDeadline, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Arrays.asList(CS1231S_HW, CS2106_LAB), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_multiplePriorityKeywords_multipleAssignmentsFound() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        PriorityContainsKeywordsPredicate priorityPredicate \u003d preparePredicatePriority(\"high LOW\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findPriority \u003d new FindCommand(priorityPredicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(priorityPredicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(findPriority, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(Arrays.asList(MA1101R_TUTORIAL_ONE, MA1101R_TUTORIAL_TWO), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicateName(String userInput) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses {@code userInput} into a {@code ModuleCodeContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private ModuleCodeContainsKeywordsPredicate preparePredicateModuleCode(String userInput) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new ModuleCodeContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses {@code userInput} into a {@code DeadlineContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private DeadlineContainsKeywordsPredicate preparePredicateDeadline(String userInput) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new DeadlineContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses {@code userInput} into a {@code PriorityContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private PriorityContainsKeywordsPredicate preparePredicatePriority(String userInput) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new PriorityContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 8,
      "andreatanky": 102,
      "minhhhnguyen2000": 6,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(new HelpCommand(\"help\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_help_failed() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(new HelpCommand(\"help 3\"), expectedModel,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "andreatanky": 6,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.DATA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ImportCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_import_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.importTimetable(DATA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandSuccess(new ImportCommand(DATA), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Predicate\u003cAssignment\u003e showLimitedAssignments() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return assignment -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(Time.TIME_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String dateAndTimeToParse \u003d assignment.getDeadline().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime currentDateAndTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            assert index.isPresent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            int zeroBaseValue \u003d index.get().getZeroBased();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            long inputNumberOfDays \u003d Optional.of(zeroBaseValue).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime lastDateAndTime \u003d currentDateAndTime.plusDays(inputNumberOfDays);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime parsedDateAndTime \u003d LocalDateTime.parse(dateAndTimeToParse, inputFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isAfterCurrentDateAndTime \u003d parsedDateAndTime.isAfter(currentDateAndTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isBeforeLastDateAndTime \u003d parsedDateAndTime.isBefore(lastDateAndTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return isAfterCurrentDateAndTime \u0026\u0026 isBeforeLastDateAndTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()), expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_oneDayFromCurrentDate_showAssignments() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        index \u003d Optional.of(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        model.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ListCommand listForOneDay \u003d new ListCommand(index.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(listForOneDay, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_tenDaysFromCurrentDate_showAssignments() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        index \u003d Optional.of(Index.fromZeroBased(10));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        model.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ListCommand listForTenDays \u003d new ListCommand(index.get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(listForTenDays, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void execute_fiftyDaysFromCurrentDate_showAssignments() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        index \u003d Optional.of(Index.fromZeroBased(50));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        model.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ListCommand listForFiftyDays \u003d new ListCommand(index.get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(showLimitedAssignments());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertCommandSuccess(listForFiftyDays, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 6,
      "andreatanky": 57,
      "-": 30,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PrioritizeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class PrioritizeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment prioritizedAssignment \u003d new AssignmentBuilder(model.getFilteredAssignmentList().get(0))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withPriority(VALID_PRIORITY).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(INDEX_FIRST_ASSIGNMENT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                new Priority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String expectedMessage \u003d String.format(PrioritizeCommand.MESSAGE_PRIORITIZE_ASSIGNMENT_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                prioritizedAssignment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProductiveNus(model.getProductiveNus()), new UserPrefs(), null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), prioritizedAssignment);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandSuccess(prioritizeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * {@code RemindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private List\u003cIndex\u003e indexesToRemind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private List\u003cAssignment\u003e assignmentsToRemind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RemindCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemind \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assignmentsToRemind.add(assignmentToRemind);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(RemindCommand.MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentsToRemind);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToRemind);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Set reminders for last assignment"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.remove(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(indexLastAssignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemindLast \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommandLast \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assignmentsToRemind.remove(assignmentToRemind);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assignmentsToRemind.add(assignmentToRemindLast);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessageLast \u003d String.format("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                RemindCommand.MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentsToRemind);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModelManager expectedModelLast \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModelLast.setAssignment(model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(indexLastAssignment.getZeroBased()), assignmentToRemindLast);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommandLast, model, expectedMessageLast, expectedModelLast);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Zero index (boundary value)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index zeroIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(zeroIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommandZero \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommandZero, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // For testing filtered lists, there is only one assignment in the filtered list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemind \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assignmentsToRemind.add(assignmentToRemind);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(RemindCommand.MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentsToRemind);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToRemind);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Size of filtered assignment list + 1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Zero index (boundary value)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index zeroIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(zeroIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommandZero \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommandZero, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validMultipleIndexesUnfilteredList_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_SECOND_ASSIGNMENT); // Two indexes of assignments to remind"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment firstAssignmentToRemind \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment secondAssignmentToRemind \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assignmentsToRemind.add(firstAssignmentToRemind);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assignmentsToRemind.add(secondAssignmentToRemind);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format(RemindCommand.MESSAGE_REMIND_ASSIGNMENTS_SUCCESS, assignmentsToRemind);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), firstAssignmentToRemind);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(1), secondAssignmentToRemind);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_alreadyRemindedAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set reminders for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment firstAssignmentReminded \u003d new AssignmentBuilder(firstAssignment).withRemindersSet().build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(firstAssignment, firstAssignmentReminded);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, String.format("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                RemindCommand.MESSAGE_REMINDED_ASSIGNMENT, firstAssignment));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_alreadyRemindedAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set reminders for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInListReminded \u003d new AssignmentBuilder(assignmentInList).withRemindersSet().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListReminded);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, String.format("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                RemindCommand.MESSAGE_REMINDED_ASSIGNMENT, assignmentInList));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_duplicatedIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index duplicatedIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // adds duplicated indexes to list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(duplicatedIndex);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        indexesToRemind.add(duplicatedIndex);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(duplicatedIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(indexesToRemind);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Messages"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .MESSAGE_DUPLICATE_INDEXES));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e firstCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        firstCommandIndexes.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        firstCommandIndexes.add(INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e secondCommandIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        secondCommandIndexes.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindFirstCommand \u003d new RemindCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindSecondCommand \u003d new RemindCommand(secondCommandIndexes);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(remindFirstCommand.equals(remindFirstCommand));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindFirstCommandCopy \u003d new RemindCommand(firstCommandIndexes);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(remindFirstCommand.equals(remindFirstCommandCopy));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(remindSecondCommand));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 214,
      "hyngkng": 28,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalExpectedHours.EXPECTED_HOUR_MAX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalExpectedHours.EXPECTED_HOUR_MIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalTime.EARLY_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalTime.LATE_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * {@code ScheduleCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void assertExecuteSuccess(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ScheduleCommand(null, 0, null, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToSchedule \u003d model.getFilteredAssignmentList().get(INDEX_THIRD_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_THIRD_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_ASSIGNMENT_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                assignmentToSchedule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertExecuteSuccess(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(assignmentToSchedule.getSchedule().isScheduled());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexUnfilteredList_overdueFail() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d ScheduleCommand.MESSAGE_ASSIGNMENT_DUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexUnfilteredList_noScheduleFail() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_THIRD_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                LATE_TIME, EARLY_TIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d ScheduleCommand.MESSAGE_SCHEDULE_ASSIGNMENT_FAIL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToSchedule \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_ASSIGNMENT_SUCCESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                assignmentToSchedule);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertExecuteSuccess(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(assignmentToSchedule.getSchedule().isScheduled());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexFilteredList_overdueFail() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d ScheduleCommand.MESSAGE_ASSIGNMENT_DUE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_validIndexFilteredList_noScheduleFail() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_THIRD_ASSIGNMENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                LATE_TIME, EARLY_TIME);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d ScheduleCommand.MESSAGE_SCHEDULE_ASSIGNMENT_FAIL;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleFirstCommand \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleSecondCommand \u003d new ScheduleCommand(INDEX_SECOND_ASSIGNMENT, EXPECTED_HOUR_MAX,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ScheduleCommand scheduleFirstCommandCopy \u003d new ScheduleCommand(INDEX_FIRST_ASSIGNMENT, EXPECTED_HOUR_MIN,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                EARLY_TIME, LATE_TIME);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(scheduleSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_noPreviousCommand_fail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(new UndoCommand(\"undo\"), model, UndoCommand.MESSAGE_UNDO_FAIL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_haveSuccessfulPreviousCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cIndex\u003e indexesToMarkDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        indexesToMarkDone.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(indexesToMarkDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.preUpdateModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        doneCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d UndoCommand.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand(\"undo\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_haveUnsuccessfulPreviousCommand_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            undoneCommand.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (CommandException ignored) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            UndoCommand undoCommand \u003d new UndoCommand(\"undo\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_UNDO_FAIL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_wrongCommandFormat_fail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(new UndoCommand(\"undo 3\"), model,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class UndoneCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UndoneCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        markFirstAssignmentAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentToMarkUndone \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                UndoneCommand.MESSAGE_MARK_ASSIGNMENT_AS_UNDONE_SUCCESS, assignmentToMarkUndone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToMarkUndone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandSuccess(undoneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(undoneCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        markFirstAssignmentAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentToMarkAsUndone \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                UndoneCommand.MESSAGE_MARK_ASSIGNMENT_AS_UNDONE_SUCCESS, assignmentToMarkAsUndone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), model.getPreviousModel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToMarkAsUndone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandSuccess(undoneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(undoneCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedUndoneAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(undoneCommand, model, UndoneCommand.MESSAGE_ALREADY_UNDONE_ASSIGNMENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void execute_alreadyMarkedUndoneAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertCommandFailure(undoneCommand, model, UndoneCommand.MESSAGE_ALREADY_UNDONE_ASSIGNMENT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        markFirstAssignmentAsDone();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        markSecondAssignmentAsDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand markFirstAsUndoneCommand \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand markSecondAsUndoneCommand \u003d new UndoneCommand(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markFirstAsUndoneCommand.equals(markFirstAsUndoneCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        UndoneCommand undoneFirstCommandCopy \u003d new UndoneCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(markFirstAsUndoneCommand.equals(undoneFirstCommandCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstAsUndoneCommand.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstAsUndoneCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(markFirstAsUndoneCommand.equals(markSecondAsUndoneCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // Mark first assignment in filtered list as done"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private void markFirstAssignmentAsDone() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set done status for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentInListMarkAsDone \u003d new AssignmentBuilder(assignmentInList).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListMarkAsDone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // Mark second assignment in filtered list as done"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private void markSecondAssignmentAsDone() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set done status for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment assignmentInListMarkAsDone \u003d new AssignmentBuilder(assignmentInList).withDoneStatusSet().build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListMarkAsDone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 25,
      "printinghelloworld": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnprioritizeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UnprioritizeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnprioritizeCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        markFirstAssignmentAsHighPriority();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentToUnprioritize \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                UnprioritizeCommand.MESSAGE_UNPRIORITIZE_ASSIGNMENT_SUCCESS, assignmentToUnprioritize);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToUnprioritize);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandSuccess(unprioritizeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandFailure(unprioritizeCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        markFirstAssignmentAsHighPriority();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentToUnprioritize \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                UnprioritizeCommand.MESSAGE_UNPRIORITIZE_ASSIGNMENT_SUCCESS, assignmentToUnprioritize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(), model.getPreviousModel());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToUnprioritize);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandSuccess(unprioritizeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ProductiveNus list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandFailure(unprioritizeCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_noPriorityAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandFailure(unprioritizeCommand, model, UnprioritizeCommand.MESSAGE_UNPRIORITIZE_ASSIGNMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void execute_noPriorityAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeCommand \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertCommandFailure(unprioritizeCommand, model, UnprioritizeCommand.MESSAGE_UNPRIORITIZE_ASSIGNMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        markFirstAssignmentAsHighPriority();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        markSecondAssignmentAsHighPriority();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeFirstCommand \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeSecondCommand \u003d new UnprioritizeCommand(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(unprioritizeFirstCommand.equals(unprioritizeFirstCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UnprioritizeCommand unprioritizeFirstCommandCopy \u003d new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(unprioritizeFirstCommand.equals(unprioritizeFirstCommandCopy));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(unprioritizeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(unprioritizeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(unprioritizeFirstCommand.equals(unprioritizeSecondCommand));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    // Prioritize first assignment in filtered list as high priority"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private void markFirstAssignmentAsHighPriority() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInListMarkAsHighPriority \u003d new AssignmentBuilder(assignmentInList).withPriority(\"HIGH\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListMarkAsHighPriority);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    // Prioritize second assignment in filtered list as high priority"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private void markSecondAssignmentAsHighPriority() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInListMarkAsHighPriority \u003d new AssignmentBuilder(assignmentInList).withPriority(\"HIGH\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListMarkAsHighPriority);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnremindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class UnremindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProductiveNus(), new UserPrefs(), null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Index indexLastAssignment \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            model.getProductiveNus().getAssignmentList().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnremindCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Remove first assignment from reminded assignment list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindFirstAssignment();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToUnremind \u003d model.getRemindedAssignmentsList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindCommand \u003d new UnremindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                UnremindCommand.MESSAGE_UNREMIND_ASSIGNMENT_SUCCESS, assignmentToUnremind);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getRemindedAssignmentsList().get(0), assignmentToUnremind);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(unremindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Remove last assignment from reminded assignment list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindFirstAssignment();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindSecondAssignment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindLastAssignment();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index indexLastRemindedAssignment \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                model.getRemindedAssignmentsList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToUnremindLast \u003d model.getRemindedAssignmentsList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(indexLastRemindedAssignment.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindCommandLast \u003d new UnremindCommand(indexLastRemindedAssignment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessageLast \u003d String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                UnremindCommand.MESSAGE_UNREMIND_ASSIGNMENT_SUCCESS, assignmentToUnremindLast);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModelManager expectedModelLast \u003d new ModelManager(model.getProductiveNus(), new UserPrefs(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                model.getPreviousModel());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModelLast.setAssignment(model.getRemindedAssignmentsList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(indexLastRemindedAssignment.getZeroBased()), assignmentToUnremindLast);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(unremindCommandLast, model, expectedMessageLast, expectedModelLast);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Reminded assignment list size + 1 (boundary value)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getRemindedAssignmentsList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindCommand \u003d new UnremindCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(unremindCommand, model, UnremindCommand.MESSAGE_INVALID_DISPLAYED_REMINDERS_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Index 0 (boundary value)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index zeroIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindCommand1 \u003d new UnremindCommand(zeroIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(unremindCommand1, model, UnremindCommand.MESSAGE_INVALID_DISPLAYED_REMINDERS_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindFirstAssignment();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindSecondAssignment();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindFirstCommand \u003d new UnremindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindSecondCommand \u003d new UnremindCommand(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(unremindFirstCommand.equals(unremindFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        UnremindCommand unremindFirstCommandCopy \u003d new UnremindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(unremindFirstCommand.equals(unremindFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(unremindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(unremindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(unremindFirstCommand.equals(unremindSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Set reminders for first assignment in filtered list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void remindFirstAssignment() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set reminders for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInListReminded \u003d new AssignmentBuilder(assignmentInList).withRemindersSet().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListReminded);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Set reminders for second assignment in filtered list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void remindSecondAssignment() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Set reminders for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInListReminded \u003d new AssignmentBuilder(assignmentInList).withRemindersSet().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListReminded);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Set reminders for last assignment in filtered list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void remindLastAssignment() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Set reminders for assignment in filtered list in ProductiveNus"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInList \u003d model.getProductiveNus().getAssignmentList()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInListReminded \u003d new AssignmentBuilder(assignmentInList).withRemindersSet().build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListReminded);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 116,
      "hyngkng": 19,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMIND_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_LAB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMIND_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB_PRIORITY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB_PRIORITY_REMIND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB_REMIND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_compulsoryFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(LAB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignmentWithPriority \u003d new AssignmentBuilder(LAB_PRIORITY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignmentWithRemind \u003d new AssignmentBuilder(LAB_REMIND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignmentWithPriorityAndRemind \u003d new AssignmentBuilder(LAB_PRIORITY_REMIND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // TODO JERRY: Find out why an Add Command without priority passes the test case as well eg. expectedAssignment"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // all compulsory fields with priority"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB + PRIORITY_DESC,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new AddCommand(expectedAssignmentWithPriority));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // all compulsory fields with remind"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB + REMIND_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new AddCommand(expectedAssignmentWithRemind));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // all compulsory fields with remind and priority"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB + PRIORITY_DESC"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + REMIND_DESC, new AddCommand(expectedAssignmentWithPriorityAndRemind));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // no remind and priority"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HW + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_NAME_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + VALID_DEADLINE_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + DESC_HW,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_NAME_LAB + VALID_DEADLINE_LAB + DESC_HW,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + INVALID_DEADLINE_DESC + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_LAB + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // TODO JERRY: Double check with team on error message for invalid remind case"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // invalid remind"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB + INVALID_REMIND_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple names"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HW + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + MODULE_CODE_DESC_LAB, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple names with remind"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HW + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + MODULE_CODE_DESC_LAB + REMIND_DESC, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple deadlines"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple deadlines with remind"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + REMIND_DESC, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple module codes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + MODULE_CODE_DESC_LAB, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple module codes with remind"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + MODULE_CODE_DESC_LAB + REMIND_DESC, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 29,
      "hyngkng": 25,
      "andreatanky": 2,
      "minhhhnguyen2000": 9,
      "-": 53,
      "printinghelloworld": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void assertMultipleSamePrefixPresent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_oneArgument() throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_multipleArguments() throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Multiple instances of the same prefix should throw an exception"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 15,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_validArgsSingleInput_returnsDeleteCommand() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cIndex\u003e parsedIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        parsedIndexes.add(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(parsedIndexes));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_validArgsMultipleInputs_returnsDeleteCommand() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e parsedIndexes \u003d ParserUtil.parseIndexes(\"1 2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new DeleteCommand(parsedIndexes));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_invalidArgsNegativeIndex_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_invalidArgsAlphabet_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"b hcc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_invalidArgsSpecialChar_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"*\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"% ^ \u0026\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "andreatanky": 26,
      "hyngkng": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * outside of the DoneCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * same path through the DoneCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_validArgsSingleInput_returnsDoneCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cIndex\u003e parsedIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        parsedIndex.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(parsedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_validArgsMultipleInput_returnsDoneCommand() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cIndex\u003e parsedIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        parsedIndexes.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        parsedIndexes.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new DoneCommand(parsedIndexes));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 9,
      "printinghelloworld": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MULTIPLE_PREFIXES_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Time.MESSAGE_CONSTRAINTS); // invalid deadline"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple invalid values - first invalid value caught"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DEADLINE_DESC"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + INVALID_MODULE_CODE_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // valid deadline followed by invalid deadline."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DESC_LAB + INVALID_DEADLINE_DESC, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // invalid deadline followed by valid deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + MODULE_CODE_DESC_LAB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + NAME_DESC_HW;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withName(VALID_NAME_HW)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_HW;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_HW).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_HW).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // module code"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_multipleRepeatedFields_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                 + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_MULTIPLE_PREFIXES_FOUND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 17,
      "hyngkng": 18,
      "andreatanky": 3,
      "minhhhnguyen2000": 19,
      "-": 80,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.NO_PREFIX_AND_KEYWORD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_moreThanOnePrefix_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" n/CS1231S Homework mod/CS2100\", String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MORE_THAN_ONE_PREFIX_MESSAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" boo/CS2100\", String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid date and time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" d/2345 hello\", String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid date and time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" d/99-99-1010 2500\", String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" d/99-10-2020\", String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" d/9800\", String.format("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.INVALID_DATE_OR_TIME_MESSAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" mod/CS386\", ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //invalid priority"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \" p/NO\", Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        //preamble present"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" preamble mod/CS2100\", String.format("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" preamble n/assignment 2\", String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" preamble d/1200\", String.format("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \" preamble p/MEDIUM\", String.format("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand expectedFindCommandByName \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"CS1231S\", \"Homework\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand expectedFindCommandByModuleCode \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                new FindCommand(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"CS1231S\", \"CS2100\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand expectedFindCommandByDeadline \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                new FindCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(\"1200\", \"24-10-2020\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand expectedFindCommandByPriority \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                new FindCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(\"HIGH\", \"low\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \" n/CS1231S Homework\", expectedFindCommandByName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \" mod/CS1231S CS2100\", expectedFindCommandByModuleCode);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \" d/1200 24-10-2020\", expectedFindCommandByDeadline);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \" p/HIGH low\", expectedFindCommandByPriority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 7,
      "andreatanky": 56,
      "minhhhnguyen2000": 1,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \" mod/\", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ListCommand(Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \"25\", new ListCommand(Index.fromZeroBased(25)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseSuccess(parser, \"50\", new ListCommand(Index.fromZeroBased(50)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"-1\", ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"0\", ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"51\", ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"a\", ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"%\", ListCommand.MESSAGE_INDEX_NOT_IN_RANGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "andreatanky": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"99-99-9999 9999\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"31-10-2020 0000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(INDEX_FIRST_ASSIGNMENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(INDEX_FIRST_ASSIGNMENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time expectedDeadline \u003d new Time(VALID_DEADLINE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Time expectedDeadline \u003d new Time(VALID_DEADLINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsModuleCode() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String moduleCodeWithWhitespace \u003d WHITESPACE + VALID_MODULE_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(moduleCodeWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 11,
      "hyngkng": 3,
      "andreatanky": 13,
      "minhhhnguyen2000": 2,
      "-": 80,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PrioritizeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.assignment.Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.PrioritizeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class PrioritizeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrioritizeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private PrioritizeCommandParser parser \u003d new PrioritizeCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, PRIORITY_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PRIORITY_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"0\" + PRIORITY_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_HW, MESSAGE_INVALID_FORMAT); // not a priority"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        PrioritizeCommand expectedCommand \u003d new PrioritizeCommand(targetIndex, new Priority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ProductiveNusParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.DeadlineContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ProductiveNusParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ProductiveNusParser parser \u003d new ProductiveNusParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AssignmentUtil.getAddCommand(assignment));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(new AddCommand(assignment), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ASSIGNMENT.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cIndex\u003e assignmentIndexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignmentIndexToDelete.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(new DeleteCommand(assignmentIndexToDelete), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(assignment).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + INDEX_FIRST_ASSIGNMENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + AssignmentUtil.getEditAssignmentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ASSIGNMENT, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(\"Assignment\", \"homework\", \"lab\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cString\u003e moduleCodeKeywords \u003d Arrays.asList(\"CS2100\", \"CS2103T\", \"MA1101R\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cString\u003e deadlineKeywords \u003d Arrays.asList(\"23-10-2020\", \"1200\", \"10-11-2021\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        List\u003cString\u003e priorityKeywords \u003d Arrays.asList(\"HIGH\", \"LOW\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findByNames \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + nameKeywords.stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findByModuleCodes \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_MODULE_CODE + moduleCodeKeywords.stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findByDeadlines \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_DEADLINE + deadlineKeywords.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        FindCommand findByPriorities \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_PRIORITY + priorityKeywords.stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(nameKeywords)), findByNames);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(new FindCommand(new ModuleCodeContainsKeywordsPredicate(moduleCodeKeywords)), findByModuleCodes);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(new FindCommand(new DeadlineContainsKeywordsPredicate(deadlineKeywords)), findByDeadlines);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(new FindCommand(new PriorityContainsKeywordsPredicate(priorityKeywords)), findByPriorities);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_HELP), ()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_UNKNOWN_COMMAND, HelpCommand.MESSAGE_HELP);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                expectedMessage, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 29,
      "andreatanky": 29,
      "minhhhnguyen2000": 9,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * outside of the RemindCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * same path through the RemindCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private RemindCommandParser parser \u003d new RemindCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_validArgsSingleInput_returnsRemindCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e parsedIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        parsedIndex.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemindCommand(parsedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_validArgsMultipleInput_returnsRemindCommand() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cIndex\u003e parsedIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        parsedIndexes.add(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        parsedIndexes.add(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new RemindCommand(parsedIndexes));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 40,
      "hyngkng": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UndoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UndoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * outside of the DoneCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * same path through the UndoneCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class UndoneCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private UndoneCommandParser parser \u003d new UndoneCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_validArgs_returnsUndoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UndoneCommand(INDEX_FIRST_ASSIGNMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 6,
      "printinghelloworld": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnprioritizeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnprioritizeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * outside of the Unprioritize code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * same path through the UnprioritizeCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UnprioritizeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private UnprioritizeCommandParser parser \u003d new UnprioritizeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_validArgs_returnsUnprioritizeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UnprioritizeCommand(INDEX_FIRST_ASSIGNMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                UnprioritizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnremindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.UnremindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * outside of the RemindCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * same path through the UnremindCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class UnremindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private UnremindCommandParser parser \u003d new UnremindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_validArgs_returnsUnremindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UnremindCommand(INDEX_FIRST_ASSIGNMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnremindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 26,
      "hyngkng": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.ProductiveNusBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(new ProductiveNus(), new ProductiveNus(modelManager.getProductiveNus()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        userPrefs.setProductiveNusFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        userPrefs.setProductiveNusFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setProductiveNusFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNusFilePath_validPath_setsProductiveNusFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        modelManager.setProductiveNusFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(path, modelManager.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAssignment(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void hasAssignment_assignmentNotInProductiveNus_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(modelManager.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void hasAssignment_assignmentInProductiveNus_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(modelManager.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAssignmentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void getRemindedAssignmentsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getRemindedAssignmentsList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus productiveNus \u003d new ProductiveNusBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withAssignment(CS1231S_HW).withAssignment(CS2103T_TUT).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus differentProductiveNus \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        modelManager \u003d new ModelManager(productiveNus, userPrefs, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(productiveNus, userPrefs, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different productiveNus -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentProductiveNus, userPrefs, null)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String[] keywords \u003d CS1231S_HW.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.updateFilteredAssignmentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentProductiveNus, userPrefs, null)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        differentUserPrefs.setProductiveNusFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(productiveNus, differentUserPrefs, null)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 24,
      "minhhhnguyen2000": 12,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ProductiveNusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ProductiveNusTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ProductiveNus productiveNus \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(Collections.emptyList(), productiveNus.getAssignmentList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e productiveNus.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void resetData_withValidReadOnlyProductiveNus_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus newData \u003d getTypicalProductiveNus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(newData, productiveNus);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void resetData_withDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // Two assignments with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedCs2103Lab \u003d new AssignmentBuilder(CS2103T_TUT).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        List\u003cAssignment\u003e newAssignments \u003d Arrays.asList(CS2103T_TUT, editedCs2103Lab);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cLesson\u003e lessonList \u003d Arrays.asList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNusStub newData \u003d new ProductiveNusStub(newAssignments, lessonList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e productiveNus.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e productiveNus.hasAssignment(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void hasAssignment_assignmentNotInProductiveNus_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(productiveNus.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void hasAssignment_assignmentInProductiveNus_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(productiveNus.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // test fail because module code is different"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void hasAssignment_assignmentWithDifferentIdentityFieldsInProductiveNusk_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedCs1231sHw \u003d new AssignmentBuilder(CS1231S_HW)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(productiveNus.hasAssignment(editedCs1231sHw));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e productiveNus.getAssignmentList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * A stub ReadOnlyProductiveNus whose assignments list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static class ProductiveNusStub implements ReadOnlyProductiveNus {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        private final ObservableList\u003cAssignment\u003e assignments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNusStub(Collection\u003cAssignment\u003e assignments, Collection\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            this.assignments.setAll(assignments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            this.lessons.setAll(lessons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return assignments;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 44,
      "andreatanky": 6,
      "minhhhnguyen2000": 9,
      "-": 58,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setProductiveNusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setProductiveNusFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.QUIZ;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void isSameAssignment() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(HW));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_HW)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void isAlreadyReminded() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // new assignment created -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment newAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(newAssignment.isReminded());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // assignment set to have reminders -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment homeworkCopy \u003d new AssignmentBuilder(HW).withRemindersSet().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(homeworkCopy.isReminded());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // assignment already has reminders set -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(QUIZ.isReminded());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different name -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment editedQuiz \u003d new AssignmentBuilder(QUIZ).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different deadline -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        editedQuiz \u003d new AssignmentBuilder(QUIZ).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different address -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        editedQuiz \u003d new AssignmentBuilder(QUIZ).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment hwCopy \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.equals(hwCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.equals(HW));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(5));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(LAB));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedHw \u003d new AssignmentBuilder(HW).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 26,
      "hyngkng": 9,
      "minhhhnguyen2000": 67,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .singletonList(\"CS1231S\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS1231S\", \"Homework\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2106\", \"Lab\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS4234 Lab\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Cs1231s\", \"HOmEwOrK\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2106\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Keywords match deadline and module code, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").withDeadline(\"20-02-2020 2002\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withModuleCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "minhhhnguyen2000": 14,
      "-": 58,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/ScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalTime.EARLY_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalTime.LATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Schedule(null, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Schedule(LATE_TIME, EARLY_TIME));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void isValidSchedule() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null schedule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Schedule.isValidSchedule(true, null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // invalid schedules"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(Schedule.isValidSchedule(false, new Time(\"30-04-2020 1800\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                null)); // no schedule but start time is present"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(Schedule.isValidSchedule(false, null,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new Time(\"30-04-2020 1800\"))); // no schedule but end time is present"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(Schedule.isValidSchedule(false, new Time(\"30-04-2020 1800\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new Time(\"30-04-2020 1800\"))); // no schedule but start time and end time are present"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(Schedule.isValidSchedule(true, new Time(\"30-04-2020 1800\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new Time(\"30-04-2020 1759\"))); // end time is before start time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // valid schedules"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(Schedule.isValidSchedule(false, null, null)); // no schedule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(Schedule.isValidSchedule(true, new Time(\"29-04-2020 1800\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new Time(\"30-04-2020 1800\"))); // valid schedule with start time before end time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(Schedule.isValidSchedule(true, new Time(\"30-04-2020 1800\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new Time(\"30-04-2020 1800\"))); // valid schedule with start time equals end time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(Schedule.isValidSchedule(true, new Time(\"20-01-2001 0000\"), new Time(\"20-01-2030 2359\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/UniqueAssignmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UniqueAssignmentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final UniqueAssignmentList uniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(uniqueAssignmentList.contains(HW));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(HW));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedHW \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(editedHW));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add_duplicateAssignment_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.add(HW));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_nullTargetAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignment(null, HW));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_nullEditedAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_targetAssignmentNotInList_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, HW));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentIsSameAssignment_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, HW);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedHW \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, editedHW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(editedHW);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, LAB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasNonUniqueIdentity_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, LAB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.remove(HW));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_existingAssignment_removesAssignment() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.remove(HW);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_nullUniqueAssignmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .setAssignments((UniqueAssignmentList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_uniqueAssignmentList_replacesOwnListWithProvidedUniqueAssignmentList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignments(expectedUniqueAssignmentList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignments((List\u003cAssignment\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d Collections.singletonList(LAB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignments(assignmentList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_listWithDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e listWithDuplicateAssignments \u003d Arrays.asList(HW, HW);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .setAssignments(listWithDuplicateAssignments));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            -\u003e uniqueAssignmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 8,
      "minhhhnguyen2000": 159,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(LECTURE.isSameLesson(LECTURE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different time and moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson editedLecture \u003d new LessonBuilder(LECTURE).withTime(VALID_TIME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        editedLecture \u003d new LessonBuilder(LECTURE).withName(VALID_NAME).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        editedLecture \u003d new LessonBuilder(LECTURE).withEndTime(VALID_END_TIME).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/UniqueLessonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UniqueLessonListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final UniqueLessonList uniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(uniqueLessonList.contains(LECTURE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(uniqueLessonList.contains(LECTURE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonWithDifferentIdentity_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson editedLecture \u003d new LessonBuilder(LECTURE).withName(VALID_NAME).withTime(VALID_TIME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(uniqueLessonList.contains(editedLecture));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add_duplicateLesson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e uniqueLessonList.add(LECTURE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.remove(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_lessonDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e uniqueLessonList.remove(LECTURE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_existingLesson_removesLesson() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.remove(LECTURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UniqueLessonList expectedUniquePersonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueLessonList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"C2300\")); // begins with one alphabet"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"ABCD1000\")); // begins with more than 3 alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"GER10\")); // only has 2 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"ABC10000\")); // has 5 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2040S\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \"CS2101\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "andreatanky": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time((String) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidDeadline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // invalid deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"0000\")); // time only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"deadline\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020\")); // date only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"2a-02-2O2O aa00\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"2*-02-2O2O #a00\")); // special characters within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01- 01-2020 1800\")); // spaces within date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 18 00\")); // spaces within time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"00-00-0000 0000\")); // all zeros"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid day of month (boundary values)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"30-02-2020 1800\")); // invalid day of month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"31-02-2020 1800\")); // invalid day of month"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"00-02-2020 1800\")); // invalid day of month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid month (boundary values)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-00-2020 1800\")); // invalid month"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-13-2020 1800\")); // invalid month"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-99999 1800\")); // invalid year"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid hours (boundary values)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 2400\")); // invalid hour"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 999\")); // invalid hour"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid minutes (boundary values)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 1860\")); // invalid minute"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 1899\")); // invalid minute"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Invalid formats"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"2020-01-01 1800\")); // (\"uuuu-MM-dd HHmm\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"04-30-2020 1800\")); // (\"MM-dd-uuuu HHmm\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"1-01-2020 1800\")); // (\"d-MM-uuuu HHmm\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-1-2020 1800\")); // (\"dd-M-uuuu HHmm\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-20 1800\")); // (\"dd-MM-y HHmm\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-20 18:00\")); // (\"dd-MM-y HH:mm\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Time.isValidTime(\"01-01-2020 06:00 PM\")); // (\"dd-MM-uuuu hh:mm a\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // valid deadline dates and time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"01-12-2020 2359\")); // boundary value of day of month"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"29-12-2020 2359\")); // boundary value of day of month"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"30-12-2020 2359\")); // boundary value of day of month"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 2359\")); // boundary value of day of month"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 2359\")); // boundary value of month"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-01-2020 2359\")); // boundary value of month"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertTrue(Time.isValidTime(\"30-04-2020 1800\")); // exactly of format \"dd-MM-uuuu HHmm\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 2359\")); // boundary value of minute"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 2300\")); // boundary value of minute"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 2359\")); // boundary value of hour"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Time.isValidTime(\"31-12-2020 0059\")); // boundary value of hour"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 37,
      "printinghelloworld": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAssignment.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class JsonAdaptedAssignmentTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Tutori@l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"00-00-0000 2400\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String INVALID_SUGGESTED_START_TIME \u003d \"00-12-2000 2525\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String INVALID_SUGGESTED_END_TIME \u003d \"12-00-3000 2359\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_NAME \u003d CS2103T_TUT.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_DEADLINE \u003d CS2103T_TUT.getDeadline().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d CS2103T_TUT.getModuleCode().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final boolean VALID_IS_REMINDED \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final boolean VALID_IS_SCHEDULED \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final boolean VALID_NOT_SCHEDULED \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_SUGGESTED_START_TIME \u003d \"27-03-2000 0505\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_SUGGESTED_END_TIME \u003d \"12-12-2020 2359\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private static final boolean VALID_IS_MARKED_DONE \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String NO_PRIORITY \u003d \"NONE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void toModelType_validAssignmentDetails_returnsAssignment() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(CS2103T_TUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(CS2103T_TUT, assignment.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new JsonAdaptedAssignment(INVALID_NAME, VALID_DEADLINE, VALID_MODULE_CODE, VALID_IS_REMINDED,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME, NO_PRIORITY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                        VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(null, VALID_DEADLINE, VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                VALID_IS_REMINDED, VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                NO_PRIORITY, VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_NAME, INVALID_DEADLINE, VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                VALID_IS_REMINDED, VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                NO_PRIORITY, VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_NAME, null, VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                VALID_IS_REMINDED, VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                NO_PRIORITY, VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_NAME, VALID_DEADLINE, INVALID_MODULE_CODE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                VALID_IS_REMINDED, VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                NO_PRIORITY, VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_nullModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_NAME, VALID_DEADLINE, null,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                VALID_IS_REMINDED, VALID_IS_SCHEDULED, VALID_SUGGESTED_START_TIME, VALID_SUGGESTED_END_TIME,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                NO_PRIORITY, VALID_IS_MARKED_DONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 6,
      "hyngkng": 15,
      "andreatanky": 3,
      "minhhhnguyen2000": 27,
      "-": 31,
      "printinghelloworld": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonProductiveNusStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.READ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.SLIDE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class JsonProductiveNusStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonProductiveNusStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void readProductiveNus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readProductiveNus(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyProductiveNus\u003e readProductiveNus(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new JsonProductiveNusStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .readProductiveNus(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(readProductiveNus(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProductiveNus(\"notJsonFormatProductiveNus.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void readProductiveNus_invalidAssignmentProductiveNus_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProductiveNus(\"invalidAssignmentProductiveNus.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void readProductiveNus_invalidAndValidAssignmentProductiveNus_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                readProductiveNus(\"invalidAndValidAssignmentProductiveNus.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void readAndSaveProductiveNus_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempProductiveNus.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus original \u003d getTypicalProductiveNus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonProductiveNusStorage jsonProductiveNusStorage \u003d new JsonProductiveNusStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        jsonProductiveNusStorage.saveProductiveNus(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ReadOnlyProductiveNus readBack \u003d jsonProductiveNusStorage.readProductiveNus(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(original, new ProductiveNus(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        original.addAssignment(READ);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        original.removeAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        jsonProductiveNusStorage.saveProductiveNus(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        readBack \u003d jsonProductiveNusStorage.readProductiveNus(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(original, new ProductiveNus(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        original.addAssignment(SLIDE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        jsonProductiveNusStorage.saveProductiveNus(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        readBack \u003d jsonProductiveNusStorage.readProductiveNus().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(original, new ProductiveNus(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus_nullAProductiveNus_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProductiveNus(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Saves {@code ProductiveNus} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private void saveProductiveNus(ReadOnlyProductiveNus productiveNus, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            new JsonProductiveNusStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                    .saveProductiveNus(productiveNus, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void saveProductiveNus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProductiveNus(new ProductiveNus(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableProductiveNusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.TypicalAssignments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class JsonSerializableProductiveNusTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableProductiveNusTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Path TYPICAL_ASSIGNMENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .resolve(\"typicalAssignmentsProductiveNus.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final Path INVALID_ASSIGNMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAssignmentProductiveNus.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Path DUPLICATE_ASSIGNMENT_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .resolve(\"duplicateAssignmentProductiveNus.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_typicalAssignmentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonSerializableProductiveNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ASSIGNMENTS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                JsonSerializableProductiveNus.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus productiveNusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus typicalAssignmentsProductiveNus \u003d TypicalAssignments.getTypicalProductiveNus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(productiveNusFromFile, typicalAssignmentsProductiveNus);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidAssignmentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonSerializableProductiveNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ASSIGNMENT_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                JsonSerializableProductiveNus.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_duplicateAssignments_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonSerializableProductiveNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ASSIGNMENT_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                JsonSerializableProductiveNus.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableProductiveNus.MESSAGE_DUPLICATE_ASSIGNMENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 28,
      "hyngkng": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        userPrefs.setProductiveNusFilePath(Paths.get(\"productivenus.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalProductiveNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ReadOnlyProductiveNus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JsonProductiveNusStorage productiveNusStorage \u003d new JsonProductiveNusStorage(getTempFilePath(\"pn\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        storageManager \u003d new StorageManager(productiveNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void productiveNusReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "         * {@link JsonProductiveNusStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonProductiveNusStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus original \u003d getTypicalProductiveNus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        storageManager.saveProductiveNus(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ReadOnlyProductiveNus retrieved \u003d storageManager.readProductiveNus().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(original, new ProductiveNus(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void getProductiveNusFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertNotNull(storageManager.getProductiveNusFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Done;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class to help with building Assignment objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS1231S Homework\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"01-02-2020 1800\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final boolean DEFAULT_REMIND \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Time DEFAULT_SUGGESTED_START_TIME \u003d new Time(\"01-02-2020 1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Time DEFAULT_SUGGESTED_END_TIME \u003d new Time(\"01-02-2020 2100\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"None\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final boolean DEFAULT_DONE \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Time deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Remind remind;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Done done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        deadline \u003d new Time(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        remind \u003d new Remind(DEFAULT_REMIND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        schedule \u003d new Schedule(DEFAULT_SUGGESTED_START_TIME, DEFAULT_SUGGESTED_END_TIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        done \u003d new Done(DEFAULT_DONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Initializes the AssignmentBuilder with the data of {@code assignmentToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder(Assignment assignmentToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name \u003d assignmentToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline \u003d assignmentToCopy.getDeadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode \u003d assignmentToCopy.getModuleCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remind \u003d assignmentToCopy.getRemind();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        schedule \u003d assignmentToCopy.getSchedule();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        priority \u003d assignmentToCopy.getPriority();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        done \u003d assignmentToCopy.getDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Name} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Sets the deadline of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.deadline \u003d new Time(deadline);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Sets the {@code Remind} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public AssignmentBuilder withRemindersSet() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.remind \u003d new Remind().setReminder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Schedule} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public AssignmentBuilder withSchedule(Time suggestedStartTime, Time suggestedEndTime) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.schedule \u003d new Schedule(suggestedStartTime, suggestedEndTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Sets the {@code Done} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public AssignmentBuilder withDoneStatusSet() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.done \u003d new Done().markAsDone();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Sets the {@code Priority} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public AssignmentBuilder withPriority(String priorityLevel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.priority \u003d new Priority(priorityLevel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Assignment build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        return new Assignment(name, deadline, moduleCode, remind, schedule, priority, done);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 10,
      "hyngkng": 12,
      "minhhhnguyen2000": 70,
      "printinghelloworld": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class for Assignment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an add command string for adding the {@code assignment}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getAddCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getAssignmentDetails(assignment);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the part of command string for the given {@code assignment}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getAssignmentDetails(Assignment assignment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_NAME + assignment.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_DEADLINE + assignment.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + assignment.getModuleCode().moduleCode + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the part of command string for the given {@code EditAssignmentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getEditAssignmentDescriptorDetails(EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE).append(deadline.value).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        descriptor.getModuleCode().ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .append(moduleCode.moduleCode).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "hyngkng": 7,
      "andreatanky": 2,
      "minhhhnguyen2000": 12,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAssignmentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class to help with building EditAssignmentDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class EditAssignmentDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private EditCommand.EditAssignmentDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder(EditCommand.EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditAssignmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an {@code EditAssignmentDescriptor} with fields containing {@code assignment}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder(Assignment assignment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setName(assignment.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setDeadline(assignment.getDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setModuleCode(assignment.getModuleCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "     * Sets the deadline of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        descriptor.setDeadline(new Time(deadline));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditCommand.EditAssignmentDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "minhhhnguyen2000": 53,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.ModuleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2103T Lecture\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"01-01-2020 1200\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"01-01-2020 1400\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a {@code LessonBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        endTime \u003d new Time(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        time \u003d lessonToCopy.getTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        endTime \u003d lessonToCopy.getEndTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCode \u003d lessonToCopy.getModuleCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Time} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withTime(String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code endTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Lesson(name, time, endTime, moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 71,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProductiveNusBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A utility class to help with building ProductiveNus objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " *     {@code ProductiveNus pn \u003d new ProductiveNusBuilder().withAssignment(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ProductiveNusBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ProductiveNus productiveNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNusBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNusBuilder(ProductiveNus productiveNus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.productiveNus \u003d productiveNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds a new {@code Assignment} to the {@code ProductiveNus} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNusBuilder withAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        productiveNus.addAssignment(assignment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ProductiveNus build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return productiveNus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the middle index of the assignment in the {@code model}\u0027s assignment list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAssignmentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the last index of the assignment in the {@code model}\u0027s assignment list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the assignment in the {@code model}\u0027s assignment list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static Assignment getAssignment(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getFilteredAssignmentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 7,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TimetableDataBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableDataBuilder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final int DEFAULT_SEMESTER \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] DEFAULT_MODULE_CODE_ARRAY \u003d {\"CS2100\", \"CS2105\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] DEFAULT_MODULE_LESSON_ARRAY \u003d {\"TUT:01,LEC:2\", \"LEC:1,TUT:14\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleCodeArray;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleLessonArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a {@code TimetableDataBuilder} with the default details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d DEFAULT_SEMESTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCodeArray \u003d DEFAULT_MODULE_CODE_ARRAY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleLessonArray \u003d DEFAULT_MODULE_LESSON_ARRAY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes the TimetableDataBuilder with the data of {@code dataToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder(TimetableData dataToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d dataToCopy.getSemester();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCodeArray \u003d dataToCopy.getModuleCodeArray();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleLessonArray \u003d dataToCopy.getModuleLessonArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withSemester(int semester) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Time} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withModuleCodeArray(String[] moduleCodeArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCodeArray \u003d moduleCodeArray;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code endTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withModuleLessonArray(String[] moduleLessonArray) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleLessonArray \u003d moduleLessonArray;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableData build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new TimetableData(semester, moduleCodeArray, moduleLessonArray);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAssignments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.ProductiveNus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class containing a list of {@code Assignment} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TypicalAssignments {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS1231S_HW \u003d new AssignmentBuilder().withName(\"CS1231S Homework\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(\"CS1231S\").withDeadline(\"01-01-2020 1800\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2103T_TUT \u003d new AssignmentBuilder().withName(\"CS2103T Tutorial\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(\"CS2103T\").withDeadline(\"02-03-2020 2359\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2106_LAB \u003d new AssignmentBuilder().withName(\"CS2106 Lab\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"12-12-2020 1200\").withModuleCode(\"CS2106\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2106_TUTORIAL_QUIZ \u003d new AssignmentBuilder().withName(\"CS2102 Tutorial Quiz\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"03-03-2020 0300\").withModuleCode(\"CS2102\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment IS1103_MISSION \u003d new AssignmentBuilder().withName(\"IS1103 Mission\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"12-10-2020 1900\").withModuleCode(\"IS1103\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment PEER_REVIEW \u003d new AssignmentBuilder().withName(\"Peer review\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"10-10-2020 1700\").withModuleCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment ORAL_PRESENTATION \u003d new AssignmentBuilder().withName(\"Oral presentation\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"03-12-2020 0400\").withModuleCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final Assignment MA1101R_TUTORIAL_ONE \u003d new AssignmentBuilder().withName(\"MA1101R Tut 1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            .withDeadline(\"03-12-2020 0400\").withModuleCode(\"MA1101R\").withPriority(\"HIGH\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final Assignment MA1101R_TUTORIAL_TWO \u003d new AssignmentBuilder().withName(\"MA1101R Tut 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            .withDeadline(\"03-12-2020 0400\").withModuleCode(\"MA1101R\").withPriority(\"low\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment READ \u003d new AssignmentBuilder().withName(\"Read notes\").withDeadline(\"01-01-2020 0100\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withModuleCode(\"CS3244\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment SLIDE \u003d new AssignmentBuilder().withName(\"Prepare slide\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"02-02-2020 0220\").withModuleCode(\"GER1000\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Manually added - Assignment with reminders set"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final Assignment QUIZ \u003d new AssignmentBuilder().withName(\"Prepare for quiz\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            .withDeadline(\"10-10-2020 2000\").withModuleCode(\"ST2334\").withRemindersSet().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    // Manually added - Assignment\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment HW \u003d new AssignmentBuilder().withName(VALID_NAME_HW).withDeadline(VALID_DEADLINE_HW)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment LAB \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Assignment LAB_REMIND \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).withRemindersSet().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Assignment LAB_PRIORITY \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withPriority(Priority.HIGH_PRIORITY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Assignment LAB_PRIORITY_REMIND \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).withPriority(Priority.HIGH_PRIORITY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withRemindersSet().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private TypicalAssignments() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns an {@code ProductiveNus} with all the typical assignments."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static ProductiveNus getTypicalProductiveNus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ProductiveNus pn \u003d new ProductiveNus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (Assignment assignment : getTypicalAssignments()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            pn.addAssignment(assignment);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return pn;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static List\u003cAssignment\u003e getTypicalAssignments() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1231S_HW, CS2103T_TUT, CS2106_LAB, CS2106_TUTORIAL_QUIZ,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                IS1103_MISSION, PEER_REVIEW, ORAL_PRESENTATION, MA1101R_TUTORIAL_ONE, MA1101R_TUTORIAL_TWO));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 15,
      "andreatanky": 5,
      "minhhhnguyen2000": 47,
      "printinghelloworld": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpectedHours.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TypicalExpectedHours {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final int EXPECTED_HOUR_MIN \u003d 1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final int EXPECTED_HOUR_MAX \u003d 5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_FIRST_ASSIGNMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_SECOND_ASSIGNMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_THIRD_ASSIGNMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson LECTURE \u003d new LessonBuilder().withName(\"Generic Lecture\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 1200\").withEndTime(\"01-01-2020 1400\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_TUT \u003d new LessonBuilder().withName(\"CS2100 Tutorial\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 0800\").withEndTime(\"01-01-2020 0900\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_LEC_1 \u003d new LessonBuilder().withName(\"CS2100 Lecture\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 1600\").withEndTime(\"01-01-2020 1800\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_LEC_2 \u003d new LessonBuilder().withName(\"CS2100 Lecture\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 0900\").withEndTime(\"01-01-2020 1000\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_NAME \u003d \"Generic Tutorial\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_TIME \u003d \"30-12-2019 1200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_END_TIME \u003d \"30-12-2019 1400\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTime.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.task.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TypicalTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Time EARLY_TIME \u003d new Time(\"01-01-2020 0000\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Time LATE_TIME \u003d new Time(\"30-12-2020 2359\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTimetableData.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TypicalTimetableData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final int VALID_SEMESTER \u003d 2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_CODE_ARRAY \u003d {\"EC1301\", \"CS2103T\"};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_LESSON_ARRAY \u003d {\"TUT:S28,LEC:1\", \"LEC:G16\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final int VALID_SEMESTER_2 \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_CODE_ARRAY_2 \u003d {\"CS2100\", \"EC1301\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_LESSON_ARRAY_2 \u003d {\"TUT:01\", \"TUT:S28\"};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final TimetableData VALID_DATA_2 \u003d new TimetableDataBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withSemester(VALID_SEMESTER_2)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCodeArray(VALID_MODULE_CODE_ARRAY_2)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleLessonArray(VALID_MODULE_LESSON_ARRAY_2)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] typicalModuleCodeArray \u003d {\"CS2100\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] typicalModuleLessonArray \u003d {\"TUT:01,LEC:1\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final TimetableData DATA \u003d new TimetableDataBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withSemester(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCodeArray(typicalModuleCodeArray)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleLessonArray(typicalModuleLessonArray)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUrls.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TypicalUrls {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_URL \u003d \"https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01\u0026EC1301\u003dTUT:S28\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/timetable/TimetableDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_MODULE_CODE_ARRAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_MODULE_LESSON_ARRAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.TimetableDataBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableDataTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void isSameTimetableData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(DATA.isSameTimetableData(DATA));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(DATA.isSameTimetableData(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different semester and arrays -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        TimetableData editedData \u003d new TimetableDataBuilder(DATA)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withSemester(VALID_SEMESTER)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCodeArray(VALID_MODULE_CODE_ARRAY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleLessonArray(VALID_MODULE_LESSON_ARRAY)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(DATA.isSameTimetableData(editedData));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/timetable/TimetableUrlParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_DATA_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalUrls.VALID_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.timetable.TimetableUrlParser.parseTimetableUrl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableUrlParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void parseTimetableUrlTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        TimetableData data \u003d parseTimetableUrl(VALID_URL);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(data.isSameTimetableData(VALID_DATA_2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(data.isSameTimetableData(DATA));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 19
    }
  }
]
