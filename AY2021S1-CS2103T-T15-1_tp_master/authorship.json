[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "# HairStyleX"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-1/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* This is a desktop application designed for budding hair salons. While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Today, many budding hair salons are still using pen and paper to keep track of appointments, client details, hairdresser details, and store supplies."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " While suitable for small client base, this not sustainable in the long run as the client base increases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " Our salon management application is designed to make this process much easier for them."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* The features we provide include:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Book and cancel appointments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Store client information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Store hairstylist information"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Keep track of current stock of supplies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-t15-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-t15-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-t15-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 22,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[[Visit our homepage](https://ay2021s1-cs2103t-t15-1.github.io/tp/)]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Tan Yu Li, James"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cimg src\u003d\"images/iamjamestan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[[github](https://github.com/iamjamestan)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[[portfolio](team/iamjamestan.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Role: Project Member"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### Lim Dewen Aloysius"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003cimg src\u003d\"images/pooty3.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "[[github](http://github.com/pooty3)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "[[portfolio](team/pooty3.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Role: Team Member"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "### Zhang Yifan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cimg src\u003d\"images/theyifan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "[[github](http://github.com/theyifan)] [[portfolio](team/theyifan.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Role: Team Member"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "### Yao Yuan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cimg src\u003d\"images/ya0-yuan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "[[github](http://github.com/ya0-yuan)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "[[portfolio](team/ya0-yuan.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Role: Team member"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "### Toh Zhen Yu, Nicholas"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "\u003cimg src\u003d\"images/nicktohzyu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "[[github](http://github.com/nicktohzyu)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "[[portfolio](team/nicktohzyu.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Responsibilities: yes"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 9,
      "pooty3": 3,
      "nicktohzyu": 5,
      "theyifan": 4,
      "ya0-yuan": 5,
      "-": 33
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete_client 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete_client 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClient\u003e`, `ObservableList\u003cHairdresser\u003e`, `ObservableList\u003cAppointment\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* can save the HairStyleX data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "### Command Aliasing feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": "This feature allows users to define their own aliases for commands that make it easier for them to type."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": "![Structure of the Alias Command Feature](images/CommandAliasClassDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pooty3"
        },
        "content": "This shows the general structure used to implement the Command Alias."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* `Command Word` - This is an enumeration that corresponds to each command in the application."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* `CommandAlias` - This is a class which stores the hashset of strings that correspond to a particular word. This strings "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pooty3"
        },
        "content": "are the command word\u0027s aliases."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* `CommandAliasSet` - This is a singleton class which stores all the commandAlias in the application."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pooty3"
        },
        "content": "It is responsible for finding the command word associated with a given input string and to validate whether the "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pooty3"
        },
        "content": "new aliases are allowed to be saved into the system."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Steps: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pooty3"
        },
        "content": "1. User input a command to the system. It is parsed regularly as before. The string representing the command is extracted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pooty3"
        },
        "content": "2. `AddressBookParser` will pass the string to `CommandAliasSet` to retrieve the corresponding `CommandWord`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pooty3"
        },
        "content": "3. Then, the `CommandWord` is processed as usual."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Steps when adding a new alias:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pooty3"
        },
        "content": "1. User inputs an `add_alias` command together with the new alias, and the command it is associated with."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pooty3"
        },
        "content": "2. Upon execution, `CommndAliasSet` will do validation to check if the validity of the new alias. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pooty3"
        },
        "content": "3. Finally, `CommandAliasSet` adds the new alias to the `CommandAlias` it is matched to."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pooty3"
        },
        "content": "#### Saving the Alias"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pooty3"
        },
        "content": "`JsonAdapatedAdressBook` saves `CommandAliasSet` as a `JsonAdapatedCommandAliasSet` together with its `JsonAdaptedAlias`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Upon starting the application,  `JsonAdaptedAddressBook` is used to set the singleton `CommandAliasSet`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": "### Hairdresser Management Features"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### Overview of implementation for Hairdresser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `Hairdresser` - This is an entity class to store information regarding an appointment, such as name, phone, email, gender, title, specialisation."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `Specialisation` - This is class containing an enum which represents the specialisations of a hairdresser, which includes `Color`, `Perm`, `HairExtension`, `Styling`, `HairConditioning`, `Straightening`, `ScalpTreatment`, `HairLossTreatment`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `HairdresserID` - This is a class which represents the unique ID of an appointment."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `UniqueHairdresserList` - This is a `UniqueEntityList` which represents all hairdressers. It ensures that no duplicates of hairdresser can be added and supports add, update, delete of hairdressers."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `JsonAdaptedHairdresser` - This class functions as an adapter between Appointment and the Storage layer. It specifies how to convert from an appointment object to a JSON representation and vice versa. It also serves as validation for correct data format when the save file is loaded."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `AddHairdresserCommandParser` - This class parses a user input string to a `HairdresserCommand` object and performs validation."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* `AddHairdresserCommand` - This contains `execute` method which interact with model to perform the add action."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### Add Hairdresser Feature"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": "##### Current implementation"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": "The `add_hairdresser` command allows the `LogicManager` to create a new hairdresser and add it to the list of hairdressers. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theyifan"
        },
        "content": "The following sequence shows the sequence when the add command is execute by the `LogicManager`:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theyifan"
        },
        "content": "![AddHairdresserSequenceDiagram](images/AddHairdresserSequenceDiagram.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theyifan"
        },
        "content": "From the diagram above:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. `LogicManager`’s `execute` is called when `add_hairdresser` is entered and it calls upon `parseCommand` of `AddressBookParser` to parse the command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theyifan"
        },
        "content": "2. `AddressBookParser` will initialize `AddHairdresserCommandParser` and invoke the method `parse` to further parse add hairdresser command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theyifan"
        },
        "content": "3. `parse` will be invoked and passed the parameters of the add hairdresser command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theyifan"
        },
        "content": "4. If all the arguments of `add_hairdresser` commands are valid, `AddHairdresserCommand` will be returned to the `LogicManager`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theyifan"
        },
        "content": "5. `LogicManger` will then call `execute` method of `AddHairdresserCommand`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theyifan"
        },
        "content": "6. `AddHairdresserCommand` will call `addHairdresser` passing `toAdd` as an argument to `Model` and returns a `result` to the `LogicManager`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theyifan"
        },
        "content": "7. `LogicManger` will then call `saveAddressBook` method of `Storage`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theyifan"
        },
        "content": "8. A `CommandResult` will be returned at the end."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "### Appointment feature"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "This feature represents an appointment between a hairdresser and a client. An appointment consists of a client and a hairdresser. If one of these persons are deleted, the reference will be replaced with a tombstone value indicating a deleted hairdresser/client. A client can have multiple appointments that do not clash, similarly for hairdressers. An appointment must also have a date, time, and status."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `Appointment` - This is an entity class to store information regarding an appointment, such as hairdresser, client, hairdresser ID, client ID, date, time and status."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                       "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `FutureAppointment` - This is an entity class which extends Appointment. This class ensures that a newly created appointment is always in the future compared to the system time."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `AppointmentStatus` - This is an enum which represents the status of an appointment, which can be `active`, `cancelled`, `completed`, or `missed`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `AppointmentID` - This is a class which represents the unique ID of an appointment."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `UniqueAppointmentList` - This is a `UniqueEntityList` which represents all appointments. It implements features including ensuring that no duplicate appointments can be added. It allows for clients or hairdressers to be replaced or deleted, and updates the relevant appointments."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "*`JsonAdaptedAppointment` - This class functions as an adapter between Appointment and the Storage layer. It specifies how to convert from an appointment object to a JSON representation and vice versa. It also serves as validation for correct data format when the save file is loaded."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "*`AddAppointmentCommandParser` - This class parses a user input string to an AppointmentCommand object. Validation for inputs that do not require access to the model is performed here.                                                                  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "*`AddAppointmentCommand` - This is where majority of the logic of the add appointment command is performed, when the `execute` method is called. It will access the model to ensure there is no duplicate appointment before adding the appointment to the model."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Steps:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. The user enters an add appointment command, the input is first validated by AddAppointmentCommandParser. Inputs that do not require access to the model is validated, for example validating the format of hairdresser ID, client ID, date, and time. It ensures that the date/time is valid and is in the future, but does not check whether the hairdresser/client ID corresponds to an actual hairdresser/client (this is validated when the command is executed). A new AddAppointmentCommand object is created."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. The Logic layer then executes the AddAppointmentCommand. This checks if the hairdresser/client ID corresponds to an actual hairdresser/client, and the appointment is checked against existing appointments in the model to ensure that there are no duplicates or clashes. The appointment object is then added to the model."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. The model adds the appointment to its internal list `UniqueAppointmentList`. This list is an `javafx.collections.ObservableList` and the UI layer is notified and updated through a `ListChangeListener`. This follows the observer pattern."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. The Logic layer will be notified that the model has been modified through an `InvalidationListener`. This triggers storing information to non-volatile memory using the Storage layer, and the process is detailed there."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "#### Proposed improvements"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. Currently, validation or updating of appointments based on client/hairdresser ID requires iterating through all appointments to check if they involve the relevant client/hairdresser. Hence this process is slow and runs in O(n) time. It can be improved by implementing two `HashMaps` of appointments keyed by `ClientId`/`HairdresserId`  respectively. This will allow for the search to be done in O(1) time. We did not implement this feature as it would introduce unnecessary complexity, and the current solution meets the non-functional requirements regarding performance."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. Currently, the order of appointments in the `UniqueAppointmentList` is not ordered by time. Hence, sorting appointments by appointment time requires O(n log(n)) time. By maintaining a `TreeMap` of appointments keyed by time, a list of appointments ordered by appointment time can be generated in O(n), while the next k appointments after a given appointment can be found in O(k log(n)) time. We did not implement this feature as it would introduce unnecessary complexity, and the current solution meets the non-functional requirements regarding performance."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### ID and ID Counter"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "To ensure that every entity within the same class can be distinguished from each other, we have implemented an auto incremental ID system that automatically assigns to a new ID to every entity upon creation."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### Reasons for Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Initially, we intended to follow the original AddressBook-3, where each `Person` would be identified by its shown index in the list shown in the GUI. However, we came to the realisation this approach would confuse the user during this scenario:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* When the user searches for an entity with filters, the filtered list would show indices that are not corresponding to the original list. As such, the user might erroneously key in the wrong index for his/her selected entity."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "To tackle this, we concluded that each entity should be identified by a unique ID within its own class, and that this should be displayed to the user and be the primary way of identifying entities for the purposes of editing, deleting, etc."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### Current Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "##### ID Class"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* The Model package contains an abstract Id class, which is essentially a wrapper for an integer `id` variable, along with a method used to verify the validity of the `id` and error messages to be shown."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* The classes AppointmentId, ClientId, and HairdresserId extend the abstract Id class, and reside in their respective packages"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "![IDClassDiagram](images/IDClassDiagram.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "##### ID Counter Class"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* To ensure that the IDs of each entity created are unique, a final class `IDCounter` is implemented. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* This class is a singleton, and only one instance can exist at any one time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* It consists of static attributes that keep track of the next ID to be generated for the respective entities, namely, Clients, Hairdressers, and Appointments."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "![IDCounterClassDiagram](images/IDCounterClassDiagram.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Alternative 1 (current implementation): Use 3 separate counters for `Client`s, `Hairdresser`s, `Appointment`s"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Pros: Good OOP Design. Error messages can be abstracted out in their respective ID classes"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Cons: Hassle to keep track of three separate counters, and repetitive to have three separate methods for these counters"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Alternative 2: Use 1 single counter for all entities. Every entity contains an ID instance."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Pros: Easy to implement, no repetitive code."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Cons: Bad OOP design. Error messages would be the same for IDs created in all three classes"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Given below is the example usage scenario that highlights the generation of a new ID instance when a new Client is created:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. The user attempts to create a new client by entering the respective fields in the appropriate format, such as `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. The AddClientCommandParser extracts the relevant fields from the user input and creates a new Client instance using the Client constructor."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. The Client constructor calls IDCounter to generate a new ClientId instance."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. The returned ClientId is stored in this client object, which will be used to create AddClientCommand."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "![IDSequenceDiagram](images/IDSequenceDiagram.png)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "### Find Feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Since now all entities are categorized into different classes, we want to make sure each class can have their own search method to easily find an entity within a class or filter a list of entities."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### Reasons for implementation"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "The find appointment feature can be useful when scheduling a new appointment. By allowing the manager to check the availability of a certain hairdresser,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "or filter out a list of all appointments in a certain day, it avoids creating conflicting appointments and provides a more efficient way of scheduling appointments."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### Use cases"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. a hairdresser or a list of hairdressers can be filtered by their name"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "2. a client or a list of clients can be filtered by their name"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "2. an appointment or a list of appointments can be filtered by either hairdresser included, client included, or date."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### Usage Scenario"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Given below is the example usage scenario of finding a client:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "The `find_client` command allows the `LogicManager` to create one or a list of clients. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "The following sequence shows the sequence when the find command is execute by the `LogicManager`:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "![FindCommandSequenceDiagram](images/FindCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "From the diagram above:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. `LogicManager`’s `execute` is called when `find_client` is entered and it calls upon `parseCommand` of `AddressBookParser` to parse the command."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "2. `AddressBookParser` will initialize `FindClientCommandParser` and invoke the method `parse` to further parse find client command"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "3. `parse` will be invoked and passed the parameters of the find client command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "4. If all the arguments of `find_client` commands are valid, `FindClientCommand` will be returned to the `LogicManager`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "5. `LogicManger` will then call `execute` method of `FindClientCommand`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "6. `FindClientCommand` will call `updateFilteredClientList` passing `predicate` as an argument to `Model` and returns a `result` to the `LogicManager`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "7. `LogicManger` will then call `saveAddressBook` method of `Storage`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "8. A `CommandResult` will be returned at the end."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* managers for budding hair salons"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* has a growing number of hairstylists and clients"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* has a need to keep track of bookings, store supplies, stylist availability, and client information "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* has a desktop at the front desk"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Value proposition**: manage hairstylist, client and appointment information faster than the traditional pen and paper"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | new user                                   | see the instruction guide      | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | manager                                    | add a new hairdresser          |                                                                        |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | receptionist                               | add a new client               |                                   |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | manager                                    | edit a client/hairdresser      | keep my database updated |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | user                                       | exit the program               |          |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | manager                                    | find persons by name           | locate a person easily                                                 |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | receptionist                               | book appointments              |        |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "pooty3"
        },
        "content": "| `* * *`  | new user                                   | navigate the UI easily         | learn how to use the app quickly                                             |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(For all use cases below, the **System** is the `HairStyleX` application, and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(A `person` refers to either a `hairdresser` or a `client`. If a `person` is used in any of the use cases below,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "it means that the use case can be performed similarly on both a `hairdresser` and a `client`)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: Delete a person**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to list people"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX shows a list of people"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "4.  HairStyleX deletes the person"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * 3a1. HairStyleX shows an error message."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Use case: Add a person**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to add a specific person in the list"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX adds the person"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "3.  HairStyleX shows a success message"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* 1a. The input syntax is invalid."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * 1a1. HairStyleX shows an error message."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "          "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Use case: View people**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to view all people in the list"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX shows all people"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Use case: Edit Person**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to view all people in the list"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX shows all people"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "3.  User requests to edit specific person"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "4.  HairStyleX displays success message with updated person details"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Use case: Find Person**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to find all people whose name contains a specified `string`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX shows all people that has names that contain the specified `string`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* 2a. No people has names that contain that specified `string`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Use case: View help**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1.  User requests to view all valid commands"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "2.  HairStyleX shows all valid commands"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "pooty3"
        },
        "content": "**Use case: Add an alias*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "pooty3"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "pooty3"
        },
        "content": "1.  User requests to add an alias"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "pooty3"
        },
        "content": "2.  HairStyleX adds his requested alias"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "pooty3"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* 1a. The alias already exists."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    * 1a1. HairStyleX shows an error message."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "pooty3"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* 1b. The user does not specify the correct old alias."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    * 1b1. HairStyleX shows an error message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "pooty3"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "2.  Should be able to hold up to 1000 hairdressers and clients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "4.  There is no need for internet connection"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Hairdresser**: A hair stylist working in the salon"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Client**: A customer that visits the salon"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Person**: Can refer to either a hairdresser or a client"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Appointment**: A specified time when a hairdresser services a client."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 148,
      "pooty3": 57,
      "nicktohzyu": 30,
      "theyifan": 43,
      "ya0-yuan": 46,
      "-": 335
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "HairstyleX helps managers for budding neighborhood hair salons to manage clients, hairdressers, and appointments. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-secondary\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(Contributed by Tan Yu Li, James)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Welcome to the User Guide of HairStyleX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Today, many budding hair salons still resort to using pen and paper to keep track of their appointments, clients, and hairdressers due to their tight budget. While suitable for a small client base, this is not sustainable in the long run as their client base increases, since recording and searching for information manually would be slow and prone to human errors. Our salon management application **HairStyleX** is designed to make this process much easier for salon managers who have at least a laptop at their front desk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "This application uses a Command Line Interface (CLI); this means that you operate the application by typing commands into a Command Box. If you are fast at typing, you can manage your appointments faster than other Graphical User Interface (GUI) applications; GUI applications allow users to interact with the application through graphical icons such as buttons."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The purpose of this user guide is to provide you with an in-depth documentation on how to install and use our application. What are you waiting for? Head on to [Section 2, “Quick Start”](#2-quick-start) ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "To get started with using **HairStyleX**, you can follow these steps:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "1. Download the latest `HairStyleX.jar` from [here](https://github.com/AY2021S1-CS2103T-T15-1/tp/releases)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for **HairStyleX**."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the one shown in \u003cu\u003eFigure 1\u003c/u\u003e should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. At the top of the screen, type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Refer to [Section 3.2.3, \"Command Syntax and Usage\"](#323-command-syntax-and-usage) on how to use commands and [Section 4, \"Features\"](#4-features) below for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "*Figure 1. GUI of **HairStyleX***"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 3. About"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(Contributed by Tan Yu Li, James)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 3.1 Structure of this document"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "There are many things you can do with **HairStyleX**. Thus, we have structured this User Guide in such a way that you can easily find what you need. In the next subsection, [Section 3.2, “Reading this Document”](#32-reading-this-document), you will find useful tips on reading this document. It is then followed by [Section 4, “Features”](#4-features) where the four main features of **HairStyleX** and their commands are documented:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Client Management"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Hairdresser Management"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Appointment Management"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Alias Management"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 3.2 Reading this document"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Before moving on to the next section, you may want to familiarise yourself with some technical terms, symbols and syntax that are used throughout the document. In this subsection, you can find all the information you need to know when reading this document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 3.2.1 Terminology related to the Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The following figure shows the GUI of **HairStyleX**. It is annotated with the name of the GUI components."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "![UiAnnotation](images/UiAnnotation.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "*Figure 2. Annotated GUI of **HairStyleX***"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 3.2.2 General Symbols and Syntax"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The table below explains the general symbols and syntax used throughout the document."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Symbol/Syntax** | **Meaning**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "`command` | A light blue highlight (called a code-block markup) indicates that this is a command that can be typed into the command box and executed by the application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ":information_source: | An information icon indicates that the enclosed text are notes regarding this section."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ":warning: | A warning sign indicates that the enclosed text is important, and usually entails details about potential errors."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ":bulb: | A light bulb indicates that the enclosed text is a tip."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 3.2.3 Command Syntax and Usage"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Since **HairStyleX** is a CLI application, knowing how to use commands is very important. The following subsection will teach you how to read and use commands in **HairStyleX**. All commands in **HairStyleX** follow similar formats as described below and examples will be provided to help you understand their usage. Examples of commands and their formats will be written in `code-blocks`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The table below explains some important technical terms. An example will be provided to help you visualize these terms."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Technical Term** | **Meaning**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Command word | \tThe first word of a command. It determines the action that **HairStyleX** should perform."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Parameter | The word or group of words following the command word. They are values given to a command to perform the specified action."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Prefix | The letter(s) that at the start of a parameter. It distinguishes one parameter from another."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Breakdown:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Command Word - `add_hairdresser`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Parameters - `NAME`, `PHONE`, `EMAIL`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Prefix - `n/`, `p/`, `e/`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The following four points explain how you can use a command with the provided format. More examples will be provided for each command in [Section 4, “Features”](#4-features)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Words in the upper case are the parameters which are required."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Format given: `delete_client CLIENT_ID`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input: `delete_client 1`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Items in square brackets are optional."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Format given: `edit_client ID [n/NAME] [p/PHONE] [e/EMAIL] [g/GENDER] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input: `edit_client 1 n/Aileen e/aileenlam@email.com`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Items with `…`​ after them can be used zero or multiple times."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Format given: `add_client n/NAME p/PHONE_NUMBER e/EMAIL g/GENDER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input 1 (no tags): `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input 2: (two tags): `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "1. Parameters with prefixes can be supplied in any order."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Format given: `add_client n/NAME p/PHONE_NUMBER e/EMAIL g/GENDER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input 1 (same order as given format): `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25 t/friends`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Acceptable input 2 (different order as given format): `add_client p/98765432 e/johnd@example.com n/John Doe g/M a/311, Clementi Ave 2, #02-25 t/friends`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "With the above information, you can now move on to [Section 4, Features](#4-features) to learn all the features of the application and start using the commands."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 4 Features"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "This section contains all the information you need to know about the features of **HairStyleX**. To use each feature or sub-feature, you will need to enter the command into the Command Box."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**:warning: Warning about the use of features:**\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "As you use our features, other files will be created and stored in the folder that contains **HairStyleX.jar**. These files are created with the purpose of storing your data. Please do not alter or delete any of them, as this might result in permanent loss of data."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-light\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**:bulb: Tips for first time users**\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "If this is your first time using **HairStyleX**, you might notice that this application is pre-filled with sample data. To delete all data, use the `clear` command as stated below."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 4.1 General commands"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.1.1 Viewing help : `help`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Shows the link to the user guide in case the user forgets the commands."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.1.2 Clearing all entries : `clear`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Clears all entries from the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.1.3 Exiting the program : `exit`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.1.4 Saving the data"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "All hairdressers and client information will be stored automatically after any command that changes the data. There is no need to save manually. This data be loaded upon restart of the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "### 4.2 Client Management"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "(Contributed by Yao Yuan)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "This feature allows you to manage the information of clients in your salon. You can record the following information about clients:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Gender"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Phone"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Email"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Address"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Tags"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.1 Client Management Command Parameters"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Before you jump right into using this feature, you may want to learn about all the common command parameters used in this feature. The table below shows the list of common command parameters that will be used for this feature."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "---------------|-------------"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`NAME` | The name of the client. \u003cbr\u003eIt should only contain alphanumeric characters and spaces, and it should not be blank. \u003cbr\u003e E.g. `Yao Yuan`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`PHONE` | The phone number of the client. \u003cbr\u003e It should only contain numbers, and it should be at least 3 digits long \u003cbr\u003e E.g. `96757525`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`EMAIL` | The email of the client.\u003cbr\u003eEmails should be of the format local-part@domain and adhere to the following constraints: \u003cbr\u003e1. The local-part should only contain alphanumeric characters and these special characters: `!#$%\u0026\u0027*+/\u003d?{}~^.-` .\u003cbr\u003e2. This is followed by a \u0027@\u0027 and then a domain name. The domain name must be at least 2 characters long, start and end with alphanumeric characters, consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\u003cbr\u003eE.g. `yaoyuan@example.com`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`GENDER` | The gender of the client. \u003cbr\u003e Gender should be either F or M or f or m. \u003cbr\u003e E.g. `F`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`ADDRESS` | The address of the client. \u003cbr\u003e  E.g. `6 College Avenue East #12-01D`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`TAG` | The tag of the client. \u003cbr\u003e It should only contain alphanumeric characters. \u003cbr\u003e It is optional. \u003cbr\u003e There can be more than one tag for each client.  \u003cbr\u003eE.g. `shortHair`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`ID` | The unique client ID `cid` that is assigned to each client. \u003cbr\u003eThe ID is unique to each client, and the ID will not be assigned to another client even if one is deleted from the database. \u003c/br\u003eThus, the ID displayed in the list may not be sequential. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`KEYWORD` | Keyword for `filter_client`. \u003cbr\u003eIt should only contain alphanumeric characters. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.2 Adding a client: `add_client`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You can use this command to add a client to the database."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`add_client n/NAME p/PHONE e/EMAIL g/GENDER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ":information_source: Refer to Section 4.2.1 for more details on each parameter."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "In the example below, you will register a male client called **John Doe** with phone number **98765432**, email **johnd@example.com**, address **311, Clementi Ave 2, #02-25**, who has short hair and owns the salon money, into the HairstyleX."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25 t/shortHair t/owesMoney`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Adding a new client: \u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Type `add_client n/John Doe p/98765432 e/johnd@example.com g/M a/311, Clementi Ave 2, #02-25 t/shortHair t/owesMoney` into the *Command Box*."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. The `Result Display` will show a success message. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. You can now see the client\u0027s information in the *Clients Panel*."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "![AddClientOutcome](images/AddClientOutcome.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "*Figure 1. Outcome of a successful `add_client` command*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.3 Listing all clients : `list_client`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You can use this command to show a list of all clients in the database. This command is especially useful if you used `filter_client` command to search for clients- `list_client` will restore the full list to view. "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`list_client`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Listing all your clients:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Type `list_client` into the *Command Box*."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. The Result Display will show a success message."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. You can now see all your clients in the *Client Panel*."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.4 Editing a client : `edit_client`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You can use this command to edit an existing client in the database."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`edit_client ID [n/NAME] [p/PHONE] [e/EMAIL] [g/GENDER] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Edits the client with the specified `ID`. The index refers to the index number `cid` shown in the displayed client list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* When editing tags, the existing tags of the client will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* You can remove all the client’s tags by typing `t/` without"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Refer to Section 4.2.1 for more details on each parameter."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Assume that the client with ID `1` changed his/her email and you wish to update it in the database. You will perform the following steps:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Adding a new client:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Type `edit_client 1 p/91234567 e/yy@example.com` into the *Command box*."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. The `Result Display` will show a success message. "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. You can now see the updated client\u0027s information in the *Clients Panel*."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "![EditClientOutcome](images/EditClientOutcome.png)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "*Figure 2. Outcome of a successful `edit_client` command*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.5 Deleting a client : `delete_client`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You can use this command to remove a specific client from the database."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "`delete_client ID`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Deletes the client with the specified `ID`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* The index refers to the index number `cid` shown in the displayed client list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* All appointments with this corresponding client will now show \"DELETED\" for the client placeholder"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Assume that the information of client with ID `2` is no longer needed and you wish to delete him/her from the database. You will perform the following steps:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Delete client: \u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Type `delete_client 2` into the *Command Box*."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. The `Result Display` will show a success message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "![DeleteClientOutcome](images/DeleteClientOutcome.png)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "*Figure 3. Outcome of a successful `delete_Client` command*"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#### 4.2.6 Filtering clients : `filter_client`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You can filter the list of clients in the database by keyword search that match their names."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " `filter_client KEYWORD...`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* The search is case-insensitive. e.g `anna`, `aNNa` will match `Anna`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* The order of the keywords does not matter. e.g. `Anna Yeoh` will match `Yeoh Anna`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Only full words will be matched e.g. `Ann` will not match `Anna`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Anna Yeoh` will return `Anna Cheung`, `David Yeoh`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "You wish to find the client **Ivan** from the database and check his phone number. You will perform the following steps:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Filter clients: \u003cbr\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Type `filter_client ivan` into the *Command Box*."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. The `Result Display` will show a success message."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "1. You can now see the filtered client\u0027s information in the *Clients Panel*, with clients named `Ivan` displayed in the list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "![FilterClientOutcome](images/FilterClientOutcome.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "*Figure 4. Outcome of a successful `filter_client` command*"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "theyifan"
        },
        "content": "### 4.3 Hairdresser Management"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "theyifan"
        },
        "content": "(contributed by Zhang Yifan)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "theyifan"
        },
        "content": "This feature allows you to manage the information of hairdressers in your salon. You can record the following information about hairdressers: "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Title"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Gender"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Phone"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Email"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Specialisations"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.1 Hairdresser Management Command Parameters"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "theyifan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`NAME` | The name of the hairdresser.\u003cbr\u003eIt should only contain alphanumeric characters and spaces, and it should not be blank.\u003cbr\u003eE.g. `Anna Sue`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`TITLE` | The title of the hairdresser.\u003cbr\u003eIt should not be blank.\u003cbr\u003eE.g. `Senior Stylist`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`GENDER` | The gender of the hairdresser.\u003cbr\u003eGender should be either F or M or f or m.\u003cbr\u003eE.g. `F`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`PHONE` | The phone number of the hairdresser.\u003cbr\u003ePhone numbers should only contain numbers, and it should be at least 3 digits long.\u003cbr\u003eE.g. `81526354`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`EMAIL` | The email of the hairdresser.\u003cbr\u003eEmails should be of the format local-part@domain and adhere to the following constraints: \u003cbr\u003e1. The local-part should only contain alphanumeric characters and these special characters: `!#$%\u0026\u0027*+/\u003d?{}~^.-` .\u003cbr\u003e2. This is followed by a \u0027@\u0027 and then a domain name. The domain name must be at least 2 characters long, start and end with alphanumeric characters, consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\u003cbr\u003eE.g. `johnd@example.com`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`SPECIALISATION` | The specialisation of the hairdresser.\u003cbr\u003eSpecialisations should be one of the following options: \u003cbr\u003e`Color`, `Perm`, `HairExtension`, `Styling`, `HairConditioning`, `Straightening`, `ScalpTreatment`, `HairLossTreatment`.\u003cbr\u003eE.g. `Color`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`ID` | The unique hairdresser ID `hid` that is assigned to each hairdresser. \u003cbr\u003eThe ID is unique to each hairdresser, and the ID will not be assigned to another hairdresser even if one is deleted from the database. \u003c/br\u003eThus, the ID displayed in the list may not be sequential. "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`KEYWORD` | Keyword for `filter_hairdresser`. \u003cbr\u003eIt should only contain alphanumeric characters. "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.2 Adding a hairdresser : `add_hairdresser`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "theyifan"
        },
        "content": "You can use this command to add a hairdresser to the database."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`add_hairdresser n/NAME p/PHONE e/EMAIL g/GENDER ti/TITLE [s/SPECIALISATION]…​`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":information_source: Refer to Section 4.3.1 for more details on each parameter."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "theyifan"
        },
        "content": "In the example below, you will register a female Senior Stylist called **Helen Lim** with phone number **82716252**, email **helenlim@example.com**, who is specialised in **Perm** and **Color**, into the HairstyleX."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Adding a new hairdresser: \u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Type `add_hairdresser n/Helen Lim p/82716252 e/helenlim@example.com g/F ti/Senior Stylist s/Perm s/Color` into the *Command Box*."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. The `Result Display` will show a success message. "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. You can now see the hairdresser\u0027s information in the *Hairdressers Panel*."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "theyifan"
        },
        "content": "![AddHairdresserOutcome](images/AddHairdresserOutcome.png)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "theyifan"
        },
        "content": "*Figure 3. Outcome of a successful `add_hairdresser` command*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.3 Listing all hairdressers : `list_hairdresser`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "theyifan"
        },
        "content": "You can use this command to show a list of all hairdressers in the database. This command is especially useful if you used `filter_hairdresser` command to search for hairdressers- `list_hairdresser` will restore the full list to view. "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`list_hairdresser`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Listing all hairdressers: \u003cbr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Type `list_hairdresser` into the *Command Box*."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. The `Result Display` will show a success message. "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. You can now see a list of all hairdresser\u0027s information in the *Hairdressers Panel*."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.4 Editing a hairdresser : `edit_hairdresser`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "theyifan"
        },
        "content": "You can use this command to edit an existing hairdresser in the database."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Format:** "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "theyifan"
        },
        "content": "`edit_hairdresser ID [n/NAME] [p/PHONE] [e/EMAIL] [e/GENDER] [ti/TITLE] [s/SPECIALISATION]…​`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Edits the hairdresser with the specified `ID`. The index refers to the index number `hid` shown in the displayed hairdresser list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* When editing specialisations, the existing specialisations of the hairdresser will be removed i.e adding of specialisations is not cumulative."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* You can remove all the hairdresser’s tags by typing `s/` without"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    specifying any specialisations after it."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Refer to Section 4.3.1 for more details on each parameter."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Assume that the hairdresser with ID `4` changed his/her contact details and you wish to change them in the database. You will perform the following steps: "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Adding a new hairdresser: \u003cbr\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Type `edit_hairdresser 4 p/91234567 e/yy@example.com` into the *Command Box*."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. The `Result Display` will show a success message. "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. You can now see the updated hairdresser\u0027s information in the *Hairdressers Panel*."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "theyifan"
        },
        "content": "![EditHairdresserOutcome](images/EditHairdresserOutcome.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "theyifan"
        },
        "content": "*Figure 4. Outcome of a successful `edit_hairdresser` command*"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.5 Deleting a hairdresser : `delete_hairdresser`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Removes a specific hairdresser from the database."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "theyifan"
        },
        "content": " `delete_hairdresser ID`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Deletes the hairdresser with the specified `ID`."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* The index refers to the index number `hid` shown in the displayed hairdresser list."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* All appointments with this corresponding hairdresser will now show \"DELETED\" for the hairdresser placeholder"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Assume that the hairdresser with ID `3` left the salon and you wish to delete him/her from the database. You will perform the following steps:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Delete hairdresser: \u003cbr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Type `delete_hairdresser 3` into the *Command Box*."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. The `Result Display` will show a success message."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "theyifan"
        },
        "content": "![DeleteHairdresserOutcome](images/DeleteHairdresserOutcome.png)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "theyifan"
        },
        "content": "*Figure 5. Outcome of a successful `delete_hairdresser` command*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "theyifan"
        },
        "content": "#### 4.3.6 Filtering hairdressers : `filter_hairdresser`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "theyifan"
        },
        "content": "You can filter the list of hairdressers in the database by keyword search that match their names."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "theyifan"
        },
        "content": " `filter_hairdresser KEYWORD...`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":information_source:\u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* The search is case-insensitive. e.g `anna`, `aNNa` will match `Anna`."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* The order of the keywords does not matter. e.g. `Anna Yeoh` will match `Yeoh Anna`."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Only full words will be matched e.g. `Ann` will not match `Anna`."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Anna Yeoh` will return `Anna Cheung`, `David Yeoh`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "theyifan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "theyifan"
        },
        "content": "You wish to find the hairdresser **Helen** from the database and check her full name and specialisations. You will perform the following steps:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-white\"\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Filter hairdresser: \u003cbr\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Type `filter_hairdresser helen` into the *Command Box*."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. Press `Enter` to execute."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Outcome: \u003cbr\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. The `Result Display` will show a success message."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. You can now see the filtered hairdresser\u0027s information in the *Hairdressers Panel*, with hairdressers named `helen` displayed in the list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "theyifan"
        },
        "content": "![FilterHairdresserOutcome](images/FilterHairdresserOutcome.png)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "theyifan"
        },
        "content": "*Figure 6. Outcome of a successful `filter_hairdresser` command*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 4.4 Appointment Management"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "(contributed by Nicholas Toh)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "This feature allows you to manage appointments between hairdressers and clients. You can record the following information about appointment: "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Client"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Hairdresser"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Date"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Time"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Status"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.4.1 Appointment Management Command Parameters"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Parameter Name | Description"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`CLIENT_ID` | The ID of the client `cid`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`HAIRDRESSER_ID` | The ID of the hairdresser `cid`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`DATE` | The date of the appointment.\u003cbr\u003e\u003cbr\u003e It must be in the format of `YYYY-MM-DD`, following the ISO8601 standard.\u003cbr\u003e\u003cbr\u003e E.g. `2020-12-13` This example means 13th December 2020."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`TIME` | The time of the appointment.\u003cbr\u003e\u003cbr\u003e It must be in the format of HH:MM.\u003cbr\u003e\u003cbr\u003e E.g. `17:30` This example means 5.30 pm."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`STATUS` | The status of the appointment, which can be `ACTIVE`, `CANCELLED`, `COMPLETED`, or `MISSED`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "`ID` | The appointment ID `aid` that represents the appointment."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.4.2 Adding an appointment : `add_appt`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Adds an appointment to the database."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Format**: `add_appt cid/CLIENT_ID hid/HAIRDRESSER_ID d/DATE t/TIME`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `CLIENT_ID` must be a valid client ID (cid)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `HAIRDRESSER_ID` must be a valid hairdresser ID (hid)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `DATE` must be entered in YYYY-MM-DD format"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `TIME` must be entered in 24 Hour HH:MM format"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e  "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "**:information_source: Notes about creating appointments**  "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* All appointments are active by default.  "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* All appointments have a duration of 2 hours. Hence the end time of an appointment is implicitly two hours after the start time.  "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Appointments involving the same persons (hairdresser or client) should not overlap in time. Equivalently, no person should be simultaneously involved in two appointments.  "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Appointments should only be created in the future.  "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Appointment IDs may not be in order."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Example**:"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `add_appt cid/1 hid/1 d/2020-12-12 t/17:30` creates an new appointment with the specified details."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "![create_appointment](images/appointment/create_appointment.png)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.4.3 Listing appointments : `list_appt`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Shows a list of appointments."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Format**: `list_appt`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.4.4 Editing an appointment : `edit_appt`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Edits an existing appointment."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Format**: `edit_appt ID s/STATUS`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Edits the appointment with the specified `ID`. "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* `CLIENT_ID` must be a valid appointment ID (aid)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Only the status of the appointment can be updated. If you wish to change other aspects of an appointment, such as the client/hairdresser/time, simply delete the appointment and create a new one."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Example**:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "*  `edit_appt 2 s/CANCELLED` Edits the status of the first appointment, changing it to `CANCELLED`."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "![edit_appointment](images/appointment/edit_appointment.png)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.4.5 Deleting an appointment : `delete_appt`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Removes a specific appointment from the database."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "##Format##: `delete_appt ID`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* Deletes the appointment with the specified `ID`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* The index refers to the index number shown in the displayed appointment list."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "##Example##:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "*  `delete_appt 2` Deletes appointment with `aid` 2."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "![delete_appointment](images/appointment/delete_appointment.png)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 4.5 Alias commands"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "pooty3"
        },
        "content": "(Contributed by Aloysius)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "pooty3"
        },
        "content": "This feature allows you to customise aliases. You can add, delete and list aliases which are shortcuts for "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "pooty3"
        },
        "content": "longer commands."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.5.1 Add a new alias : `add_alias`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You can use this command to add a new alias to the program."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "pooty3"
        },
        "content": "`add_alias old/OLD_ALIAS new/NEW_ALIAS`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You want to create an alias `aa` for `add_alias`. "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Creating a new alias:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Type `add_alias old/add_alias new/aa` into the _Command Box_."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* Press `Enter` to execute."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* You can now see your new alias."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "pooty3"
        },
        "content": "![Ui](images/add_alias_success.png)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "*Figure 9. Outcome of a successful `add_alias` command*"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You can now use the alias"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "pooty3"
        },
        "content": "![Ui](images/use_new_alias.png)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "*Figure 10. Usage of new alias*"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "pooty3"
        },
        "content": "And it works!"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "pooty3"
        },
        "content": "![Ui](images/new_alias.png)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "*Figure 11. Success confirmation from using new alias command*"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "pooty3"
        },
        "content": "**:information_source: You cannot add duplicate aliases or default command words as aliases**\u003cbr\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.5.2 Delete an alias: `delete_alias`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You can use this command to delete an alias to the program."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "pooty3"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "pooty3"
        },
        "content": "`delete_alias ALIAS`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "pooty3"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You want to delete an alias `aa`. "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "pooty3"
        },
        "content": "****"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Deleting an alias:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "pooty3"
        },
        "content": ". Type `delete_alias aa` into the _Command Box_."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "pooty3"
        },
        "content": ". Press `Enter` to execute."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Outcome:"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "pooty3"
        },
        "content": ". The _Result Display_ will show a success message."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "pooty3"
        },
        "content": "****"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "pooty3"
        },
        "content": ".Outcome of a successful `delete_alias` command"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "pooty3"
        },
        "content": "![Ui](images/deletealias.png)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "pooty3"
        },
        "content": "***"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "#### 4.5.3 List all alias: `listalias`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "pooty3"
        },
        "content": "You can use this command to list all your aliases."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "pooty3"
        },
        "content": "*Format:*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "pooty3"
        },
        "content": "`list_alias`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "pooty3"
        },
        "content": "[Coming soon]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(Contributed by Tan Yu Li, James)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HairstyleX home folder."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Q**: Why aren’t I allowed to edit my date or time for the appointment?\u003cbr\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**A**: Editing the date or time may cause conflicts in your schedule if the change results in two appointments with the same hairdresser occuring concurrently. However, we are working on a feature that will allow you to resolve these conflicts in the upcoming version of **HairStyleX**."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Q**: What do I do if I want to change my appointment’s date or time since I cannot edit them?\u003cbr\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**A**: Unfortunately, you have to delete the appointment and create a new one."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Q**: What happens if I schedule 2 of my appointments with the same hairdresser on the same date and time? Will **HairStyleX** detect it?\u003cbr\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**A**: Yes, **HairStyleX** will detect such cases and prevent you from creating such an appointment."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## 6. Command summary"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "(Contributed by Tan Yu Li, James)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 6.1 General Commands"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 6.2 Client Commands"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Add Client** | `add_client n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tr/TREATMENT [p/PREFERENCE] [t/TAG]…​` \u003cbr\u003e e.g., `add n/Nicholas Toh p/12345678 e/niktoh@example.com a/123, Clementi Rd, 1234665 tr/colouring p/female stylist t/frequent`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**List Clients** | `list_client`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Edit Client** | `edit_client ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [tr/TREATMENT] [p/PREFERENCE] [t/TAG]…​`\u003cbr\u003e e.g.,`edit_client 2 n/James Tan p/Female Stylist`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Delete Client** | `delete_client ID` \u003cbr\u003e e.g., `delete_client 3`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Filter Client** | `filter_client KEYWORD...`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 6.3 Hairdresser Commands"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Add Hairdresser** | `add_hairdresser n/NAME p/PHONE_NUMBER e/EMAIL ti/TITLE [s/SPECIALISATION] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com ti/senior s/colouring t/colleague`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**List Hairdressers** | `list_hairdresser`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Edit Hairdresser** | `edit_hairdresser ID ID [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [ti/TITLE] [s/SPECIALISATION] [t/TAG]…​`\u003cbr\u003e e.g.,`edit_hairdresser 2 n/James Lee ti/senior`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Filter Hairdresser** | `filter_hairdresser KEYWORD...`"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 6.4 Appointment Commands"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Add Appointment** | `add_appt cid/CLIENT_ID hid/HAIRDRESSER_ID d/DATE t/TIME` \u003cbr\u003e e.g., `add_appt cid/1 hid/1 d/2020-12-12 t/17:30`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**List Appointments** | `list_appt`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Delete Appointment** | `delete_appt ID` \u003cbr\u003e e.g., `delete_appt 3`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "### 6.5 Alias Commands"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Add Alias** | `add_alias old/OLD_ALIAS new/NEW_ALIAS` \u003cbr\u003e e.g., `add_alias old/add_alias new/aa`"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**Delete Alias** | `delete_alias ALIAS` \u003cbr\u003e e.g., `delete_alias aa`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**List Alias** | `list_alias`"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 202,
      "pooty3": 75,
      "nicktohzyu": 78,
      "theyifan": 157,
      "ya0-yuan": 167,
      "-": 156
    }
  },
  {
    "path": "docs/diagrams/AddHairdresserSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \":AddHairdresserCommandParser\" as AddHairdresserCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \"a:AddHairdresserCommand\" as AddHairdresserCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "[-\u003e LogicManager : execute(add_hairdresser)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(add_hairdresser)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "create AddHairdresserCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddressBookParser -\u003e AddHairdresserCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddHairdresserCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddHairdresserCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddressBookParser -\u003e AddHairdresserCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddHairdresserCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "create AddHairdresserCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommandParser -\u003e AddHairdresserCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddHairdresserCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommand --\u003e AddHairdresserCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddHairdresserCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommandParser -\u003e AddHairdresserCommand : parse(add_hairdresser)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddHairdresserCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommand -\u003e AddHairdresserCommandParser : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddHairdresserCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommandParser -\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddHairdresserCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddressBookParser -\u003e LogicManager : a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "LogicManager -\u003e AddHairdresserCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate AddHairdresserCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommand -\u003e Model : addHairdresser(toAdd)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Model --\u003e AddHairdresserCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate AddHairdresserCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "AddHairdresserCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "LogicManager -\u003e Storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Storage --\u003e LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "destroy AddHairdresserCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "theyifan": 77
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete_client 1\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteClient(c)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pooty3": 1,
      "iamjamestan": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/CommandAliasClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Enum \"\u003c\u003cEnumeration\u003e\u003e \\nCommandWord\" as CommandWord"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class CommandAlias"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class CommandAliasSet"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "CommandAlias *-right-\u003e \"1\" CommandWord"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "CommandAliasSet o-right-\u003e \"*\" CommandAlias"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pooty3": 14
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "participant \":DeleteClientCommandParser\" as DeleteClientCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "participant \"d:DeleteClientCommand\" as DeleteClientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[-\u003e LogicManager : execute(\"delete_client 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete_client 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "create DeleteClientCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "AddressBookParser -\u003e DeleteClientCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate DeleteClientCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate DeleteClientCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "AddressBookParser -\u003e DeleteClientCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate DeleteClientCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "create DeleteClientCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommandParser -\u003e DeleteClientCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate DeleteClientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommand --\u003e DeleteClientCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate DeleteClientCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate DeleteClientCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "destroy DeleteClientCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "LogicManager -\u003e DeleteClientCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate DeleteClientCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommand -\u003e Model : deleteClient(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Model --\u003e DeleteClientCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "CommandResult --\u003e DeleteClientCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "DeleteClientCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate DeleteClientCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 28,
      "-": 41
    }
  },
  {
    "path": "docs/diagrams/FindCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \":FindClientCommandParser\" as FindClientCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \"a:FindClientCommand\" as FindClientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "[-\u003e LogicManager : execute(find_client)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(find_client)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "create FindClientCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AddressBookParser -\u003e FindClientCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate FindClientCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate FindClientCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AddressBookParser -\u003e FindClientCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate FindClientCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "create FindClientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommandParser -\u003e FindClientCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate FindClientCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommand --\u003e FindClientCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate FindClientCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommandParser -\u003e FindClientCommand : parse(find_client)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate FindClientCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommand -\u003e FindClientCommandParser : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate FindClientCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommandParser -\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate FindClientCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AddressBookParser -\u003e LogicManager : a"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "LogicManager -\u003e FindClientCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate FindClientCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommand -\u003e Model : updateFilteredClientList(predicate)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Model --\u003e FindClientCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate FindClientCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "FindClientCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "LogicManager -\u003e Storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "activate Storage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Storage --\u003e LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "destroy FindClientCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 77
    }
  },
  {
    "path": "docs/diagrams/IDClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Abstract Class Id {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "- id: int"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} + MESSAGE_CONSTRAINTS: String"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "+ isValidId(): boolean"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Package Client {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class ClientId {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Package Hairdresser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class HairdresserId"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Package Appointment {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class AppointmentId"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "HairdresserId -up-|\u003e Id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "ClientId -up-|\u003e Id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "AppointmentId -up-|\u003e Id"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 31
    }
  },
  {
    "path": "docs/diagrams/IDCounterClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class IdCounter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} - instance: IdCounter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} - clientId: int"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} - hairdresserId: int"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} - appointmentId: int"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "{static} + getInstance(): IdCounter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 14
    }
  },
  {
    "path": "docs/diagrams/IDSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \":AddressBookParser\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \":AddClientCommandParser\" as parser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \"c:Client\" as client LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \":IDCounter\" as idCounter LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \":ClientId\" as Id LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Participant \":AddClientCommand\" as command LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "endbox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "logic -[USER_COLOR]\u003e parser : parse(\"add_client n/John Doe p/98765432 ...\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate parser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "create client"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "parser -\u003e client"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate client"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "client -\u003e idCounter : generateNewClientId()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate idCounter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "create Id"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "idCounter -\u003e Id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate Id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Id --\u003e idCounter"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate Id"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "idCounter --\u003e client"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate idCounter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "client --\u003e parser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate client"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "create command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "parser -\u003e command : AddClientCommand(c)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "activate command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "command --\u003e parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "parser --\u003e logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 48
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package \"ABC\" as DEF {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class XYZ_ABC_CommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class \"{abstract}\\nXYZ_CommandParser\" as XYZ_CommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package ABC {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class XYZ_ABC_Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Class \"{abstract}\\nXYZ_Command\" as XYZ_Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "AddressBookParser ..\u003e XYZ_ABC_CommandParser: creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_ABC_CommandParser --|\u003e XYZ_CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "AddressBookParser -right[hidden]- CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser ..\u003e XYZ_ABC_Command : creates \u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser .|\u003e Parser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_CommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_Command -up-|\u003e Command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "XYZ_ABC_Command -up-|\u003e XYZ_Command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "note top of XYZ_ABC_CommandParser: Eg, AddClientCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "note right of XYZ_Command: XYZ_Command \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "note right of XYZ_ABC_Command: Assuming XYZ \u003d Add, \\nXYZ_ABC_Command \u003d AddClientCommand, \\nAddHairdresserCommand, \\nAddAppointmentCommand, etc"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "note \"XYZ represents types of commands such as Add, Edit, Delete, Find, etc \\nABC represents entities such as Client, Hairdresser and Appointment\" as N1"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 23,
      "-": 51
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Package Entity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Interface Entity \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Abstract Class \"{abstract} \\nId\" as Id"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Package EntityList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Abstract Class \"{abstract} \\nUniqueEntityList\" as UniqueEntityList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class UniqueClientList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class UniqueHairdresserList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class UniqueAppointmentList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Abstract Class \"{abstract} \\nPerson\" as Person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Gender"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Package Client {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Client"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class ClientId"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Package Hairdresser{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Hairdresser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Specialisation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class HairdresserId"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Package Appointment {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class AppointmentDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class AppointmentId"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Enum \"\u003c\u003cEnumeration\u003e\u003e \\nAppointmentStatus\" as AppointmentStatus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class AppointmentTime"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Class FutureAppointment"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment .down.|\u003e FutureAppointment"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment *-down-\u003e AppointmentDate"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment *-down-\u003e AppointmentStatus"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment *-down-\u003e AppointmentTime"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment *-down-\u003e AppointmentId"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person .down.|\u003e Entity"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Appointment .down.|\u003e Entity"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Hairdresser ..|\u003e Person"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Client ..|\u003e Person"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueAppointmentList .up.|\u003e UniqueEntityList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueClientList .up.|\u003e UniqueEntityList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueHairdresserList .up.|\u003e UniqueEntityList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ClientId .down.|\u003e Id"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "HairdresserId .down.|\u003e Id"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": "AppointmentId .down.|\u003e Id"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager o-left-\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "AddressBook *-down-\u003e \"1\" UniqueAppointmentList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "AddressBook *-down-\u003e \"1\" UniqueClientList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "AddressBook *-down-\u003e \"1\" UniqueHairdresserList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueAppointmentList o-down-\u003e \"*\" Appointment"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueEntityList o-down-\u003e \"*\" Entity"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueClientList o-down-\u003e \"*\" Client"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "UniqueHairdresserList o-down-\u003e \"*\" Hairdresser"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person *-down-\u003e Name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person *-down-\u003e Phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person *-down-\u003e Email"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person *-down-\u003e Gender"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Client *-down-\u003e Address"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Client *-down-\u003e ClientId"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Client *-down-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Hairdresser *-down-\u003e \"*\" Specialisation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Hairdresser *-down-\u003e Title"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Hairdresser *-down-\u003e HairdresserId"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager -[hidden]down-\u003e EntityList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Client -[hidden]down-\u003e Hairdresser"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Person -[hidden]left-\u003e Client"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager --\u003e\"1\" Client: filtered list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager --\u003e\"1\" Hairdresser : filtered list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": "ModelManager --\u003e\"1\" Appointment : filtered list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pooty3": 82,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Class \"{abstract}\\nJsonAdaptedPerson\" as JsonAdaptedPerson"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonSerializableAddressBookStorage ..\u003e JsonAdaptedHairdresser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonSerializableAddressBookStorage ..\u003e JsonAdaptedClient"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonSerializableAddressBookStorage ..\u003e JsonAdaptedAppointment"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonSerializableAddressBookStorage ..\u003e JsonAdaptedIdCounter"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonAdaptedClient ..\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonAdaptedHairdresser ..\u003e JsonAdaptedSpecialisation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonAdaptedHairdresser -right[hidden]- JsonAdaptedClient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonAdaptedHairdresser -left|\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "JsonAdaptedClient -left|\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "theyifan": 10,
      "-": 22
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class HairdresserListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class ClientListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class AppointmentCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class HairdresserCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class ClientCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Class AppointmentListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "MainWindow *-down-\u003e ClientListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "MainWindow *-down-\u003e HairdresserListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "MainWindow *-down-\u003e AppointmentListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ClientListPanel -down-\u003e ClientCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairdresserListPanel -down-\u003e HairdresserCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AppointmentListPanel -down-\u003e AppointmentCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ResultDisplay -----|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "CommandBox -----|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ClientListPanel ----|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ClientCard ----|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairdresserListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairdresserCard ----|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AppointmentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AppointmentCard ----|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairdresserCard .\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ClientCard ....\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "AppointmentCard ....\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HelpWindow -[hidden]right- ClientListPanel"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "ClientListPanel -[hidden]right- HairdresserListPanel"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairdresserListPanel -[hidden]right- AppointmentListPanel"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 26,
      "-": 50
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "title: HairStyleX"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T15-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T15-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T15-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T15-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "**HairStyleX is a desktop application for managing hair salon appointments, clients, hairdressers, and supplies.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* If you are interested in using HairStyleX, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* If you are interested about developing HairStyleX, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 7,
      "-": 13
    }
  },
  {
    "path": "docs/team/iamjamestan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "title: James Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "## Project: HairStyleX"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "HairstyleX helps managers for budding neighborhood hair salons to manage clients, hairdressers, and appointments. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 46
    }
  },
  {
    "path": "docs/team/nicktohzyu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 46
    }
  },
  {
    "path": "docs/team/pooty3.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "title: Aloysius\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "## Project: HairStyleX"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "HairstyleX helps managers for budding neighborhood hair salons to manage clients, hairdressers, and appointments. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "pooty3": 46
    }
  },
  {
    "path": "docs/team/theyifan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "title: Zhang Yifan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "## Project: HairStyleX"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "HairstyleX helps managers for budding neighborhood hair salons to manage clients, hairdressers, and appointments. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "theyifan": 46
    }
  },
  {
    "path": "docs/team/ya0-yuan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "title: Yao Yuan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "## Project: HairStyleX"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "HairstyleX helps managers for budding neighborhood hair salons to manage clients, hairdressers, and appointments. It is optimized for CLI users so that frequent tasks can be done faster by typing in commands. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 46
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.client.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_ID \u003d \"The client ID provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_INVALID_HAIRDRESSER_DISPLAYED_ID \u003d \"The hairdresser ID provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_HAIRDRESSER_LISTED_OVERVIEW \u003d \"%1$d hairdressers listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_CLIENT_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_APPOINTMENT_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_ID \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \"The appointment ID provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DELETED_PATIENT \u003d \"The patient has already been deleted!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 5,
      "ya0-yuan": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of hairdressers */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    ObservableList\u003cHairdresser\u003e getFilteredHairdresserList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of clients */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appointments */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 1,
      "ya0-yuan": 10,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public ObservableList\u003cHairdresser\u003e getFilteredHairdresserList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return model.getFilteredHairdresserList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 15,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commandalias/CommandAlias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commandalias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class CommandAlias {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private CommandWord commandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private HashSet\u003cString\u003e aliasSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandAlias(CommandWord commandWord) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Constructs a new command Alias with a command and aliases"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param command Command to be associated with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param aliases Aliases to be initialised with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandAlias(CommandWord command, List\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandWord \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        aliasSet.addAll(aliases.stream().filter(alias -\u003e !alias.equals(commandWord.getDefaultWord()))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Add an alias"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param alias Alias to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws CommandWordException if alias already exists, empty or contains white spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void addAlias(String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (aliasExist(alias)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(alias + \" already exists!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (alias.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(alias + \"cannot be empty!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (alias.matches(\".*\\\\s.*\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Alias cannot contain white spaces!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        aliasSet.add(alias);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean aliasExist(String alias) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return alias.equals(commandWord.getDefaultWord()) || aliasSet.contains(alias);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Remove an alias"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param alias Alias to be removed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws CommandWordException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void removeAlias(String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!aliasExist(alias)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(alias + \" does not exists!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (commandWord.getDefaultWord().equals(alias)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Cannot remove default word!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        aliasSet.remove(alias);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandWord getCommandWord() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean checkCommandWord(CommandWord word) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return word \u003d\u003d commandWord;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public ArrayList\u003cString\u003e getAllAliases() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new ArrayList\u003c\u003e(aliasSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commandalias/CommandAliasSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commandalias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class CommandAliasSet {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static CommandAliasSet instance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static List\u003cCommandAlias\u003e commandAliases;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private CommandAliasSet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandAliases \u003d Stream.of(CommandWord.values())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .map(word -\u003e new CommandAlias(word)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static CommandAliasSet getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            instance \u003d new CommandAliasSet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Insert a new alias"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param word The word associated with the alias"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param alias The alias to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws CommandWordException if alias already exists"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void insertNewAlias(CommandWord word, String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (commandAliases.stream().anyMatch(commandAlias -\u003e commandAlias.aliasExist(alias))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Alias already exists!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        commandAliases.stream().filter(commandAlias -\u003e commandAlias.checkCommandWord(word))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .findFirst().get().addAlias(alias);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Insert a new alias"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param word The associated word"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param alias The new alias"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws CommandWordException if the original command word does not exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void insertNewAlias(String word, String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        CommandWord commandWord \u003d CommandWord.getCommandWord(word);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Original Command Word does not exist!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        insertNewAlias(commandWord, alias);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandWord getCommandWord(String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Optional\u003cCommandAlias\u003e command \u003d commandAliases.stream().filter(commandAlias -\u003e commandAlias.aliasExist(alias))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (command.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Command does not exists!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return command.get().getCommandWord();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Delete an alias"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param alias Alias to be deleted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws CommandWordException if the alias does not exist"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void deleteAlias(String alias) throws CommandWordException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Optional\u003cCommandAlias\u003e command \u003d commandAliases.stream().filter(commandAlias -\u003e commandAlias.aliasExist(alias))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (command.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandWordException(\"Alias does not exists!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        command.get().removeAlias(alias);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public List\u003cCommandAlias\u003e getListOfAliases() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return this.commandAliases;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setUpAliasSet(List\u003cCommandAlias\u003e aliasSet) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandAliases \u003d Stream.of(CommandWord.values())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .map(word -\u003e new CommandAlias(word)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        aliasSet.stream().forEach(set -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            set.getAllAliases().stream().forEach(alias -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    insertNewAlias(set.getCommandWord(), alias);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                } catch (CommandWordException ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    System.out.println(\"skip\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setUpAliasSet(CommandAliasSet aliasSet) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        commandAliases \u003d aliasSet.getListOfAliases();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commandalias/CommandWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commandalias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public enum CommandWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ADD_APPOINTMENT(\"add_appt\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ADD_CLIENT(\"add_client\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ADD_HAIRDRESSER(\"add_hairdresser\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    EDIT_APPOINTMENT(\"edit_appt\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    EDIT_CLIENT(\"edit_client\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    EDIT_HAIRDRESSER(\"edit_hairdresser\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    DELETE_APPOINTMENT(\"delete_appt\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    DELETE_CLIENT(\"delete_client\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    DELETE_HAIRDRESSER(\"delete_hairdresser\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    LIST_APPOINTMENT(\"list_appt\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    LIST_CLIENT(\"list_client\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    LIST_HAIRDRESSER(\"list_hairdresser\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    FILTER_HAIRDRESSER(\"filter_hairdresser\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    FILTER_APPT(\"filter_appt\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    FILTER_CLIENT(\"filter_client\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    CLEAR(\"clear\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    EXIT(\"exit\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    HELP(\"help\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ADD_ALIAS(\"add_alias\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    DELETE_ALIAS(\"delete_alias\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private String defaultWord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    CommandWord(String defaultAlias) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.defaultWord \u003d defaultAlias;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getDefaultWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return this.defaultWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return defaultWord;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static CommandWord getCommandWord(String word) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Optional\u003cCommandWord\u003e opt \u003d Stream.of(CommandWord.values())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .filter(commandWord -\u003e commandWord.getDefaultWord().equals(word))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return opt.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 52,
      "ya0-yuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commandalias/exceptions/CommandWordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commandalias.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class CommandWordException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandWordException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddAliasCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_alias\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an alias to the address book. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_OLD_COMMAND + \" ORIGINAL COMMAND\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_NEW_COMMAND + \" NEW COMMAND \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_OLD_COMMAND + \" add_hairdresser \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_NEW_COMMAND + \" a_h \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private String defaultWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private String newAlias;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Creates an add alias command given a default word and the new alias"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param defaultWord the original command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param newAlias the new command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AddAliasCommand(String defaultWord, String newAlias) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.defaultWord \u003d defaultWord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.newAlias \u003d newAlias;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            CommandAliasSet.getInstance().insertNewAlias(defaultWord, newAlias);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } catch (CommandWordException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandResult(\"Success! Added \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                + newAlias + \" as alias for \" + defaultWord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class AddPersonCommand\u003cT extends Person\u003e extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected final T toAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AddPersonCommand(T person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        addToModel(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandResult(String.format(getSuccessMessage(), toAdd));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || (other instanceof AddPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract void addToModel(Model model) throws CommandException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract String getSuccessMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteAliasCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_alias\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \": Deletes the alias.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Parameters: ALIAS\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" a_a\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_DELETE_ALIAS_SUCCESS \u003d \"Deleted Alias: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private String aliasToDelete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DeleteAliasCommand(String alias) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliasToDelete \u003d alias;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String deleteFromModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            CommandAliasSet.getInstance().deleteAlias(aliasToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } catch (CommandWordException ex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return String.format(MESSAGE_DELETE_ALIAS_SUCCESS, aliasToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || (other !\u003d null \u0026\u0026 other.getClass() \u003d\u003d this.getClass()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 aliasToDelete.equals(((DeleteAliasCommand) other).aliasToDelete)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        String result \u003d deleteFromModel(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract String deleteFromModel(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEntityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Deletes an entity identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class DeleteEntityCommand\u003cT extends Id\u003e extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected final T targetId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DeleteEntityCommand(T targetId) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.targetId \u003d targetId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || (other !\u003d null \u0026\u0026 other.getClass() \u003d\u003d this.getClass()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 targetId.equals(((DeleteEntityCommand) other).targetId)); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract String deleteFromModel(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new Person(updatedName, updatedPhone, updatedEmail, updatedGender);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * corresponding field value of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        private Phone phone;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        private Email email;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        private Gender gender;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return CollectionUtil.isAnyNonNull(name, phone, email, gender);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public void setName(Name name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            this.name \u003d name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            this.phone \u003d phone;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            this.email \u003d email;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            this.gender \u003d gender;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                    \u0026\u0026 getGender().equals(e.getGender());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_CLIENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_DATE_OF_APPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_HAIRDRESSER_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HAIRDRESSER_ID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.FutureAppointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotInFutureException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddAppointmentCommand extends AddCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_appt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_CLIENT_ID + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_HAIRDRESSER_ID + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_DATE_OF_APPT + \"2021-06-01 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_START_TIME + \"09:00 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new appointment to HairStyleX. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_CLIENT_ID + PLACEHOLDER_CLIENT_INDEX + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_HAIRDRESSER_ID + PLACEHOLDER_HAIRDRESSER_INDEX + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_DATE_OF_APPT + PLACEHOLDER_DATE_OF_APPT + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + PREFIX_START_TIME + PLACEHOLDER_START_TIME + \" \" + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in HairStyleX\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \"Client with this ID is not found. Please enter a valid client ID.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_HAIRDRESSER_NOT_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \"Hairdresser with this ID is not found. Please enter a valid hairdresser ID.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String MESSAGE_CLASHING_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        \"This appointment clashes with another. The other appointment\u0027s ID is %d.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ClientId clientId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final HairdresserId hairdresserId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final AppointmentDate date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final AppointmentTime time;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code appointment} created from {@code clientIndex},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code hairdresserIndex}, {@code date} and {@code time}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param clientId      Client\u0027s Id"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param hairdresserId Hairdresser\u0027s Id"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param date          Date of appointment"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param time          TIme of appointment"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AddAppointmentCommand(ClientId clientId, HairdresserId hairdresserId, AppointmentDate date,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                 AppointmentTime time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresserId \u003d hairdresserId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Client client \u003d model.getClientById(clientId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Hairdresser hairdresser \u003d model.getHairdresserById(hairdresserId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (client \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hairdresser \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_HAIRDRESSER_NOT_NOT_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Appointment appointment;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            appointment \u003d new FutureAppointment(client, hairdresser, date, time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (AppointmentNotInFutureException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(FutureAppointment.MESSAGE_CONSTRAINT_FUTURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (model.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // check if the new appointment clashes with any existing ones with the same client or haidresser"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        List\u003cAppointment\u003e appointments \u003d model.getAppointmentList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (Appointment appt : appointments) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            if (appt.getHairdresserId().equals(this.hairdresserId)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                || appt.getClientId().equals(this.clientId)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                if (appointment.isClash(appt)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_CLASHING_APPOINTMENT, appt.getId().id));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //List\u003cAppointment\u003e sameHairdresser \u003d appointments.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .filter(appt -\u003e appt.getHairdresserId().equals(this.hairdresserId)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //List\u003cAppointment\u003e sameClient \u003d appointments.stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .filter(appt -\u003e appt.getClientId().equals(this.clientId)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, appointment));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 92,
      "pooty3": 2,
      "nicktohzyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.DeleteEntityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Deletes an appointment identified using it\u0027s displayed index from the HairStyleX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteAppointmentCommand extends DeleteEntityCommand\u003cAppointmentId\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_appt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \": Deletes the appointment identified by the appointment ID used in the displayed appointment list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Parameters: APPOINTMENT_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteAppointmentCommand(AppointmentId targetId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(targetId);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String deleteFromModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Appointment appointmentToDelete \u003d model.getAppointmentById(targetId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointmentToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.deleteAppointment(appointmentToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 33,
      "pooty3": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPT_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class EditAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_appt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change the status of an existing appointment. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"The status that can be set are: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + AppointmentStatus.ACTIVE.name() + \", \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + AppointmentStatus.CANCELLED.name() + \", \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + AppointmentStatus.COMPLETED.name() + \", \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + AppointmentStatus.MISSED.name() + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Parameters: APPOINTMENT_ID (must be a positive integer) \" + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + PREFIX_APPT_STATUS + \"CANCELLED\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_MARK_APPT_SUCCESS \u003d \"Changed status of Appointment: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_STATUS_MISSING \u003d \"The new appointment status must be provided.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPT \u003d \"This appointment already exists in HairStyleX.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_STATUS_UNCHANGED \u003d \"The new status is the same as the existing status.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final AppointmentId appointmentId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ChangedAppointmentDescriptor changedAppointmentDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param appointmentId of the appointment in the filtered appointment list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param changedAppointmentDescriptor details of the changed status"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public EditAppointmentCommand(AppointmentId appointmentId,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  ChangedAppointmentDescriptor changedAppointmentDescriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointmentId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(changedAppointmentDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.changedAppointmentDescriptor \u003d new ChangedAppointmentDescriptor(changedAppointmentDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Appointment appointmentToChange \u003d model.getAppointmentById(appointmentId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointmentId \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Appointment changedAppointment \u003d createChangedAppointment(appointmentToChange, changedAppointmentDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!appointmentToChange.isSameAppointment(changedAppointment) \u0026\u0026 model.hasAppointment(changedAppointment)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointmentToChange.getAppointmentStatus().equals(changedAppointment.getAppointmentStatus())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_STATUS_UNCHANGED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if ((changedAppointment.getAppointmentStatus().equals(AppointmentStatus.COMPLETED)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || changedAppointment.getAppointmentStatus().equals(AppointmentStatus.MISSED))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 !appointmentToChange.isPast()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(AppointmentStatus.MESSAGE_CONSTRAINT_PAST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.setAppointment(appointmentToChange, changedAppointment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_APPT_SUCCESS, changedAppointment));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates and returns a {@code Appointment} with the details of {@code appointmentToChange}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * changed with {@code changedAppointmentDescriptor}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static Appointment createChangedAppointment(Appointment appointmentToChange,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                                        ChangedAppointmentDescriptor changedAppointmentDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        assert appointmentToChange !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        AppointmentStatus newStatus \u003d changedAppointmentDescriptor.getStatus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Appointment("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                appointmentToChange.getId(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                appointmentToChange.getClient(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                appointmentToChange.getHairdresser(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                appointmentToChange.getDate(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                appointmentToChange.getTime(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                newStatus);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Stores new status of the appointment."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static class ChangedAppointmentDescriptor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        private AppointmentStatus status;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public ChangedAppointmentDescriptor() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "         * Copy constructor. For defensive purposes, ensures only a copy is used."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public ChangedAppointmentDescriptor(ChangedAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "         * Returns true if status is changed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public boolean isStatusChanged() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return status !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public void setStatus(AppointmentStatus status) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public AppointmentStatus getStatus() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (!(other instanceof EditAppointmentCommand.ChangedAppointmentDescriptor)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            ChangedAppointmentDescriptor e \u003d (ChangedAppointmentDescriptor) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/FilterAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_APPT_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_CLIENT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_DATE_OF_APPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PLACEHOLDER_HAIRDRESSER_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPT_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HAIRDRESSER_ID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Filters all appointments in HairStyleX to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class FilterAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter_appt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + PREFIX_HAIRDRESSER_ID + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + PREFIX_CLIENT_ID + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + PREFIX_DATE_OF_APPT + \"2019-06-01 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + PREFIX_APPT_STATUS + \"active \";;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"[\" + PREFIX_CLIENT_ID + PLACEHOLDER_CLIENT_INDEX + \"] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"[\" + PREFIX_HAIRDRESSER_ID + PLACEHOLDER_HAIRDRESSER_INDEX + \"] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_APPT + PLACEHOLDER_DATE_OF_APPT + \"] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"[\" + PREFIX_APPT_STATUS + PLACEHOLDER_APPT_STATUS + \"] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_CLIENT \u003d \", filtered by client ID\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_HAIRDRESSER \u003d \", filtered by hairdresser ID\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_DATE \u003d \", filtered by date\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FILTERED_STATUS \u003d \", filtered by status\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_NOT_STATED \u003d \"At least one field must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private final FilterAppointmentDescriptor filterAppointmentDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public FilterAppointmentCommand(FilterAppointmentDescriptor filterAppointmentDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.filterAppointmentDescriptor \u003d new FilterAppointmentDescriptor(filterAppointmentDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        List\u003cPredicate\u003cAppointment\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (filterAppointmentDescriptor.getClientId().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            ClientId id \u003d filterAppointmentDescriptor.getClientId().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            if (model.getClientById(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                throw new CommandException(AddAppointmentCommand.MESSAGE_CLIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            predicates.add(appointment -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return appointment.getClientId().equals(id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(MESSAGE_SUCCESS_FILTERED_CLIENT + \": \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(id);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (filterAppointmentDescriptor.getHairdresserId().isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            HairdresserId id \u003d filterAppointmentDescriptor.getHairdresserId().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            if (model.getHairdresserById(id) \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                throw new CommandException(AddAppointmentCommand.MESSAGE_HAIRDRESSER_NOT_NOT_FOUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            predicates.add(appointment -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return appointment.getHairdresserId().equals(id);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(MESSAGE_SUCCESS_FILTERED_HAIRDRESSER + \": \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(id);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        filterAppointmentDescriptor.getDate().ifPresent(date -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            predicates.add(appointment -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return appointment.getDate().equals(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(MESSAGE_SUCCESS_FILTERED_DATE + \": \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        filterAppointmentDescriptor.getStatus().ifPresent(status -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            predicates.add(appointment -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return appointment.getAppointmentStatus().equals(status);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(MESSAGE_SUCCESS_FILTERED_STATUS + \": \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            result.append(status);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // reduce predicate list to a single predicate"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        Predicate\u003cAppointment\u003e combinedPredicate \u003d predicates.stream().reduce(x-\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        model.updateFilteredAppointmentList((PREDICATE_SHOW_ALL_APPOINTMENTS.and(combinedPredicate)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                String.format(Messages.MESSAGE_APPOINTMENT_LISTED_OVERVIEW, model.getFilteredAppointmentList().size()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        FilterAppointmentCommand that \u003d (FilterAppointmentCommand) o;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return Objects.equals(filterAppointmentDescriptor, that.filterAppointmentDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return Objects.hash(filterAppointmentDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Stores the fields to filter appointments by."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static class FilterAppointmentDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        private Optional\u003cClientId\u003e clientId \u003d Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        private Optional\u003cHairdresserId\u003e hairdresserId \u003d Optional.empty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        private Optional\u003cAppointmentDate\u003e date \u003d Optional.empty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        private Optional\u003cAppointmentStatus\u003e status \u003d Optional.empty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public FilterAppointmentDescriptor() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "         * Copy constructor. For defensive purposes, ensures only a copy is used."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public FilterAppointmentDescriptor(FilterAppointmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            setClientId(toCopy.clientId);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            setHairdresserId(toCopy.hairdresserId);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public Optional\u003cClientId\u003e getClientId() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return clientId;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public void setClientId(Optional\u003cClientId\u003e clientId) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public Optional\u003cHairdresserId\u003e getHairdresserId() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return hairdresserId;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public void setHairdresserId(Optional\u003cHairdresserId\u003e hairdresserId) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            this.hairdresserId \u003d hairdresserId;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public Optional\u003cAppointmentDate\u003e getDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public void setDate(Optional\u003cAppointmentDate\u003e date) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public Optional\u003cAppointmentStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public void setStatus(Optional\u003cAppointmentStatus\u003e status) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "         * Returns true if no field is stated to filter the list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public boolean noFieldStated() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return clientId.isEmpty() \u0026\u0026 hairdresserId.isEmpty()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u0026\u0026 date.isEmpty() \u0026\u0026 status.isEmpty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            FilterAppointmentDescriptor that \u003d (FilterAppointmentDescriptor) o;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return Objects.equals(clientId, that.clientId)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u0026\u0026 Objects.equals(hairdresserId, that.hairdresserId)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u0026\u0026 Objects.equals(date, that.date)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u0026\u0026 Objects.equals(status, that.status);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return Objects.hash(clientId, hairdresserId, date, status);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 1,
      "ya0-yuan": 216
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/appointment/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.commands.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Lists all appointments in HairStyleX to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class ListAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_appt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/AddClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Adds a client to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddClientCommand extends AddPersonCommand\u003cClient\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_client\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Creates an AddClientCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AddClientCommand(Client client) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(client);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void addToModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getSuccessMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/DeleteClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.DeleteEntityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Deletes a client identified using it\u0027s displayed client ID in HairStyleX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteClientCommand extends DeleteEntityCommand\u003cClientId\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_client\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \": Deletes the client identified by the Client ID used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Parameters: CLIENT_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteClientCommand(ClientId targetId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(targetId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || (other instanceof DeleteClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 targetId.equals(((DeleteClientCommand) other).targetId)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String deleteFromModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Client clientToDelete \u003d model.getClientById(targetId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (clientToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 37,
      "iamjamestan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/EditClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class EditClientCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_client\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in HairStyleX.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ClientId clientId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param clientId of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public EditClientCommand(ClientId clientId, EditClientDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Client clientToEdit \u003d model.getClientById(clientId);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (clientToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_ID);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Gender updatedGender \u003d editClientDescriptor.getGender().orElse(clientToEdit.getGender());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Client(clientToEdit.getId(), updatedName, updatedPhone,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                updatedEmail, updatedGender, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!(other instanceof EditClientCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        EditClientCommand e \u003d (EditClientCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clientId.equals(e.clientId)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pooty3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, gender, address, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 217,
      "iamjamestan": 17,
      "theyifan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/FilterClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.ClientNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Filters and lists all clients whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class FilterClientCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter_client\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all clients whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private final ClientNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public FilterClientCommand(ClientNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENT_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                || (other instanceof FilterClientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterClientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/client/ListClientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.commands.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Lists all clients in HairStyleX to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class ListClientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_client\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 25,
      "iamjamestan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/hairdresser/AddHairdresserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.commands.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.AddPersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Adds a hairdresser to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddHairdresserCommand extends AddPersonCommand\u003cHairdresser\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_hairdresser\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a hairdresser to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_SPECIALISATION + \"SPECIALISATION]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_TITLE + \"Senior Stylist \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_SPECIALISATION + \"Perm \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_SPECIALISATION + \"Color\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New hairdresser added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HAIRDRESSER \u003d \"This hairdresser already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Hairdresser}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public AddHairdresserCommand(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(hairdresser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void addToModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (model.hasHairdresser(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_HAIRDRESSER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        model.addHairdresser(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getSuccessMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 7,
      "iamjamestan": 1,
      "theyifan": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/hairdresser/DeleteHairdresserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.commands.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.DeleteEntityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Deletes a hairdresser identified using it\u0027s displayed index from docX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteHairdresserCommand extends DeleteEntityCommand\u003cHairdresserId\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_hairdresser\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \": Deletes the hairdresser identified by the hairdresser ID used in the displayed hairdresser list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"Parameters: HAIRDRESSER_ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_DELETE_HAIRDRESSER_SUCCESS \u003d \"Deleted Hairdresser: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteHairdresserCommand(HairdresserId targetId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(targetId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String deleteFromModel(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Hairdresser hairdresserToDelete \u003d model.getHairdresserById(targetId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hairdresserToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_HAIRDRESSER_DISPLAYED_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        model.deleteHairdresser(hairdresserToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return String.format(MESSAGE_DELETE_HAIRDRESSER_SUCCESS, hairdresserToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 4,
      "iamjamestan": 8,
      "theyifan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/hairdresser/EditHairdresserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.commands.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_HAIRDRESSERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Edits the details of an existing hairdresser in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class EditHairdresserCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_hairdresser\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the hairdresser identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + \"by the hairdresser ID used in the displayed hairdresser list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"[\" + PREFIX_SPECIALISATION + \"SPECIALISATION]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_EDIT_HAIRDRESSER_SUCCESS \u003d \"Edited Hairdresser: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HAIRDRESSER \u003d \"This hairdresser already exists in the HairStyleX.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final HairdresserId hairdresserId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final EditHairdresserDescriptor editHairdresserDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param hairdresserId of the hairdresser in the filtered hairdresser list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param editHairdresserDescriptor details to edit the hairdresser with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public EditHairdresserCommand(HairdresserId hairdresserId, EditHairdresserDescriptor editHairdresserDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(editHairdresserDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresserId \u003d hairdresserId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.editHairdresserDescriptor \u003d new EditHairdresserDescriptor(editHairdresserDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Hairdresser hairdresserToEdit \u003d model.getHairdresserById(hairdresserId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hairdresserToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_HAIRDRESSER_DISPLAYED_ID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser editedHairdresser \u003d createEditedHairdresser(hairdresserToEdit, editHairdresserDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!hairdresserToEdit.isSameHairdresser(editedHairdresser) \u0026\u0026 model.hasHairdresser(editedHairdresser)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_HAIRDRESSER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        model.setHairdresser(hairdresserToEdit, editedHairdresser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        model.updateFilteredHairdresserList(PREDICATE_SHOW_ALL_HAIRDRESSERS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_HAIRDRESSER_SUCCESS, editedHairdresser));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates and returns a {@code Hairdresser} with the details of {@code hairdresserToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * edited with {@code editHairdresserDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private static Hairdresser createEditedHairdresser(Hairdresser hairdresserToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                                       EditHairdresserDescriptor editHairdresserDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assert hairdresserToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Name updatedName \u003d editHairdresserDescriptor.getName().orElse(hairdresserToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Phone updatedPhone \u003d editHairdresserDescriptor.getPhone().orElse(hairdresserToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Email updatedEmail \u003d editHairdresserDescriptor.getEmail().orElse(hairdresserToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Gender updatedGender \u003d editHairdresserDescriptor.getGender().orElse(hairdresserToEdit.getGender());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Title updatedTitle \u003d editHairdresserDescriptor.getTitle().orElse(hairdresserToEdit.getTitle());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Set\u003cSpecialisation\u003e updatedSpecs \u003d editHairdresserDescriptor.getSpecs().orElse(hairdresserToEdit.getSpecs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Hairdresser(hairdresserToEdit.getId(), updatedName,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                updatedPhone, updatedEmail, updatedGender, updatedTitle, updatedSpecs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!(other instanceof EditHairdresserCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        EditHairdresserCommand e \u003d (EditHairdresserCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return hairdresserId.equals(e.hairdresserId)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                \u0026\u0026 editHairdresserDescriptor.equals(e.editHairdresserDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Stores the details to edit the hairdresser with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * corresponding field value of the hairdresser."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static class EditHairdresserDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private Set\u003cSpecialisation\u003e specs;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public EditHairdresserDescriptor() {}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public EditHairdresserDescriptor(EditHairdresserDescriptor toCopy) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            setSpecs(toCopy.specs);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, gender, title, specs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * Sets {@code specs} to this object\u0027s {@code specs}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * A defensive copy of {@code specs} is used internally."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setSpecs(Set\u003cSpecialisation\u003e specs) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specs \u003d (specs !\u003d null) ? new HashSet\u003c\u003e(specs) : null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * Returns an unmodifiable specialisation set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code specs} is null."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Optional\u003cSet\u003cSpecialisation\u003e\u003e getSpecs() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return (specs !\u003d null) ? Optional.of(Collections.unmodifiableSet(specs)) : Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (!(other instanceof EditHairdresserDescriptor)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            EditHairdresserDescriptor e \u003d (EditHairdresserDescriptor) other;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    \u0026\u0026 getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    \u0026\u0026 getSpecs().equals(e.getSpecs());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 13,
      "theyifan": 229
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/hairdresser/FilterHairdresserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.logic.commands.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Filters and lists all hairdressers whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class FilterHairdresserCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter_hairdresser\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all hairdressers whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private final HairdresserNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public FilterHairdresserCommand(HairdresserNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        model.updateFilteredHairdresserList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                String.format(Messages.MESSAGE_HAIRDRESSER_LISTED_OVERVIEW, model.getFilteredHairdresserList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                || (other instanceof FilterHairdresserCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterHairdresserCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/hairdresser/ListHairdresserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.commands.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_HAIRDRESSERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Lists all hairdressers in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class ListHairdresserCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_hairdresser\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all hairdressers\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        model.updateFilteredHairdresserList(PREDICATE_SHOW_ALL_HAIRDRESSERS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAliasCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.AddAliasCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddAliasCommandParser extends AddCommandParser\u003cAddAliasCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AddAliasCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_OLD_COMMAND, PREFIX_NEW_COMMAND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_OLD_COMMAND, PREFIX_NEW_COMMAND)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    AddAliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new AddAliasCommand(argMultimap.getValue(PREFIX_OLD_COMMAND).get(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                argMultimap.getValue(PREFIX_NEW_COMMAND).get());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class AddCommandParser\u003cT extends AddCommand\u003e implements Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class AddCommandParser extends AddBaseCommandParser\u003cPerson\u003e{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public AddCommand\u003cPerson\u003e parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Person person \u003d new Person(name, phone, email, gender);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new AddCommand\u003c\u003e(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Person person \u003d new Person(name, phone, email, gender);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new AddCommand(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.DeleteAliasCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.appointment.ListAppointmentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.client.ListClientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.ListHairdresserCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.appointment.AddAppointmentCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.appointment.DeleteAppointmentCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.appointment.EditAppointmentCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.appointment.FilterAppointmentCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.client.AddClientCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.client.DeleteClientCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.client.EditClientCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.client.FilterClientCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.hairdresser.AddHairdresserCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.hairdresser.DeleteHairdresserCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.hairdresser.EditHairdresserCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.hairdresser.FilterHairdresserCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final String commandAlias \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        CommandWord commandWord;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            commandWord \u003d CommandAliasSet.getInstance().getCommandWord(commandAlias);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } catch (CommandWordException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case ADD_CLIENT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new AddClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case ADD_HAIRDRESSER:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return new AddHairdresserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case ADD_APPOINTMENT:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case EDIT_CLIENT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new EditClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case EDIT_HAIRDRESSER:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return new EditHairdresserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case EDIT_APPOINTMENT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new EditAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case DELETE_CLIENT:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new DeleteClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case DELETE_HAIRDRESSER:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return new DeleteHairdresserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case DELETE_APPOINTMENT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        case FILTER_HAIRDRESSER:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return new FilterHairdresserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        case FILTER_CLIENT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return new FilterClientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        case FILTER_APPT:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return new FilterAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case LIST_CLIENT:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new ListClientCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case LIST_HAIRDRESSER:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return new ListHairdresserCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case LIST_APPOINTMENT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case ADD_ALIAS:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new AddAliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        case DELETE_ALIAS:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return new DeleteAliasCommand(arguments.trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 46,
      "iamjamestan": 8,
      "theyifan": 10,
      "ya0-yuan": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_SPECIALISATION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // prefixes for Appointment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_CLIENT_ID \u003d new Prefix(\"cid/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_HAIRDRESSER_ID \u003d new Prefix(\"hid/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_APPT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Prefix PREFIX_APPT_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String PLACEHOLDER_CLIENT_INDEX \u003d \"CLIENT_INDEX\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String PLACEHOLDER_HAIRDRESSER_INDEX \u003d \"HAIRDRESSER_INDEX\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String PLACEHOLDER_DATE_OF_APPT \u003d \"DATE_OF_APPT\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String PLACEHOLDER_START_TIME \u003d \"START_TIME\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public static final String PLACEHOLDER_APPT_STATUS \u003d \"APPT_STATUS\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final Prefix PREFIX_OLD_COMMAND \u003d new Prefix(\"old/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final Prefix PREFIX_NEW_COMMAND \u003d new Prefix(\"new/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 13,
      "pooty3": 4,
      "ya0-yuan": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class DeleteCommandParser\u003cT extends DeleteCommand\u003e implements Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public T parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return getCommand(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, getMessageUsage()), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public abstract T getCommand(String args) throws ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract String getMessageUsage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 5,
      "iamjamestan": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String clientId} into a {@code ClientId}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code clientId} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static ClientId parseClientId(String clientId) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedClientId \u003d clientId.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!ClientId.isValidId(trimmedClientId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(ClientId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new ClientId(trimmedClientId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String hairdresserId} into a {@code HairdresserId}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code clientId} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static HairdresserId parseHairdresserId(String hairdresserId) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedHairdresserId \u003d hairdresserId.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!HairdresserId.isValidId(trimmedHairdresserId)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(HairdresserId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new HairdresserId(trimmedHairdresserId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String appointmentId} into a {@code AppointmentId}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code clientId} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static AppointmentId parseAppointmentId(String appointmentId) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointmentId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedAppointmentId \u003d appointmentId.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentId.isValidId(trimmedAppointmentId)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(AppointmentId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new AppointmentId(trimmedAppointmentId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Parses a {@code String specialisation} into a {@code Specialisation}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws ParseException if the given {@code spec} is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Specialisation parseSpecialisation(String spec) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(spec);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String trimmedSpec \u003d spec.trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Specialisation.isValidSpecialisation(trimmedSpec)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new ParseException(Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Specialisation(trimmedSpec);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e specialisations} into a {@code Set\u003cSpecialisation\u003e}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Set\u003cSpecialisation\u003e parseSpecialisations(Collection\u003cString\u003e specs) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(specs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Set\u003cSpecialisation\u003e specSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (String spec : specs) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            specSet.add(parseSpecialisation(spec));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return specSet;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String date} into a {@code AppointmentDate}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static AppointmentDate parseAppointmentDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentDate.isValidAppointmentDate(trimmedDate)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(AppointmentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new AppointmentDate(trimmedDate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String time} into a {@code AppointmentTime}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static AppointmentTime parseAppointmentTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentTime.isValidAppointmentTime(trimmedTime)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(AppointmentTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new AppointmentTime(trimmedTime);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses a {@code String status} into a {@code AppointmentStatus}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static AppointmentStatus parseAppointmentStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String trimmedStatus \u003d status.trim().toUpperCase();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentStatus.isValidAppointmentStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(AppointmentStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return AppointmentStatus.valueOf(trimmedStatus);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 105,
      "theyifan": 45,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/AddAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HAIRDRESSER_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.appointment.AddAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddAppointmentCommandParser extends AddCommandParser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AddAppointmentCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_CLIENT_ID, PREFIX_HAIRDRESSER_ID,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        PREFIX_DATE_OF_APPT, PREFIX_START_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT_ID, PREFIX_HAIRDRESSER_ID, PREFIX_DATE_OF_APPT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                PREFIX_START_TIME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ClientId clientId \u003d ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .parseClientId(argMultimap.getValue(PREFIX_CLIENT_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        HairdresserId hairdresserId \u003d ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .parseHairdresserId(argMultimap.getValue(PREFIX_HAIRDRESSER_ID).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        AppointmentDate date \u003d ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .parseAppointmentDate(argMultimap.getValue(PREFIX_DATE_OF_APPT).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        AppointmentTime time \u003d ParserUtil"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .parseAppointmentTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new AddAppointmentCommand(clientId, hairdresserId, date, time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 47,
      "pooty3": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/DeleteAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Parses input arguments and creates a new DeleteAppointmentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteAppointmentCommandParser extends DeleteCommandParser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteAppointmentCommand getCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        AppointmentId id \u003d ParserUtil.parseAppointmentId(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new DeleteAppointmentCommand(id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getMessageUsage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return DeleteAppointmentCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 17,
      "pooty3": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/EditAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPT_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.commands.appointment.EditAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Parses input arguments and creates a new EditAppointmentCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * and returns an EditAppointmentCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public EditAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_APPT_STATUS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        AppointmentId appointmentId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            appointmentId \u003d ParserUtil.parseAppointmentId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        EditAppointmentCommand.ChangedAppointmentDescriptor changedAppointmentDescriptor \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                new EditAppointmentCommand.ChangedAppointmentDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPT_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            changedAppointmentDescriptor.setStatus(ParserUtil.parseAppointmentStatus(argMultimap"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    .getValue(PREFIX_APPT_STATUS).get().toUpperCase()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!changedAppointmentDescriptor.isStatusChanged()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new ParseException(EditAppointmentCommand.MESSAGE_STATUS_MISSING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new EditAppointmentCommand(appointmentId, changedAppointmentDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/appointment/FilterAppointmentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.logic.parser.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.commands.appointment.FilterAppointmentCommand.MESSAGE_NOT_STATED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_APPT_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_APPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HAIRDRESSER_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.appointment.FilterAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.commands.appointment.FilterAppointmentCommand.FilterAppointmentDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Parses input arguments and creates a new FilterAppointmentCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class FilterAppointmentCommandParser implements Parser\u003cFilterAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterAppointmentCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * and returns an FilterAppointmentCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public FilterAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_ID, PREFIX_HAIRDRESSER_ID,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                        PREFIX_DATE_OF_APPT, PREFIX_APPT_STATUS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        FilterAppointmentDescriptor descriptors \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                new FilterAppointmentDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLIENT_ID).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            ClientId pid \u003d ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    .parseClientId(argMultimap.getValue(PREFIX_CLIENT_ID).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            descriptors.setClientId(Optional.of(pid));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HAIRDRESSER_ID).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            HairdresserId did \u003d ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    .parseHairdresserId(argMultimap.getValue(PREFIX_HAIRDRESSER_ID).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            descriptors.setHairdresserId(Optional.of(did));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_APPT).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            AppointmentDate date \u003d ParserUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    .parseAppointmentDate(argMultimap.getValue(PREFIX_DATE_OF_APPT).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            descriptors.setDate(Optional.of(date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_APPT_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            AppointmentStatus status \u003d ParserUtil"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    .parseAppointmentStatus(argMultimap.getValue(PREFIX_APPT_STATUS).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            descriptors.setStatus(Optional.of(status));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    FilterAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (descriptors.noFieldStated()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_NOT_STATED,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    FilterAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return new FilterAppointmentCommand(descriptors);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/AddClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.client.AddClientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddClientCommandParser extends AddCommandParser\u003cAddClientCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AddClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Client client \u003d new Client(name, phone, email, gender, address, tagList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new AddClientCommand(client);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/DeleteClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.client.DeleteClientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Parses input arguments and creates a new DeleteClientCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteClientCommandParser extends DeleteCommandParser\u003cDeleteClientCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteClientCommand getCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ClientId id \u003d ParserUtil.parseClientId(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new DeleteClientCommand(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getMessageUsage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return DeleteClientCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 18,
      "iamjamestan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/client/EditClientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.logic.parser.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commands.client.EditClientCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class EditClientCommandParser implements Parser\u003cEditClientCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public EditClientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        ClientId clientId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            clientId \u003d ParserUtil.parseClientId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    EditClientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            editClientDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(EditClientCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new EditClientCommand(clientId, editClientDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 91,
      "iamjamestan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/hairdresser/AddHairdresserCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.parser.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.AddHairdresserCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AddHairdresserCommandParser extends AddCommandParser\u003cAddHairdresserCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddHairdresserCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * and returns an AddHairdresserCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public AddHairdresserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        PREFIX_GENDER, PREFIX_TITLE, PREFIX_SPECIALISATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                PREFIX_GENDER, PREFIX_TITLE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    AddHairdresserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Set\u003cSpecialisation\u003e specList \u003d ParserUtil.parseSpecialisations(argMultimap.getAllValues(PREFIX_SPECIALISATION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser hairdresser \u003d new Hairdresser(name, phone, email, gender, title, specList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new AddHairdresserCommand(hairdresser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 2,
      "iamjamestan": 3,
      "theyifan": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/hairdresser/DeleteHairdresserCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.parser.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.DeleteHairdresserCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DeleteHairdresserCommandParser extends DeleteCommandParser\u003cDeleteHairdresserCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public DeleteHairdresserCommand getCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        HairdresserId id \u003d ParserUtil.parseHairdresserId(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new DeleteHairdresserCommand(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public String getMessageUsage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return DeleteHairdresserCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 8,
      "iamjamestan": 6,
      "theyifan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/hairdresser/EditHairdresserCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.parser.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.EditHairdresserCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.EditHairdresserCommand.EditHairdresserDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Parses input arguments and creates a new EditHairdresserCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class EditHairdresserCommandParser implements Parser\u003cEditHairdresserCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public EditHairdresserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        PREFIX_GENDER, PREFIX_TITLE, PREFIX_SPECIALISATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        HairdresserId hairdresserId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            hairdresserId \u003d ParserUtil.parseHairdresserId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditHairdresserCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        EditHairdresserDescriptor editHairdresserDescriptor \u003d new EditHairdresserDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIALISATION).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            editHairdresserDescriptor.setSpecs(ParserUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    .parseSpecialisations(argMultimap.getAllValues(PREFIX_SPECIALISATION)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!editHairdresserDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new ParseException(EditHairdresserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new EditHairdresserCommand(hairdresserId, editHairdresserDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 4,
      "pooty3": 3,
      "theyifan": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.UniqueClientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.hairdresser.UniqueHairdresserList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final UniqueHairdresserList hairdressers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final IdCounter idCounter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final CommandAliasSet commandAliasSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdressers \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        idCounter \u003d IdCounter.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        commandAliasSet \u003d CommandAliasSet.getInstance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Replaces the content of the idCounter with {@code idCounter}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code appointments} must not contain duplicate entities."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setIdCounter(IdCounter idCounter) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.idCounter.setCurrentMaxClientId(idCounter.getCurrentMaxClientId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.idCounter.setCurrentMaxHairdresserId(idCounter.getCurrentMaxHairdresserId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.idCounter.setCurrentMaxAppointmentId(idCounter.getCurrentMaxAppointmentId());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setCommandAliasSet(CommandAliasSet aliasSet) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandAliasSet.setUpAliasSet(aliasSet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        setHairdressers(newData.getHairdresserList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        setHairdressers(newData.getHairdresserList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        setIdCounter(newData.getIdCounter());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dhairdresser-level operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns true if a hairdresser with the same identity as {@code hairdresser} exists in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public boolean hasHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(hairdresser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return hairdressers.contains(hairdresser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Adds a hairdresser to the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * The hairdresser must not already exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void addHairdresser(Hairdresser p) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdressers.add(p);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Replaces the given hairdresser {@code target} in the list with {@code editedHairdresser}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * The hairdresser identity of {@code editedHairdresser} must not be the same as"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * another existing hairdresser in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser(Hairdresser target, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireNonNull(editedHairdresser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdressers.setHairdresser(target, editedHairdresser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the contents of the hairdresser list with {@code hairdressers}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code hairdressers} must not contain duplicate persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public void setHairdressers(List\u003cHairdresser\u003e hairdressers) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.hairdressers.setHairdressers(hairdressers);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void removeHairdresser(Hairdresser key) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdressers.remove(key);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dclient level operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the contents of the client list with {@code clients}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Adds a client to the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The client must not already exist in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clients.add(p);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the given client {@code client} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Client with given id"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client getClientById(ClientId clientId) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clients.findClientById(clientId);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Hairdresser with given id"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Hairdresser getHairdresserById(HairdresserId hairdresserId) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return hairdressers.findHairdresserById(hairdresserId);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Appointment with given id"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Appointment getAppointmentById(AppointmentId appointmentId) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointmentId);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointments.findAppointmentById(appointmentId);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointment level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the contents of the appointment list with {@code appointments}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code appointment} must not contain duplicate persons."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void removeAppointment(Appointment key) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.remove(key);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * When patient is modified, update patient info in appointment"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateAppointmentWhenClientIsUpdated(ClientId clientId, Client editedClient) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.updateClient(clientId, editedClient);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a duplicate {@code appointment} exists in HairStyleX."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointments.contains(appointment);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Adds an appointment."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The appointment must not already exist."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.add(appointment);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code changedAppointment}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code target} must exist in HairStyleX."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The new appointment must not be a duplicate of an existing appointment in HairStyleX."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setAppointment(Appointment target, Appointment changedAppointment) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(changedAppointment);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.setAppointment(target, changedAppointment);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Set client in appointments to null when the client with the id is deleted"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateAppointmentWhenClientDeleted(ClientId clientId) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.setClientToNull(clientId);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Set hairdresser in appointments to null when the hairdresser with the id is deleted"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateAppointmentWhenHairdresserDeleted(HairdresserId hairdresserId) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.setHairdresserToNull(hairdresserId);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * When hairdresser is modified, update hairdresser info in appointment"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateAppointmentWhenHairdresserIsUpdated(HairdresserId hairdresserId, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.updateHairdresser(hairdresserId, editedHairdresser);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public ObservableList\u003cHairdresser\u003e getHairdresserList() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return hairdressers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public IdCounter getIdCounter() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandAliasSet getCommandAliasSet() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return commandAliasSet;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 clients.equals(((AddressBook) other).clients)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 hairdressers.equals(((AddressBook) other).hairdressers)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 appointments.equals(((AddressBook) other).appointments)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 idCounter.equals(((AddressBook) other).idCounter));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Objects.hash(hairdressers, appointments, idCounter, clients);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 21,
      "iamjamestan": 176,
      "theyifan": 44,
      "ya0-yuan": 3,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Entity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public interface Entity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    boolean isSame(Entity entity);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an ID."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public abstract class Id {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \"ID must a positive integer.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code PersonId}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param id a valid person ID."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Id(String id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Id(int id) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a given string is a valid person ID."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        int positiveNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            positiveNumber \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (positiveNumber \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id \u003d\u003d ((Id) other).id); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Integer.hashCode(id);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Integer.toString(id);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IdCounter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * This class is a singleton, only one instance can exist at any one time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Stores the current maximum client, hairdresser and appointment IDs to generate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * the next unique client, hairdresser, or appointment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public final class IdCounter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static IdCounter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static int clientId \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static int hairdresserId \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private static int appointmentId \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private IdCounter() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static IdCounter getInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            instance \u003d new IdCounter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates a new unique client ID when called."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ClientId generateNewClientId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clientId +\u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new ClientId(String.valueOf(clientId));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates a new unique hairdresser ID when called."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public HairdresserId generateNewHairdresserId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        hairdresserId +\u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new HairdresserId(String.valueOf(hairdresserId));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Creates a new unique appointment ID when called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AppointmentId generateNewAppointmentId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointmentId +\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new AppointmentId(String.valueOf(appointmentId));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setCurrentMaxClientId(int id) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clientId \u003d id;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setCurrentMaxHairdresserId(int id) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        hairdresserId \u003d id;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setCurrentMaxAppointmentId(int id) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointmentId \u003d id;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int getCurrentMaxClientId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clientId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int getCurrentMaxHairdresserId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return hairdresserId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int getCurrentMaxAppointmentId() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    Predicate\u003cHairdresser\u003e PREDICATE_SHOW_ALL_HAIRDRESSERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Client with given id"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Client getClientById(ClientId clientId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Hairdresser with given id"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Hairdresser getHairdresserById(HairdresserId hairdresserId);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Return object Appointment with given id"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Appointment getAppointmentById(AppointmentId appointmentId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Deletes the given client."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * The client must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    void deleteClient(Client client);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code client} must not already exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * The person identity of {@code editedClient} must not be the same as another existing client in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /** Returns an unmodifiable view of the filtered client list */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns true if a hairdresser with the same identity as {@code hairdresser} exists in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    boolean hasHairdresser(Hairdresser hairdresser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Deletes the given hairdresser."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * The hairdresser must exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    void deleteHairdresser(Hairdresser target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Adds the given hairdresser."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * {@code hairdresser} must not already exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    void addHairdresser(Hairdresser hairdresser);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Replaces the given hairdresser {@code target} with {@code editedHairdresser}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * The hairdresser identity of {@code editedHairdresser} must not be"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * the same as another existing hairdresser in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    void setHairdresser(Hairdresser target, Hairdresser editedHairdresser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered hairdresser list */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    ObservableList\u003cHairdresser\u003e getFilteredHairdresserList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Updates the filter of the filtered hairdresser list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    void updateFilteredHairdresserList(Predicate\u003cHairdresser\u003e predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if an appointment with the same identity as {@code appointment} exists in the HairStyleX."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Adds the appointment."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code appointment} must not be a duplicate"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Adds the appointment."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code appointment} must not be a duplicate"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    void deleteAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Replaces the given appointment {@code target} with {@code changedAppointment}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code target} must exist in the HairStyleX."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The new appointment must not be the same as another existing appointment in HairStyleX."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    void setAppointment(Appointment target, Appointment changedAppointment);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    List\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an unmodifiable view of the filtered appointment list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns the selected appointment in the filtered appointment list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * null if no appointment is selected."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    Appointment getSelectedAppointment();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Sets the selected appointment in the filtered appointment list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    void setSelectedAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Selected appointment in the filtered appointment list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * null if no appointment is selected."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ReadOnlyProperty\u003cAppointment\u003e selectedAppointmentProperty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code appointment}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 71,
      "pooty3": 35,
      "nicktohzyu": 2,
      "theyifan": 25,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final FilteredList\u003cHairdresser\u003e filteredHairdressers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final SimpleObjectProperty\u003cAppointment\u003e selectedAppointment \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        filteredHairdressers \u003d new FilteredList\u003c\u003e(this.addressBook.getHairdresserList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client getClientById(ClientId clientId) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(clientId);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return addressBook.getClientById(clientId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Hairdresser getHairdresserById(HairdresserId hairdresserId) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(hairdresserId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return addressBook.getHairdresserById(hairdresserId);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Appointment getAppointmentById(AppointmentId appointmentId) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointmentId);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return addressBook.getAppointmentById(appointmentId);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Client \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return addressBook.hasClient(client);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void deleteClient(Client client) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        addressBook.removeClient(client);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.updateAppointmentWhenClientDeleted(client.getId());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        addressBook.addClient(client);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        addressBook.setClient(target, editedClient);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.updateAppointmentWhenClientIsUpdated(target.getId(), editedClient);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Hairdresser \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public boolean hasHairdresser(Hairdresser person) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return addressBook.hasHairdresser(person);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void deleteHairdresser(Hairdresser target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        addressBook.removeHairdresser(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.updateAppointmentWhenHairdresserDeleted(target.getId());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        logger.info(\"Model: Deleted Hairdresser \" + target.getId());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void addHairdresser(Hairdresser person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        addressBook.addHairdresser(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        updateFilteredHairdresserList(PREDICATE_SHOW_ALL_HAIRDRESSERS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        logger.info(\"Model: Added Hairdresser \" + person.getId());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser(Hairdresser target, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        requireAllNonNull(target, editedHairdresser);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        addressBook.setHairdresser(target, editedHairdresser);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.updateAppointmentWhenHairdresserIsUpdated(target.getId(), editedHairdresser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        logger.info(\"Model: Edited Hairdresser \" + editedHairdresser.getId());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return addressBook.hasAppointment(appointment);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.removeAppointment(target);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setAppointment(Appointment target, Appointment changedAppointment) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(target, changedAppointment);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.setAppointment(target, changedAppointment);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * This list will not contain any duplicate appointments."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public List\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return addressBook.getAppointmentList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Hairdresser List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Hairdresser} backed by the internal list of"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public ObservableList\u003cHairdresser\u003e getFilteredHairdresserList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return filteredHairdressers;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void updateFilteredHairdresserList(Predicate\u003cHairdresser\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        filteredHairdressers.setPredicate(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * {@code versionedDocX}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected appointment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ReadOnlyProperty\u003cAppointment\u003e selectedAppointmentProperty() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return selectedAppointment;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Appointment getSelectedAppointment() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return selectedAppointment.getValue();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setSelectedAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointment !\u003d null \u0026\u0026 !filteredAppointments.contains(appointment)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        selectedAppointment.setValue(appointment);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Ensures {@code selectedAppointment} is a valid appointment in {@code filteredAppointments}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private void ensureSelectedAppointmentIsValid(ListChangeListener.Change\u003c? extends Appointment\u003e change) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (selectedAppointment.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                // null is always a valid selected appointment, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            boolean wasSelectedAppointmentReplaced \u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                            \u0026\u0026 change.getRemoved().contains(selectedAppointment.getValue());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (wasSelectedAppointmentReplaced) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                // Update selectedAppointment to its new value."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedAppointment.getValue());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                selectedAppointment.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            boolean wasSelectedAppointmentRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    .anyMatch(removedAppointment -\u003e selectedAppointment.getValue()"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                            .isSameAppointment(removedAppointment));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (wasSelectedAppointmentRemoved) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                // Select the appointment that came before it in the list,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                // or clear the selection if there is no such appointment."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                selectedAppointment.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 124,
      "pooty3": 39,
      "nicktohzyu": 7,
      "theyifan": 37,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns an unmodifiable view of the hairdressers list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    ObservableList\u003cHairdresser\u003e getHairdresserList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This list will not contain any duplicate appointments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns IdCounter that keeps track of hairdressers\u0027, clients\u0027 and appointments\u0027 current max ID."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    IdCounter getIdCounter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    CommandAliasSet getCommandAliasSet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 5,
      "iamjamestan": 13,
      "theyifan": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueEntityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.DuplicateEntityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.EntityNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * A list of entities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * A entity is considered unique by comparing using {@code Entity#isSame(Entity)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * entities uses  Entity#isSame(Entity)) for equality so as to ensure that the entity being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * unique in terms of identity in the UniqueEntityList. However, the removal of a entity uses Entity#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * @see Entity#isSame(Entity)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class UniqueEntityList\u003cT extends Entity\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Returns true if the list contains an equivalent entity as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return internalList.stream().anyMatch(toCheck :: isSame);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract DuplicateEntityException duplicateException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract EntityNotFoundException notFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Adds a entity to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * The entity must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw duplicateException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the entity {@code entity} in the list with {@code editedEntity}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The identity of {@code editedEntity} must not be the same as another existing entity in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setEntity(T target, T editedEntity) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireAllNonNull(target, editedEntity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw notFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!target.isSame(editedEntity) \u0026\u0026 contains(editedEntity)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw duplicateException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        internalList.set(index, editedEntity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Removes the equivalent entity from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * The entity must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw notFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setEntities(UniqueEntityList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code entities} must not contain duplicate entities."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setEntities(List\u003cT\u003e entities) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        requireAllNonNull(entities);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!entitiesAreUnique(entities)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw duplicateException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        internalList.setAll(entities);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                || (other instanceof UniqueEntityList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntityList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Returns true if {@code entities} contains only unique entities."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private boolean entitiesAreUnique(List\u003cT\u003e entities) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        for (int i \u003d 0; i \u003c entities.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entities.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                if (entities.get(i).isSame(entities.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 137,
      "iamjamestan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.IdCounter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents an Appointment between a client and a hairdresser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class Appointment implements Entity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final AppointmentId id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ClientId clientId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final HairdresserId hairdresserId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final AppointmentDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final AppointmentTime time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final AppointmentStatus appointmentStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Client client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Hairdresser hairdresser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final AppointmentDuration duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Constructs an {@code Appointment} with a stated status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param client            A valid client."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param hairdresser       A valid hairdresser."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param date              A valid appointment date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param time              A valid appointment time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param appointmentStatus A valid appointmentStatus"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Appointment(Client client, Hairdresser hairdresser, AppointmentDate date,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                       AppointmentTime time, AppointmentStatus appointmentStatus) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(client, hairdresser, date, time, appointmentStatus);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d IdCounter.getInstance().generateNewAppointmentId();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.hairdresser \u003d hairdresser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clientId \u003d client.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresserId \u003d hairdresser.getId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointmentStatus \u003d appointmentStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.duration \u003d new AppointmentDuration();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * For id counter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This is an existing appointment and does not need to generate a new ID."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Appointment(AppointmentId id, Client client, Hairdresser hairdresser, AppointmentDate date,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                       AppointmentTime time, AppointmentStatus appointmentStatus) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(client, hairdresser, date, time, appointmentStatus);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresser \u003d hairdresser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clientId \u003d client.getId();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresserId \u003d hairdresser.getId();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.appointmentStatus \u003d appointmentStatus;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.duration \u003d new AppointmentDuration();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        str +\u003d \"Appointment - \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        str +\u003d \"Client ID: \" + clientId;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        str +\u003d \" Hairdresser ID: \" + hairdresserId;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        str +\u003d \" Date: \" + date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        str +\u003d \" Time: \" + time;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AppointmentId getId() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ClientId getClientId() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return clientId;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public HairdresserId getHairdresserId() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return hairdresserId;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Replaces the representation of the client in this appointment."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param newClient the client to replace the existing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return a new Appointment object with client replaced by the new client."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Appointment replaceClient(Client newClient) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return new Appointment("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                this.id,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                newClient,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.hairdresser,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.date,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.time,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.appointmentStatus"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Deletes the representation of the client in this appointment."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return a new Appointment object with client replaced by null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Appointment deleteClient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return replaceClient(this.client.setTombstone());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Hairdresser getHairdresser() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return hairdresser;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Replaces the representation of the Hairdresser in this appointment."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param newHairdresser the Hairdresser to replace the existing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return a new Appointment object with Hairdresser replaced by the new Hairdresser."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Appointment replaceHairdresser(Hairdresser newHairdresser) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return new Appointment("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                this.id,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.client,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                newHairdresser,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.date,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.time,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                this.appointmentStatus"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Deletes the representation of the hairdresser in this appointment."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return a new Appointment object with hairdresser replaced by null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Appointment deleteHairdresser() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return replaceHairdresser(this.hairdresser.setTombstone());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentDate getDate() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentTime getTime() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentStatus getAppointmentStatus() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return appointmentStatus;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public LocalDateTime startDateTime() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return LocalDateTime.of(date.date, time.time);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public LocalDateTime endDateTime() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return startDateTime().plusMinutes(duration.getNumMinutes());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean isSameAppointment(Appointment that) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return isSame(that);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean isSame(Entity that) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this.equals(that);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Checks if this appointment is in the past compared to system time."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return true if the appointment is in the past."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean isPast() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        LocalDateTime appointmentDateTime \u003d startDateTime();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return appointmentDateTime.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Checks if another appointment clashes with this appointment"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return true if they clash."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean isClash(Appointment that) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // There is a clash IFF the start time of either is in between the start and end time of the other"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (this.startDateTime().isAfter(that.startDateTime())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                \u0026\u0026 this.startDateTime().isBefore(that.endDateTime())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        } else if (that.startDateTime().isAfter(this.startDateTime())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                \u0026\u0026 that.startDateTime().isBefore(this.endDateTime())) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (!(o instanceof Appointment)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Appointment that \u003d (Appointment) o;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (!this.hairdresserId.equals(that.hairdresserId)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (!this.clientId.equals(that.clientId)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (!this.date.equals(that.date)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        if (!this.time.equals(that.time)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Objects.hash(id, clientId, hairdresserId, date, time);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 7,
      "iamjamestan": 40,
      "nicktohzyu": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents an appointment\u0027s date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAppointmentDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class AppointmentDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        \"Appointment date should follow ISO8601 format (YYYY-MM-DD) and be a valid calendar date.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Constructs a {@code AppointmentDate}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param date a valid date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentDate(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        checkArgument(isValidAppointmentDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Returns true if a given string is a valid appointment date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static boolean isValidAppointmentDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            LocalDate.parse(test, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            || (other instanceof AppointmentDate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            \u0026\u0026 date.equals(((AppointmentDate) other).date)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents an appointment\u0027s ID."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class AppointmentDuration {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            \"Appointment duration must a positive integer representing the number of minutes\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final int DEFAULT_DURATION \u003d 120;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final int duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentDuration() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.duration \u003d DEFAULT_DURATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return number of minutes equivalent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public int getNumMinutes() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Id;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents an appointment\u0027s ID."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class AppointmentId extends Id {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \"Appointment ID must a positive integer.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an {@code AppointmentId}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param id a valid appointment ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AppointmentId(String id) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof AppointmentId // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id \u003d\u003d ((AppointmentId) other).id); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 24,
      "nicktohzyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents the status of an Appointment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public enum AppointmentStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    ACTIVE(\"The appointment is active.\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    CANCELLED(\"The appointment was cancelled.\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    COMPLETED(\"The appointment was completed.\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    MISSED(\"The appointment was missed.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment status can only be the following:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        + ACTIVE.name() + \": \" + ACTIVE.message + \" \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        + CANCELLED.name() + \": \" + CANCELLED.message + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        + COMPLETED.name() + \": \" + COMPLETED.message + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        + MISSED.name() + \": \" + MISSED.message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINT_PAST \u003d \"Only appointments in the past can be marked as \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            + COMPLETED + \" or \" + MISSED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * The message of the appointment status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    AppointmentStatus(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Returns true if a given string is a valid appointment status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static boolean isValidAppointmentStatus(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            AppointmentStatus appointmentStatus \u003d AppointmentStatus.valueOf(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 2,
      "nicktohzyu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Represents an appointment\u0027s time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAppointmentTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class AppointmentTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        \"Appointment time should be in the 24 hour format HH:mm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Constructs a {@code AppointmentTime}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param time a valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentTime(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        checkArgument(isValidAppointmentTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.time \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Returns true if a given string is a valid appointment time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static boolean isValidAppointmentTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(test, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            || (other instanceof AppointmentTime // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            \u0026\u0026 time.equals(((AppointmentTime) other).time)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return time.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/FutureAppointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotInFutureException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents an Appointment that must be created in the future compared to system time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class FutureAppointment extends Appointment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINT_FUTURE \u003d \"Appointments can only be made in the future\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an {@code Appointment} with a stated status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param client            A valid client."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param hairdresser       A valid hairdresser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param date              A valid appointment date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param time              A valid appointment time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public FutureAppointment(Client client, Hairdresser hairdresser, AppointmentDate date, AppointmentTime time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(client, hairdresser, date, time, AppointmentStatus.ACTIVE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        //TODO: Should it be !isFuture() instead?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (isPast()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new AppointmentNotInFutureException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/RecordContainsAppointmentIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Tests that a {@code Appointment}\u0027s {@code id} matches the given id."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class RecordContainsAppointmentIdPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final AppointmentId id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public RecordContainsAppointmentIdPredicate(AppointmentId id) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointment.getId().equals(id);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof RecordContainsAppointmentIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id.equals(((RecordContainsAppointmentIdPredicate) other).id)); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.UniqueEntityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * @see Appointment#isSameAppointment(Appointment)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class UniqueAppointmentList extends UniqueEntityList\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code changedAppointment}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * The appointment details of {@code changedAppointment} must not be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * the same as another existing appointment in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void setAppointment(Appointment target, Appointment changedAppointment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntity(target, changedAppointment);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Replace the content of the list with another list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param replacement the new list to replace the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(replacement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Replaces the contents of this list with {@code appointments}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * {@code appointments} must not contain duplicate appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(appointments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Update all appointments where a client is involved."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param toEdit       The Id of the client to be replaced."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param editedClient The object representing the new client."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateClient(ClientId toEdit, Client editedClient) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireAllNonNull(toEdit, editedClient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            Appointment currentAppointment \u003d internalList.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            if (currentAppointment.getClientId().equals(toEdit)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                Appointment newAppointment \u003d currentAppointment.replaceClient(editedClient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                internalList.set(i, newAppointment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Update all appointments where a hairdresser is involved."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param toEdit            The Id of the hairdresser to be replaced."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param editedHairdresser The object representing the new hairdresser."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void updateHairdresser(HairdresserId toEdit, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireAllNonNull(toEdit, editedHairdresser);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            Appointment currentAppointment \u003d internalList.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (currentAppointment.getHairdresserId().equals(toEdit)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                Appointment newAppointment \u003d currentAppointment.replaceHairdresser(editedHairdresser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                internalList.set(i, newAppointment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Update all appointments to reflect a deleted client."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param deleted id of the deleted client"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setClientToNull(ClientId deleted) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireAllNonNull(deleted);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            Appointment currentAppointment \u003d internalList.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            if (currentAppointment.getClientId().equals(deleted)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                Appointment newAppointment \u003d currentAppointment.deleteClient();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                internalList.set(i, newAppointment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Update all appointments to reflect a deleted hairdresser."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param deleted id of the deleted client"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public void setHairdresserToNull(HairdresserId deleted) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireAllNonNull(deleted);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            Appointment currentAppointment \u003d internalList.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            if (currentAppointment.getHairdresserId().equals(deleted)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                Appointment newAppointment \u003d currentAppointment.deleteHairdresser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                internalList.set(i, newAppointment);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns Appointment with given AppointmentId."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Appointment findAppointmentById(AppointmentId idToCheck) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(idToCheck);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Predicate\u003cAppointment\u003e predicate \u003d new RecordContainsAppointmentIdPredicate(idToCheck);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        FilteredList\u003cAppointment\u003e appointmentWithId \u003d internalList.filtered(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointmentWithId.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return appointmentWithId.get(0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateAppointmentException duplicateException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public AppointmentNotFoundException notFoundException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 23,
      "pooty3": 14,
      "nicktohzyu": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.EntityNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AppointmentNotFoundException extends EntityNotFoundException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public AppointmentNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"appointment\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 5,
      "nicktohzyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotInFutureException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Signals that the Appointment is not set in the future compared to system time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class AppointmentNotInFutureException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public AppointmentNotInFutureException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(\"Operation would result in creating an appointment in the past\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.DuplicateEntityException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * Signals that the operation will result in duplicate Appointment"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * (Appointments are considered duplicates if they have the same"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * client, hairdresser, date, and time)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DuplicateAppointmentException extends DuplicateEntityException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public DuplicateAppointmentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"appointments\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 4,
      "nicktohzyu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exception/DuplicateEntityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateEntityException(String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"Operation would result in duplicate \" + type);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateEntityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"Operation would result in duplicate entities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exception/EntityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class EntityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public EntityNotFoundException(String type) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"The \" + type + \" could not be found!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public EntityNotFoundException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"The entity could not be found\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Represents a Person\u0027s gender in the HairStyleX."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    enum GenderEnum {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Male, Female;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        \"Gender should be either F or M or f or m. Auto-converts to uppercase for readability\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[MFmf]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Gender MALE_GENDER \u003d new Gender(\"M\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final Gender FEMALE_GENDER \u003d new Gender(\"F\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public final GenderEnum value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param str A valid gender string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Gender(String str) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        requireNonNull(str);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        checkArgument(isValidGender(str), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        switch (str) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            value \u003d GenderEnum.Male;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            value \u003d GenderEnum.Female;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a given string is a valid gender number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        case Male:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return \"M\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        case Female:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            return \"F\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 47,
      "nicktohzyu": 27,
      "theyifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class Person implements Entity {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Gender gender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(name, phone, email, gender);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //TODO: Fix this abstraction"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public abstract \u003cT extends Id\u003e T getId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                        || otherPerson.getId().equals(getId()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean isSame(Entity other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (other instanceof Person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return isSamePerson((Person) other);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherPerson.getId().equals(getId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Objects.hash(name, phone, email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        builder.append((getGender().equals(Gender.MALE_GENDER) ? \"Mr \" : \"Ms \"))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 10,
      "iamjamestan": 18,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecordContainsClientIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code id} matches the given id."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class RecordContainsClientIdPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ClientId id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public RecordContainsClientIdPredicate(ClientId id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return client.getId().equals(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof RecordContainsClientIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id.equals(((RecordContainsClientIdPredicate) other).id)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RecordContainsHairdresserIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Tests that a {@code Hairdresser}\u0027s {@code id} matches the given id."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class RecordContainsHairdresserIdPredicate implements Predicate\u003cHairdresser\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final HairdresserId id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public RecordContainsHairdresserIdPredicate(HairdresserId id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean test(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return hairdresser.getId().equals(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof RecordContainsHairdresserIdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id.equals(((RecordContainsHairdresserIdPredicate) other).id)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.IdCounter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Client in HairStyleX record."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Client extends Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final ClientId id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client(Name name, Phone phone, Email email, Gender gender, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(name, phone, email, gender);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(address, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d IdCounter.getInstance().generateNewClientId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * For id counter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * This is an existing client and does not need to generate a new ID."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client(ClientId id, Name name, Phone phone, Email email, Gender gender, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(name, phone, email, gender);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(address, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ClientId getId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns a client which has been previously deleted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client setTombstone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Client(this.getId(), new Name(\"DELETED\"), this.getPhone(), this.getEmail(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                this.getGender(), this.getAddress(), this.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * This defines a weaker notion of equality between two clients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param otherClient the client to compare to"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return true if both clients have the same name and phone number."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return otherClient !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            \u0026\u0026 otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            \u0026\u0026 otherClient.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean isSame(Entity other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (other instanceof Client) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            Client client \u003d (Client) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return isSameClient(client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if both clients have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return otherClient.getName().equals(getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherClient.getGender().equals(getGender())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Objects.hash(address, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 126,
      "pooty3": 13,
      "nicktohzyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/ClientId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Id;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class ClientId extends Id {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \"Client ID must a positive integer.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code ClientId}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param id a valid client ID."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public ClientId(String id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof ClientId // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id \u003d\u003d ((ClientId) other).id); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.UniqueEntityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.RecordContainsClientIdPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class UniqueClientList extends UniqueEntityList\u003cClient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntity(target, editedClient);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(replacement);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(clients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns Client with given ClientId."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Client findClientById(ClientId idToCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(idToCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Predicate\u003cClient\u003e predicate \u003d new RecordContainsClientIdPredicate(idToCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        FilteredList\u003cClient\u003e clientWithId \u003d internalList.filtered(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (clientWithId.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return clientWithId.get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateClientException duplicateException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new DuplicateClientException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public ClientNotFoundException notFoundException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new ClientNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 46,
      "iamjamestan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.EntityNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class ClientNotFoundException extends EntityNotFoundException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public ClientNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"client\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.DuplicateEntityException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DuplicateClientException extends DuplicateEntityException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"clients\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/Hairdresser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.Entity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.IdCounter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Hairdresser in HairStyleX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Hairdresser extends Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final HairdresserId id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final Set\u003cSpecialisation\u003e specList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Hairdresser(Name name, Phone phone, Email email, Gender gender, Title title, Set\u003cSpecialisation\u003e specList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(name, phone, email, gender);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(title, specList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.specList.addAll(specList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d IdCounter.getInstance().generateNewHairdresserId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This is an existing hairdresser and does not need to generate a new ID."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Hairdresser(HairdresserId id, Name name, Phone phone, Email email, Gender gender, Title title,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                       Set\u003cSpecialisation\u003e specList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(name, phone, email, gender);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireAllNonNull(title, specList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.specList.addAll(specList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns an immutable specialisation set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Set\u003cSpecialisation\u003e getSpecs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Collections.unmodifiableSet(specList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public HairdresserId getId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns a hairdresser which has been previously deleted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Hairdresser setTombstone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Hairdresser(this.getId(), new Name(\"DELETED\"), this.getPhone(), this.getEmail(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                this.getGender(), this.getTitle(), this.getSpecs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This defines a weaker notion of equality between two hairdressers."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @param otherHairdresser the client to compare to"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * @return true if both hairdressers have the same name and phone number."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean isSameHairdresser(Hairdresser otherHairdresser) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (otherHairdresser \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return otherHairdresser !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                \u0026\u0026 otherHairdresser.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public boolean isSame(Entity other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (other instanceof Hairdresser) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            Hairdresser hairdresser \u003d (Hairdresser) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return isSameHairdresser(hairdresser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if both hairdressers have the same identity and data fields."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * This defines a stronger notion of equality between two hairdressers."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!(other instanceof Hairdresser)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Hairdresser otherHairdresser \u003d (Hairdresser) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return otherHairdresser.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getGender().equals(getGender())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 otherHairdresser.getSpecs().equals(getSpecs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return Objects.hash(title, specList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(\" Title: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .append(\" Specialisations: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        getSpecs().forEach(builder::append);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 127,
      "pooty3": 12,
      "nicktohzyu": 3,
      "theyifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/HairdresserId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.Id;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class HairdresserId extends Id {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            \"Hairdresser ID must a positive integer.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code HairdresserId}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param id a valid hairdresser ID."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public HairdresserId(String id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof HairdresserId // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 this.id \u003d\u003d ((HairdresserId) other).id); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.person.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Hairdresser\u0027s title in HairStyleX."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Titles can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs an {@code Title}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 56,
      "theyifan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/UniqueHairdresserList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.UniqueEntityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.RecordContainsHairdresserIdPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.hairdresser.exception.DuplicateHairdresserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.hairdresser.exception.HairdresserNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class UniqueHairdresserList extends UniqueEntityList\u003cHairdresser\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setHairdresser(Hairdresser target, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntity(target, editedHairdresser);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setHairdressers(UniqueHairdresserList replacement) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(replacement);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Replaces the contents of this list with {@code hairdressers}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * {@code hairdressers} must not contain duplicate hairdressers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public void setHairdressers(List\u003cHairdresser\u003e clients) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        setEntities(clients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns Hairdresser with given PersonId."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Hairdresser findHairdresserById(HairdresserId idToCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(idToCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        Predicate\u003cHairdresser\u003e predicate \u003d new RecordContainsHairdresserIdPredicate(idToCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        FilteredList\u003cHairdresser\u003e hairdresserWithId \u003d internalList.filtered(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hairdresserWithId.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return hairdresserWithId.get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateHairdresserException duplicateException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new DuplicateHairdresserException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public HairdresserNotFoundException notFoundException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new HairdresserNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pooty3": 41,
      "iamjamestan": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/exception/DuplicateHairdresserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.hairdresser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.DuplicateEntityException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class DuplicateHairdresserException extends DuplicateEntityException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public DuplicateHairdresserException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"hairdressers\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/hairdresser/exception/HairdresserNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.model.person.hairdresser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.exception.EntityNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class HairdresserNotFoundException extends EntityNotFoundException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public HairdresserNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(\"hairdresser\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/specialisation/Specialisation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.model.specialisation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Represents a Specialisation of a hairdresser in HairStyleX."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSpecialisation(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class Specialisation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    enum SpecEnum {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Color, Perm, HairExtension, Styling, HairConditioning, Straightening, ScalpTreatment, HairLossTreatment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Specialisations should be one of the following options: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"Color, Perm, HairExtension, Styling, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            + \"HairConditioning, Straightening, ScalpTreatment, HairLossTreatment.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            \"Color|Perm|HairExtension|Styling|HairConditioning|Straightening|ScalpTreatment|HairLossTreatment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public final SpecEnum specialisation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code Specialisation}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @param specialisation A valid specialisation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Specialisation(String specialisation) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        requireNonNull(specialisation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        checkArgument(isValidSpecialisation(specialisation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        switch (specialisation) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"Color\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.Color;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"Perm\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.Perm;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"HairExtension\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.HairExtension;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"Styling\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.Styling;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"HairConditioning\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.HairConditioning;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"Straightening\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.Straightening;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"ScalpTreatment\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.ScalpTreatment;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"HairLossTreatment\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specialisation \u003d SpecEnum.HairLossTreatment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Returns true if a given string is a valid specialisation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static boolean isValidSpecialisation(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                || (other instanceof Specialisation // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                \u0026\u0026 specialisation.equals(((Specialisation) other).specialisation)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return specialisation.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns specialisation in string format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String getSpecInString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        switch (specialisation) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case Color:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"Color\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case Perm:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"Perm\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case HairExtension:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"HairExtension\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case Styling:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"Styling\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case HairConditioning:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"HairConditioning\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case Straightening:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"Straightening\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case ScalpTreatment:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"ScalpTreatment\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case HairLossTreatment:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"HairLossTreatment\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \u0027[\u0027 + getSpecInString() + \u0027]\u0027;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 48,
      "theyifan": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Contains utility methods for populating {@code HairStyleX} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Client[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            new Client(new Name(\"Ivan Choo\"), new Phone(\"84213456\"), new Email(\"annayeoh@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                new Gender(\"M\"), new Address(\"Blk 47 Tampines Street 20 #17-35\"), getTagSet(\"shorthair\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            new Client(new Name(\"Kimberly Lim\"), new Phone(\"92837461\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    new Gender(\"F\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    getTagSet(\"longhair\", \"preferperm\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Hairdresser[] getSampleHairdressers() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Hairdresser[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            new Hairdresser(new Name(\"Anna Yeoh\"), new Phone(\"84213456\"), new Email(\"annayeoh@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                new Gender(\"F\"), new Title(\"Senior Stylist\"), getSpecSet(\"Perm\", \"Color\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            new Hairdresser(new Name(\"Bella Yu\"), new Phone(\"92837461\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                    new Gender(\"F\"), new Title(\"Shampooist\"), getSpecSet(\"HairLossTreatment\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (Hairdresser sampleHairdresser : getSampleHairdressers()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            sampleAb.addHairdresser(sampleHairdresser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns a specialisation set containing the list of strings given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Set\u003cSpecialisation\u003e getSpecSet(String... strings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .map(Specialisation::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 2,
      "pooty3": 2,
      "theyifan": 35,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAppointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " * Jackson-friendly version of {@link Appointment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final JsonAdaptedClient client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final JsonAdaptedHairdresser hairdresser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String dateOfAppt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String timeOfAppt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String appointmentStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppointment} with the given {@code appointment}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public JsonAdaptedAppointment(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  @JsonProperty(\"client\") JsonAdaptedClient client,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  @JsonProperty(\"hairdresser\") JsonAdaptedHairdresser hairdresser,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  @JsonProperty(\"dateOfAppt\") String dateOfAppt,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  @JsonProperty(\"timeOfAppt\") String timeOfAppt,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                  @JsonProperty(\"appointmentStatus\") String appointmentStatus) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresser \u003d hairdresser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.dateOfAppt \u003d dateOfAppt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.timeOfAppt \u003d timeOfAppt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointmentStatus \u003d appointmentStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Converts a given {@code Appointment} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.id \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.client \u003d new JsonAdaptedClient(source.getClient());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresser \u003d new JsonAdaptedHairdresser(source.getHairdresser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.dateOfAppt \u003d source.getDate().date.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.timeOfAppt \u003d source.getTime().time.truncatedTo(ChronoUnit.HOURS).toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointmentStatus \u003d source.getAppointmentStatus().name();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    AppointmentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final AppointmentId modelAid \u003d new AppointmentId(id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (client \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    Client.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final Client modelClient \u003d client.toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hairdresser \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    Hairdresser.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final Hairdresser modelHairdresser \u003d hairdresser.toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (dateOfAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    AppointmentDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentDate.isValidAppointmentDate(dateOfAppt)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(AppointmentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final AppointmentDate modelAppointmentDate \u003d new AppointmentDate(dateOfAppt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (timeOfAppt \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    AppointmentTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentTime.isValidAppointmentTime(timeOfAppt)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(AppointmentTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final AppointmentTime modelAppointmentTime \u003d new AppointmentTime(timeOfAppt);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (appointmentStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    AppointmentStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!AppointmentStatus.isValidAppointmentStatus(appointmentStatus)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(AppointmentStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final AppointmentStatus modelAppointmentStatus \u003d AppointmentStatus.valueOf(appointmentStatus);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Appointment(modelAid, modelClient, modelHairdresser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                modelAppointmentDate, modelAppointmentTime, modelAppointmentStatus);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class JsonAdaptedClient extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Constructs a {@code JsonAdaptedHairdresser} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                             @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                             @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(id, name, phone, email, gender);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts a given {@code Hairdresser} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(String.valueOf(source.getId()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getName().fullName,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getPhone().value,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getEmail().value,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                source.getGender().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Hairdresser} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String cid \u003d getId();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (cid \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    ClientId.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!ClientId.isValidId(cid)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(ClientId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final ClientId modelCid \u003d new ClientId(cid);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        String name \u003d getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        String phone \u003d getPhone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        String email \u003d getEmail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        String gender \u003d getGender();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (!Title.isValidTitle(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Client(modelCid, modelName, modelPhone, modelEmail, modelGender, modelAddress, modelTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 112,
      "iamjamestan": 8,
      "nicktohzyu": 1,
      "theyifan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCommandAlias.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAlias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class JsonAdaptedCommandAlias {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Alias Set\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final List\u003cString\u003e aliases;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Constructs a {@code JsonAdaptedCommandAlias} with the given {@code String and @code List\u003cString\u003e}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonAdaptedCommandAlias(@JsonProperty(\"word\") String commandWord,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                                  @JsonProperty(\"aliases\") List\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliases \u003d aliases;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts a given {@code CommandAlias} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonAdaptedCommandAlias(CommandAlias source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.commandWord \u003d source.getCommandWord().getDefaultWord();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliases \u003d source.getAllAliases();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts this Jackson-friendly adapted commandAlias object into the model\u0027s {@code CommandAlias} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted commandAlias."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandAlias toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        CommandWord word \u003d CommandWord.getCommandWord(commandWord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (word \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new CommandAlias(word, this.aliases);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCommandAliasSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAlias;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.logic.commandalias.CommandAliasSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class JsonAdaptedCommandAliasSet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Alias Set\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final List\u003cJsonAdaptedCommandAlias\u003e aliasList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Constructs a {@code JsonAdaptedCommandAliasSet} with the given {@code List\u003cJsonAdaptedCommandAlias\u003e}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonAdaptedCommandAliasSet(@JsonProperty(\"aliasList\") List\u003cJsonAdaptedCommandAlias\u003e aliasList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliasList \u003d aliasList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts a given {@code CommandAliasSet} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonAdaptedCommandAliasSet(CommandAliasSet source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliasList \u003d source.getListOfAliases().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .map(JsonAdaptedCommandAlias::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Converts this Jackson-friendly adapted CommandAliasSet object into the model\u0027s {@code CommandAliasSet} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted commandAliasSet."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public CommandAliasSet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        if (aliasList \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        List\u003cCommandAlias\u003e alias \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        for (JsonAdaptedCommandAlias jsonAdaptedCommandAlias : aliasList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            CommandAlias commandAlias \u003d jsonAdaptedCommandAlias.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            alias.add(commandAlias);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        CommandAliasSet.getInstance().setUpAliasSet(alias);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return CommandAliasSet.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedHairdresser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Jackson-friendly version of {@link Hairdresser}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class JsonAdaptedHairdresser extends JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Hairdresser\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final List\u003cJsonAdaptedSpecialisation\u003e specs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code JsonAdaptedHairdresser} with the given hairdresser details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedHairdresser(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                  @JsonProperty(\"specs\") List\u003cJsonAdaptedSpecialisation\u003e specs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(id, name, phone, email, gender);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (specs !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.specs.addAll(specs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts a given {@code Hairdresser} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedHairdresser(Hairdresser source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(String.valueOf(source.getId()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getName().fullName,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getPhone().value,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                source.getEmail().value,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "                source.getGender().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        specs.addAll(source.getSpecs().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .map(JsonAdaptedSpecialisation::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Hairdresser} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Hairdresser toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        String hid \u003d getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (hid \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                    HairdresserId.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (!HairdresserId.isValidId(hid)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(HairdresserId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        final HairdresserId modelHid \u003d new HairdresserId(hid);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String name \u003d getName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String phone \u003d getPhone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String email \u003d getEmail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String gender \u003d getGender();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final List\u003cSpecialisation\u003e hairdresserSpecs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (JsonAdaptedSpecialisation spec : specs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            hairdresserSpecs.add(spec.toModelType());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final Set\u003cSpecialisation\u003e modelSpecs \u003d new HashSet\u003c\u003e(hairdresserSpecs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return new Hairdresser(modelHid, modelName, modelPhone, modelEmail, modelGender, modelTitle, modelSpecs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 9,
      "nicktohzyu": 1,
      "theyifan": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIdCounter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.IdCounter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "public class JsonAdaptedIdCounter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final int clientId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final int hairdresserId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final int appointmentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Constructs a {@code JsonAdaptedIdCounter} with the given {@code IdCounter} details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected JsonAdaptedIdCounter(@JsonProperty(\"clientId\") int clientId,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                   @JsonProperty(\"hairdresserId\") int hairdresserId,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                   @JsonProperty(\"appointmentId\") int appointmentId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.clientId \u003d clientId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.hairdresserId \u003d hairdresserId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Converts a given {@code PersonIdCounter} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    protected JsonAdaptedIdCounter(IdCounter source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        clientId \u003d source.getCurrentMaxClientId();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        hairdresserId \u003d source.getCurrentMaxHairdresserId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointmentId \u003d source.getCurrentMaxAppointmentId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code PersonIdCounter} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public IdCounter toModelType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        IdCounter.getInstance().setCurrentMaxClientId(clientId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        IdCounter.getInstance().setCurrentMaxHairdresserId(hairdresserId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        IdCounter.getInstance().setCurrentMaxAppointmentId(appointmentId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        return IdCounter.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "abstract class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                             @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                             @JsonProperty(\"gender\") String gender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String getId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String getEmail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String getGender() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 1,
      "iamjamestan": 2,
      "theyifan": 20,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSpecialisation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Jackson-friendly version of {@link Specialisation}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class JsonAdaptedSpecialisation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final String specialisation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code specialisation}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedSpecialisation(String specialisation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.specialisation \u003d specialisation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts a given {@code Specialisation} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public JsonAdaptedSpecialisation(Specialisation source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        specialisation \u003d source.getSpecInString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String getSpecialisationName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return specialisation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts this Jackson-friendly adapted spec object into the model\u0027s {@code Specialisation} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted spec."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Specialisation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (!Specialisation.isValidSpecialisation(specialisation)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new IllegalValueException(Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Specialisation(specialisation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_HAIRDRESSER \u003d \"Hairdressers list contains duplicate hairdresser(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Client list contains duplicate hairdresser(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointment list contains duplicate appointment(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String MISSING_ID_COUNTER_MESSAGE \u003d \"The ID counter format is corrupt!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final List\u003cJsonAdaptedHairdresser\u003e hairdressers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    private final JsonAdaptedIdCounter idCounter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final JsonAdaptedCommandAliasSet aliasSet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"hairdressers\") List\u003cJsonAdaptedHairdresser\u003e hairdressers,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                                       @JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                                       @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                                       @JsonProperty(\"idCounter\") JsonAdaptedIdCounter idCounter,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                                       @JsonProperty(\"aliasSet\") JsonAdaptedCommandAliasSet aliasSet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.hairdressers.addAll(hairdressers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.appointments.addAll(appointments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        this.idCounter \u003d idCounter;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        this.aliasSet \u003d aliasSet;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdressers.addAll(source.getHairdresserList().stream().map(JsonAdaptedHairdresser::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        idCounter \u003d new JsonAdaptedIdCounter(source.getIdCounter());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        aliasSet \u003d new JsonAdaptedCommandAliasSet(source.getCommandAliasSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (JsonAdaptedHairdresser jsonAdaptedHairdresser : hairdressers) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Hairdresser hairdresser \u003d jsonAdaptedHairdresser.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (addressBook.hasHairdresser(hairdresser)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_HAIRDRESSER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            addressBook.addHairdresser(hairdresser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            if (addressBook.hasClient(client)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            addressBook.addClient(client);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            if (addressBook.hasAppointment(appointment)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            addressBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        if (idCounter \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new IllegalValueException(MISSING_ID_COUNTER_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        addressBook.setIdCounter(idCounter.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        addressBook.setCommandAliasSet(aliasSet.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 24,
      "pooty3": 21,
      "theyifan": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntityListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": " * Panel containing the list of Hairdressers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public abstract class EntityListPanel\u003cT\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private static final String FXML \u003d \"EntityListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    protected Label labelName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private ListView\u003cT\u003e entityListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Creates a {@code EntityListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public EntityListPanel(ObservableList\u003cT\u003e entityList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        entityListView.setItems(entityList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        entityListView.setCellFactory(listView -\u003e new EntityListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entity} using a {@code Card}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    class EntityListViewCell extends ListCell\u003cT\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        protected void updateItem(T entity, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            super.updateItem(entity, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            if (empty || entity \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "                setGraphic(getCard(entity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public abstract UiPart\u003cRegion\u003e getCard(T entity, int index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t15-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.appointment.AppointmentListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.client.ClientListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.hairdresser.HairdresserListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    //private HairdresserListPanel hairdresserListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    //private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private HairdresserListPanel hairdresserListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private StackPane hairdresserListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        hairdresserListPanel \u003d new HairdresserListPanel(logic.getFilteredHairdresserList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        hairdresserListPanelPlaceholder.getChildren().add(hairdresserListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 25,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Label gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        gender.setText(person.getGender().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/appointment/AppointmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * An UI component that displays information of a {@code Appointment}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label clientName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label hairdresserName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code AppointmentCode} with the given {@code Appointment} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public AppointmentCard(Appointment appointment, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        id.setText(String.format(\"(aid: %s) \", appointment.getId()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        clientName.setText(appointment.getClient().getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        hairdresserName.setText(appointment.getHairdresser().getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        date.setText(appointment.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        time.setText(appointment.getTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        String apptStatus \u003d appointment.getAppointmentStatus().name().toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.status.setText(apptStatus);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "ya0-yuan": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/appointment/AppointmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.ui.EntityListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class AppointmentListPanel extends EntityListPanel\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(appointmentList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        labelName.setText(\"Appointments\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public UiPart\u003cRegion\u003e getCard(Appointment appointment, int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new AppointmentCard(appointment, index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 8,
      "ya0-yuan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/client/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code ClientCode} with the given {@code Client} and index to display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        id.setText(String.format(\"(cid: %s) \", client.getId()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        phone.setText(client.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        gender.setText(client.getGender().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        email.setText(client.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        address.setText(client.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        client.getTags()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "nicktohzyu": 1,
      "ya0-yuan": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/client/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.ui.EntityListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class ClientListPanel extends EntityListPanel\u003cClient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code ClientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(clientList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        labelName.setText(\"Clients\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public UiPart\u003cRegion\u003e getCard(Client client, int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new ClientCard(client, index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 9,
      "ya0-yuan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/hairdresser/HairdresserCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * An UI component that displays information of a {@code Hairdresser}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "public class HairdresserCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private static final String FXML \u003d \"HairdresserListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public final Hairdresser hairdresser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    private FlowPane specialisations;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code HairdresserCode} with the given {@code Hairdresser} and index to display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public HairdresserCard(Hairdresser hairdresser, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        this.hairdresser \u003d hairdresser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        id.setText(String.format(\"(hid: %s) \", hairdresser.getId()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        name.setText(hairdresser.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        phone.setText(hairdresser.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        gender.setText(hairdresser.getGender().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        email.setText(hairdresser.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        title.setText(hairdresser.getTitle().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        hairdresser.getSpecs()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .forEach(specialisation -\u003e specialisations.getChildren()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        .add(new Label(specialisation.getSpecInString())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        if (!(other instanceof HairdresserCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        HairdresserCard card \u003d (HairdresserCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u0026\u0026 hairdresser.equals(card.hairdresser);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 1,
      "nicktohzyu": 1,
      "theyifan": 2,
      "ya0-yuan": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/hairdresser/HairdresserListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "package seedu.address.ui.hairdresser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "import seedu.address.ui.EntityListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " * Panel containing the list of Hairdressers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "public class HairdresserListPanel extends EntityListPanel\u003cHairdresser\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HairdresserListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     * Creates a {@code HairdresserListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    public HairdresserListPanel(ObservableList\u003cHairdresser\u003e hairdresserList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        super(hairdresserList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        labelName.setText(\"Hairdressers\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    public UiPart\u003cRegion\u003e getCard(Hairdresser hairdresser, int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        return new HairdresserCard(hairdresser, index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 7,
      "ya0-yuan": 25
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label\"  text\u003d\"Client name:\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"clientName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$clientName\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$status\" /\u003e--\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Hairdresser name: \" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"hairdresserName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$hairdresserName\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Date: \" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Time: \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"status_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 45
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cLabel styleClass\u003d\"label-bright\"\u003eAppointments\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 16
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 37
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cLabel styleClass\u003d\"label-bright\"\u003eClients\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 16
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-background-color: #E9967A;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#specialisations {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "#specialisations .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-background-color: #1E90FF;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ".status_label {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-background-color: #228B22;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 25,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/EntityListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "        \u003cLabel fx:id \u003d \"labelName\" styleClass\u003d\"label-bright\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    \u003cListView fx:id\u003d\"entityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pooty3": 16
    }
  },
  {
    "path": "src/main/resources/view/HairdresserListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"specialisations\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 37
    }
  },
  {
    "path": "src/main/resources/view/HairdresserListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cLabel styleClass\u003d\"label-bright\"\u003eHairdressers\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cListView fx:id\u003d\"hairdresserListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "         title\u003d\"HairStyleX\" minWidth\u003d\"920\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "    \u003cImage url\u003d\"@/images/salon_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "                   minHeight\u003d\"120\" prefHeight\u003d\"120\" maxHeight\u003d\"120\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "          \u003cVBox fx:id\u003d\"clientList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "          \u003cVBox fx:id\u003d\"hairdresserList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cpadding \u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"hairdresserListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "          \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ya0-yuan"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ya0-yuan": 23,
      "-": 55
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e--\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.geometry.Insets?\u003e--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.control.Label?\u003e--\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.ColumnConstraints?\u003e--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.FlowPane?\u003e--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.GridPane?\u003e--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.HBox?\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.Region?\u003e--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.VBox?\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003ccolumnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003c/columnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e--\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e--\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e--\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--          \u003cminWidth\u003e--\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--            \u0026lt;!\u0026ndash; Ensures that the label text is never truncated \u0026ndash;\u0026gt;--\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e--\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--          \u003c/minWidth\u003e--\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--        \u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--  \u003c/GridPane\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c/HBox\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "pooty3": 33,
      "-": 2
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e--\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.geometry.Insets?\u003e--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.control.Label?\u003e--\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.control.ListView?\u003e--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.HBox?\u003e--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c?import javafx.scene.layout.VBox?\u003e--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--  \u003cHBox alignment\u003d\"CENTER\"\u003e--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--      \u003cInsets bottom\u003d\"5\" /\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--    \u003cLabel styleClass\u003d\"label-bright\"\u003ePersons\u003c/Label\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--  \u003c/HBox\u003e--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "\u003c!--\u003c/VBox\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "pooty3": 15,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 157,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 35,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 188,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddHairdresserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.AddHairdresserCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.client.ClientId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "import seedu.address.model.person.hairdresser.HairdresserId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.testutil.HairdresserBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class AddHairdresserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void constructor_nullHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddHairdresserCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void execute_hairdresserAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ModelStubAcceptingHairdresserAdded modelStub \u003d new ModelStubAcceptingHairdresserAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser validHairdresser \u003d new HairdresserBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        CommandResult commandResult \u003d new AddHairdresserCommand(validHairdresser).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(String.format(AddHairdresserCommand.MESSAGE_SUCCESS, validHairdresser),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(Arrays.asList(validHairdresser), modelStub.hairdressersAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void execute_duplicateHairdresser_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser validHairdresser \u003d new HairdresserBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AddHairdresserCommand addCommand \u003d new AddHairdresserCommand(validHairdresser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithHairdresser(validHairdresser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(CommandException.class, AddHairdresserCommand.MESSAGE_DUPLICATE_HAIRDRESSER, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser alice \u003d new HairdresserBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser bob \u003d new HairdresserBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AddHairdresserCommand addAliceCommand \u003d new AddHairdresserCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AddHairdresserCommand addBobCommand \u003d new AddHairdresserCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AddHairdresserCommand addAliceCommandCopy \u003d new AddHairdresserCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different hairdresser -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void addHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public Client getClientById(ClientId clientId) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public Hairdresser getHairdresserById(HairdresserId hairdresserId) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        public Appointment getAppointmentById(AppointmentId appointmentId) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void deleteClient(Client client) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean hasHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void deleteHairdresser(Hairdresser target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setHairdresser(Hairdresser target, Hairdresser editedHairdresser) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ObservableList\u003cHairdresser\u003e getFilteredHairdresserList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void updateFilteredHairdresserList(Predicate\u003cHairdresser\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void deleteAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setAppointment(Appointment target, Appointment changedAppointment) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        public List\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public Appointment getSelectedAppointment() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void setSelectedAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ReadOnlyProperty\u003cAppointment\u003e selectedAppointmentProperty() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * A Model stub that contains a single hairdresser."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private class ModelStubWithHairdresser extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        private final Hairdresser hairdresser;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ModelStubWithHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            requireNonNull(hairdresser);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            this.hairdresser \u003d hairdresser;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean hasHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            requireNonNull(hairdresser);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return this.hairdresser.isSameHairdresser(hairdresser);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * A Model stub that always accept the hairdresser being added."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private class ModelStubAcceptingHairdresserAdded extends ModelStub {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        final ArrayList\u003cHairdresser\u003e hairdressersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public boolean hasHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            requireNonNull(hairdresser);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return hairdressersAdded.stream().anyMatch(hairdresser::isSameHairdresser);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public void addHairdresser(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            requireNonNull(hairdresser);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            hairdressersAdded.add(hairdresser);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 10,
      "nicktohzyu": 6,
      "theyifan": 283
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 25,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    // for hairdresser testings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_NAME_ALISSA \u003d \"Alissa Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_NAME_BENJAMIN \u003d \"Benjamin Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_PHONE_ALISSA \u003d \"33333333\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_PHONE_BENJAMIN \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_EMAIL_ALISSA \u003d \"alissa@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_EMAIL_BENJAMIN \u003d \"benjamin@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_GENDER_ALISSA \u003d \"F\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_GENDER_BENJAMIN \u003d \"M\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_TITLE_ALISSA \u003d \"Colourist\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_TITLE_BENJAMIN \u003d \"Assistant\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_SPECIALISATION_PERM \u003d \"Perm\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String VALID_SPECIALISATION_COLOR \u003d \"Color\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String NAME_DESC_ALISSA \u003d \" \" + PREFIX_NAME + VALID_NAME_ALISSA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String NAME_DESC_BENJAMIN \u003d \" \" + PREFIX_NAME + VALID_NAME_BENJAMIN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String PHONE_DESC_ALISSA \u003d \" \" + PREFIX_PHONE + VALID_PHONE_ALISSA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String PHONE_DESC_BENJAMIN \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BENJAMIN;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String EMAIL_DESC_ALISSA \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_ALISSA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String EMAIL_DESC_BENJAMIN \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BENJAMIN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String TITLE_DESC_ALISSA \u003d \" \" + PREFIX_TITLE + VALID_TITLE_ALISSA;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String TITLE_DESC_BENJAMIN \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BENJAMIN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String GENDER_DESC_ALISSA \u003d \" \" + PREFIX_GENDER + VALID_GENDER_ALISSA;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String GENDER_DESC_BENJAMIN \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BENJAMIN;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String SPECIALISATION_DESC_PERM \u003d \" \" + PREFIX_SPECIALISATION + VALID_SPECIALISATION_PERM;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String SPECIALISATION_DESC_COLOR \u003d \" \" + PREFIX_SPECIALISATION + VALID_SPECIALISATION_COLOR;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE; // empty string not allowed for gender"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"G\"; // non-\u0027F\u0027/\u0027M\u0027 not allowed for gender"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String INVALID_SPECIALISATION_DESC \u003d \" \" + PREFIX_SPECIALISATION + \"hubby*\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    // \u0027*\u0027 not allowed in specs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    //for client testings"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //static {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        Model expectedModel) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    } catch (CommandException ce) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //        Model expectedModel) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    // only do so by copying its components."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //    assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 84,
      "theyifan": 40,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 99,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 163,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 52,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 15,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 75,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 15,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 30,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid tag"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 138,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddHairdresserCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_ALISSA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BENJAMIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_ALISSA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BENJAMIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIALISATION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALISSA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BENJAMIN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_ALISSA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BENJAMIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIALISATION_DESC_COLOR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SPECIALISATION_DESC_PERM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_ALISSA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BENJAMIN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BENJAMIN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BENJAMIN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENJAMIN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BENJAMIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_COLOR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_PERM;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BENJAMIN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.ALISSA;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.BENJAMIN;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.AddHairdresserCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.parser.hairdresser.AddHairdresserCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.testutil.HairdresserBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class AddHairdresserCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private AddHairdresserCommandParser parser \u003d new AddHairdresserCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser expectedHairdresser \u003d new HairdresserBuilder(BENJAMIN).withSpecs(VALID_SPECIALISATION_PERM).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALISSA + NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BENJAMIN + PHONE_DESC_ALISSA + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_ALISSA + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple titles - last address accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_ALISSA + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple genders - last address accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_ALISSA"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // multiple specs - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser expectedHairdresserMultipleSpecs \u003d new HairdresserBuilder(BENJAMIN)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .withSpecs(VALID_SPECIALISATION_PERM, VALID_SPECIALISATION_COLOR).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_PERM, new AddHairdresserCommand(expectedHairdresserMultipleSpecs));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // zero specs"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser expectedHairdresser \u003d new HairdresserBuilder(ALISSA).withSpecs().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALISSA + PHONE_DESC_ALISSA"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_ALISSA + TITLE_DESC_ALISSA + GENDER_DESC_ALISSA,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                new AddHairdresserCommand(expectedHairdresser));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHairdresserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + VALID_PHONE_BENJAMIN"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + VALID_EMAIL_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_BENJAMIN + VALID_TITLE_BENJAMIN + GENDER_DESC_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + VALID_GENDER_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BENJAMIN + VALID_PHONE_BENJAMIN"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + VALID_EMAIL_BENJAMIN + VALID_TITLE_BENJAMIN + VALID_EMAIL_BENJAMIN, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + INVALID_EMAIL_DESC + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + INVALID_TITLE_DESC + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + INVALID_GENDER_DESC"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // invalid spec"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BENJAMIN + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN + GENDER_DESC_BENJAMIN"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + INVALID_SPECIALISATION_DESC + VALID_SPECIALISATION_PERM, Specialisation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                        + EMAIL_DESC_BENJAMIN + INVALID_TITLE_DESC + GENDER_DESC_BENJAMIN,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BENJAMIN"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + PHONE_DESC_BENJAMIN + EMAIL_DESC_BENJAMIN + TITLE_DESC_BENJAMIN"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + GENDER_DESC_BENJAMIN + SPECIALISATION_DESC_COLOR + SPECIALISATION_DESC_PERM,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHairdresserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 96,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "////import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        //assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 206,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 191,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 95,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 126,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 30,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Client person \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //// same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //// same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //// same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //    .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        //assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/HairdresserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BENJAMIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BENJAMIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENJAMIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BENJAMIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_PERM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BENJAMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.AMELIA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.BENJAMIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.testutil.HairdresserBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "class HairdresserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser hairdresser \u003d new HairdresserBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e hairdresser.getSpecs()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void isSameHairdresser() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(AMELIA.isSameHairdresser(AMELIA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.isSameHairdresser(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different phone, email, gender and title -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser editedAmelia \u003d new HairdresserBuilder(AMELIA).withPhone(VALID_PHONE_BENJAMIN)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withEmail(VALID_EMAIL_BENJAMIN)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withGender(VALID_GENDER_BENJAMIN)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.isSameHairdresser(editedAmelia));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withName(VALID_NAME_BENJAMIN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.isSameHairdresser(editedAmelia));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withEmail(VALID_EMAIL_BENJAMIN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withSpecs(VALID_SPECIALISATION_PERM)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(AMELIA.isSameHairdresser(editedAmelia));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        // same name, same email, different attributes -\u003e returns False"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withPhone(VALID_PHONE_BENJAMIN)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withSpecs(VALID_SPECIALISATION_PERM)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        assertFalse(AMELIA.isSameHairdresser(editedAmelia));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .withSpecs(VALID_SPECIALISATION_PERM)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(AMELIA.isSameHairdresser(editedAmelia));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser aliceCopy \u003d new HairdresserBuilder(AMELIA).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(AMELIA.equals(aliceCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(AMELIA.equals(AMELIA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different hairdresser -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(BENJAMIN));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        Hairdresser editedAmelia \u003d new HairdresserBuilder(AMELIA).withName(VALID_NAME_BENJAMIN)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withPhone(VALID_PHONE_BENJAMIN)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withEmail(VALID_EMAIL_BENJAMIN)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withGender(VALID_GENDER_BENJAMIN)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        editedAmelia \u003d new HairdresserBuilder(AMELIA).withSpecs(VALID_SPECIALISATION_PERM)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(AMELIA.equals(editedAmelia));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 33,
      "theyifan": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 71,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 89,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueHairdresserListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_COLOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BENJAMIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.AMELIA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.testutil.TypicalHairdressers.BENJAMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.UniqueHairdresserList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.exception.DuplicateHairdresserException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.exception.HairdresserNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.testutil.HairdresserBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class UniqueHairdresserListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private final UniqueHairdresserList uniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void contains_nullHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertFalse(uniqueHairdresserList.contains(AMELIA));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(uniqueHairdresserList.contains(AMELIA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser editedAlice \u003d new HairdresserBuilder(AMELIA).withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .withSpecs(VALID_SPECIALISATION_COLOR).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertTrue(uniqueHairdresserList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void add_nullHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void add_duplicateHairdresser_throwsDuplicateHairdresserException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(DuplicateHairdresserException.class, () -\u003e uniqueHairdresserList.add(AMELIA));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_nullTargetHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.setHairdresser(null, AMELIA));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_nullEditedHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.setHairdresser(AMELIA, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_targetHairdresserNotInList_throwsHairdresserNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(HairdresserNotFoundException.class, () -\u003e uniqueHairdresserList.setHairdresser(AMELIA, AMELIA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_editedHairdresserIsSameHairdresser_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.setHairdresser(AMELIA, AMELIA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        expectedUniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_editedHairdresserHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Hairdresser editedAlice \u003d new HairdresserBuilder(AMELIA).withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                .withSpecs(VALID_SPECIALISATION_COLOR).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.setHairdresser(AMELIA, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        expectedUniqueHairdresserList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_editedHairdresserHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.setHairdresser(AMELIA, BENJAMIN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        expectedUniqueHairdresserList.add(BENJAMIN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdresser_editedHairdresserHasNonUniqueIdentity_throwsDuplicateHairdresserException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(BENJAMIN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(DuplicateHairdresserException.class, () -\u003e uniqueHairdresserList.setHairdresser(AMELIA, BENJAMIN));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void remove_nullHairdresser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void remove_personDoesNotExist_throwsHairdresserNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(HairdresserNotFoundException.class, () -\u003e uniqueHairdresserList.remove(AMELIA));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void remove_existingHairdresser_removesHairdresser() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.remove(AMELIA);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdressers_nullUniqueHairdresserList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            -\u003e uniqueHairdresserList.setHairdressers((UniqueHairdresserList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdressers_uniqueHairdresserList_replacesOwnListWithProvidedUniqueHairdresserList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        expectedUniqueHairdresserList.add(BENJAMIN);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.setHairdressers(expectedUniqueHairdresserList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdressers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueHairdresserList.setHairdressers((List\u003cHairdresser\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdressers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.add(AMELIA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        List\u003cHairdresser\u003e personList \u003d Collections.singletonList(BENJAMIN);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        uniqueHairdresserList.setHairdressers(personList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        UniqueHairdresserList expectedUniqueHairdresserList \u003d new UniqueHairdresserList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        expectedUniqueHairdresserList.add(BENJAMIN);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(expectedUniqueHairdresserList, uniqueHairdresserList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void setHairdressers_listWithDuplicateHairdressers_throwsDuplicateHairdresserException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        List\u003cHairdresser\u003e listWithDuplicateHairdressers \u003d Arrays.asList(AMELIA, AMELIA);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(DuplicateHairdresserException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            -\u003e uniqueHairdresserList.setHairdressers(listWithDuplicateHairdressers));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            -\u003e uniqueHairdresserList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 164,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 104,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 105,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 40,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 62,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pooty3"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pooty3": 7,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Creates a {@code ClientBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        gender \u003d clientToCopy.getGender();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Sets the {@code Gender} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public ClientBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return new Client(name, phone, email, gender, address, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return descriptor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 78,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/HairdresserBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class HairdresserBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Senior Stylist\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Set\u003cSpecialisation\u003e specs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a {@code HairdresserBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        specs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        specs.add(new Specialisation(\"Perm\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Initializes the HairdresserBuilder with the data of {@code hairdresserToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder(Hairdresser hairdresserToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        name \u003d hairdresserToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        phone \u003d hairdresserToCopy.getPhone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        email \u003d hairdresserToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        gender \u003d hairdresserToCopy.getGender();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        title \u003d hairdresserToCopy.getTitle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        specs \u003d new HashSet\u003c\u003e(hairdresserToCopy.getSpecs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Sets the {@code Name} of the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Parses the {@code specs} into a {@code Set\u003cSpecialisation\u003e} and set it"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * to the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withSpecs(String ... specs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.specs \u003d SampleDataUtil.getSpecSet(specs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Sets the {@code Phone} of the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Sets the {@code Email} of the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Sets the {@code Gender} of the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Sets the {@code Address} of the {@code Hairdresser} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public HairdresserBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Hairdresser build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Hairdresser(name, phone, email, gender, title, specs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/HairdresserUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIALISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.AddHairdresserCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.logic.commands.hairdresser.EditHairdresserCommand.EditHairdresserDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.specialisation.Specialisation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * A utility class for Hairdresser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class HairdresserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns an add command string for adding the {@code hairdresser}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static String getAddHairdresserCommand(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return AddHairdresserCommand.COMMAND_WORD + \" \" + getHairdresserDetails(hairdresser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns the part of command string for the given {@code hairdresser}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static String getHairdresserDetails(Hairdresser hairdresser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sb.append(PREFIX_NAME + hairdresser.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sb.append(PREFIX_PHONE + hairdresser.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sb.append(PREFIX_EMAIL + hairdresser.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        sb.append(PREFIX_GENDER + hairdresser.getGender().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sb.append(PREFIX_TITLE + hairdresser.getTitle().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        hairdresser.getSpecs().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            s -\u003e sb.append(PREFIX_SPECIALISATION + s.getSpecInString() + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns the part of command string for the given {@code EditHairdresserDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static String getEditHairdresserDescriptorDetails(EditHairdresserDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (descriptor.getSpecs().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Set\u003cSpecialisation\u003e specialisations \u003d descriptor.getSpecs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (specialisations.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                sb.append(PREFIX_SPECIALISATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                specialisations.forEach(s -\u003e sb.append(PREFIX_SPECIALISATION).append(s.getSpecInString()).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 1,
      "theyifan": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 53,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pooty3"
        },
        "content": "//    }"
      }
    ],
    "authorContributionMap": {
      "pooty3": 20,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "import seedu.address.model.person.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTags(\"friends\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //// Manually added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withAddress(\"little india\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //// Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    //    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private TypicalClients() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical clients."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalHairdressers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_ALISSA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BENJAMIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_ALISSA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BENJAMIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALISSA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENJAMIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ALISSA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BENJAMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_COLOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIALISATION_PERM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ALISSA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BENJAMIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import seedu.address.model.person.hairdresser.Hairdresser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class TypicalHairdressers {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final Hairdresser AMELIA \u003d new HairdresserBuilder().withName(\"Amelia Tan\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withTitle(\"Junior Stylist\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withSpecs(\"Color\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final Hairdresser BENEDICT \u003d new HairdresserBuilder().withName(\"Benedict Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withTitle(\"Senior Stylist\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withSpecs(\"Perm\", \"HairExtension\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser CALEB \u003d new HairdresserBuilder().withName(\"Caleb Kurz\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Shampooist\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser DAVID \u003d new HairdresserBuilder().withName(\"David Meier\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Colourist\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withSpecs(\"Styling\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser EMMA \u003d new HairdresserBuilder().withName(\"Emma Meyer\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Apprentice\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser FELICIA \u003d new HairdresserBuilder().withName(\"Felicia Kunz\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Apprentice\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser GORDEN \u003d new HairdresserBuilder().withName(\"Gorden Best\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"M\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Colourist\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser HANNAH \u003d new HairdresserBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Junior Stylist\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    public static final Hairdresser IVY \u003d new HairdresserBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(\"F\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(\"Junior Stylist\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    // Manually added - Hairdresser\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final Hairdresser ALISSA \u003d new HairdresserBuilder().withName(VALID_NAME_ALISSA)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(VALID_PHONE_ALISSA)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(VALID_GENDER_ALISSA)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(VALID_TITLE_ALISSA)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(VALID_EMAIL_ALISSA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withSpecs(VALID_SPECIALISATION_PERM)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final Hairdresser BENJAMIN \u003d new HairdresserBuilder().withName(VALID_NAME_BENJAMIN)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withPhone(VALID_PHONE_BENJAMIN)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withGender(VALID_GENDER_BENJAMIN)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withTitle(VALID_TITLE_BENJAMIN)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "        .withEmail(VALID_EMAIL_BENJAMIN)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .withSpecs(VALID_SPECIALISATION_PERM, VALID_SPECIALISATION_COLOR)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    private TypicalHairdressers() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicktohzyu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical hairdressers."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (Hairdresser hairdresser : getTypicalHairdressers()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            ab.addHairdresser(hairdresser);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static List\u003cHairdresser\u003e getTypicalHairdressers() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AMELIA, BENEDICT, CALEB, DAVID, EMMA, FELICIA, GORDEN));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicktohzyu": 60,
      "theyifan": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamjamestan"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamjamestan": 67,
      "-": 9
    }
  }
]
