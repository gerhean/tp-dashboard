[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Project scope"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* ProductiveNUS is a desktop application that provides an accessible platform for "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "NUS computing students to manage and keep track of their "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "academic tasks at hand.  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Motivation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* As a NUS Computing Student, you would probably have had **difficulties managing your"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "academic schedule**. You might often feel overwhelmed due to "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**tight deadlines** for your assignments along with a **high workload** which you might be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "on the verge of being unable to "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "cope with. In events like this, having a **disorganised timeline** makes your"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "situation worse. You might often **underestimate the time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "it takes** to complete your assignments and you might be **late for your lessons** as you were preoccupied "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "with completing them. However, all these"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "tasks still remain uncompleted. You might have been spinning your wheels."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* ProductiveNUS minimises such problems by helping you keep track of your schedule easily."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Aim"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Effective time management** among NUS Computing students, resulting in **higher productivity**."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Efficiency** in browsing through all your academic tasks (lessons and assignments) at once."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Better planning** of your academic schedule."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## User stories"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| No. | As a...           | I can...                              | So that I can...                                                          |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "|-----|-------------------|---------------------------------------|---------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 1   | Student           | import my timetable from NUSMods      | better schedule my assignments with my lesson  timings taken into account |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 2   | Forgetful student | receive reminders for my assignments  | avoid forgetting to attend my lessons or do my work                       |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 3   | Poor time manager | add and schedule assignments          | keep track of what needs  to be done                                      |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 4   | Poor time manager | delete assignments                    | remove assignments that I have completed  or added wrongly                |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| 5   | Poor time manager | view lessons and assignments together | view all the assignments I have to complete amidst  my lessons            |"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Current features supported"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Importing timetable from NUSMods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Adding assignments to ProductiveNUS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Listing lessons and assignments "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Deleting assignments from ProductiveNUS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Reminders for assignments"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Exiting ProductiveNUS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2103t-f11-3.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [User Guide](https://ay2021s1-cs2103t-f11-3.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* [About Us](https://ay2021s1-cs2103t-f11-3.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "andreatanky": 53,
      "minhhhnguyen2000": 1,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    implementation \u0027com.googlecode.json-simple:json-simple:1.1.1\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[Click](https://ay2021s1-cs2103t-f11-3.github.io/tp/) to view the homepage for ProductiveNUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Andrea Tan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cimg src\u003d\"images/andreatanky.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[[github](https://github.com/andreatanky)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "[[portfolio](team/andreatanky.md)]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Responsibilities: UI "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Choo Jia Xin"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cimg src\u003d\"images/choojiaxin.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[[github](http://github.com/ChooJiaXin)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "[[portfolio](team/choojiaxin.md)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Jerry Ho"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "\u003cimg src\u003d\"images/printinghelloworld.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "[[github](http://github.com/printinghelloworld)] [[portfolio](team/printinghelloworld.md)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Hwang Yong Kang"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "\u003cimg src\u003d\"images/hyngkng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[[github](http://github.com/hyngkng)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "[[portfolio](team/hyngkng.md)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Nguyen Hoang Hai Minh"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cimg src\u003d\"images/minhhhnguyen2000.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "[[github](http://github.com/minhhhnguyen2000)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "[[portfolio](team/minhhhnguyen2000.md)]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Role: Developer; Deliverables and deadlines"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Responsibilities: Testing"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 8,
      "hyngkng": 11,
      "minhhhnguyen2000": 4,
      "-": 31,
      "printinghelloworld": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* NUS Computing Students with poor time management skills who have difficulties managing their weekly academic schedule"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* can type fast and prefer typing to mouse interactions"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* More convenient than typical apps as lessons and assignments are managed in just one app so there is no need to switch between different ones."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* Faster than typical mouse/GUI driven apps as most features are accomplished by typing simple commands."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* Easier to manage schedule than typical scheduling apps as assignments are automatically scheduled."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`  | student                                    | import my timetable         | better schedule my assignments with my lesson timings taken into account              |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`  | forgetful student                                       | receive reminders for my lessons and assignments               |  avoid forgetting to attend lessons or do my work                                                                      |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`  | poor time manager                                       | add and schedule assignments                |  keep track of what needs to be done                                 |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`  | poor time manager                                       | delete assignments          | remove assignments that i have completed or added wrongly |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`    | student                                       | view lessons and assignments together   | view all assignments i have to complete amidst my lessons                |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`      | particular student | use a scheduler with a user-friendly interface           | use the application easily and enjoyably                                                 |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`      | new user | navigate the UI easily           | use the application efficiently                                                 |                                      |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`      | slow/confused student | i can access and view my academic duties easily           | quickly find out what i need to do for the week"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * *`      | experienced vim-user | use my keyboard to key in assignments           | save time tracking down my assignments                                                 ||"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * `      | beginner user | view a tutorial           | benefit from the features of ProductiveNUS                                                 ||"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "| `* * `      | experienced vim-user | use shortcuts in my commands            | access my academic schedule more quickly                                              ||"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "(For all use cases below, the **System** is the `Academic Schedule Manager` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC01 - Add an assignment**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User requests to add an assignment."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2.  Academic Schedule Manager adds the assignment."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "3.  Academic Schedule Manager shows a success message with details of the assignment added."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 1a. The user did not supply all required parameters."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 1b. The given DEADLINE_OF_ASSIGNMENT parameter is in the wrong format."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1b1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC02 - Delete an assignment**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User \u003cins\u003erequests to list assignments and lessons (UC05)\u003c/ins\u003e."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to delete a specific assignment in the list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager shows a success message with details of the assignment deleted."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given index is invalid (index is referring to a lesson or index is out of range)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC03 - Import timetable**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1.  User retrieves NUSMods timetable URL from the NUSMods website."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to import NUSMods timetable using their NUSMods timetable URL."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager adds all the lessons according to the data retrieved."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "4.  Academic Schedule Manager shows a success message with details of the lessons added."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given URL is invalid (not a valid NUSMods timetable URL)."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2b. User already has a timetable imported before."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2b1. Academic Schedule Manager informs user that previously imported lesson will be deleted."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC04 - Remind**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "1.  User \u003cins\u003erequests to list assignments and lessons (UC05)\u003c/ins\u003e."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "2.  User requests to set reminder for a specific assignment in the list."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "3.  Academic Schedule Manager adds the assignment to the remind list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "4.  Academic Schedule Manager shows a success message with details of the assignment set as reminder."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* 2a. The given index is invalid (index is referring to a lesson or index is out of range)."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * 2a1. Academic Schedule Manager shows an error message."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Use case: UC05 - List assignments and lessons**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "1.  User requests to list assignments and lessons."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "2.  Academic Schedule Manager shows a list of all assignments and lessons."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 1a. User requests to list XX day(s) of assignments and lessons."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    * 1a1. Academic Schedule Manager shows a filtered list of assignments and lessons."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "      "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "2.  Should be able to hold up to `1000 lessons and assignments` without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "4.  The system should respond within two seconds."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "5.  The system should save a user\u0027s data `after every user command`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "6.  The system should be usable by a novice who has never used the app before."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **User**: NUS Computing student"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 11,
      "hyngkng": 23,
      "minhhhnguyen2000": 6,
      "-": 332,
      "printinghelloworld": 73
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "title: ProductiveNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNUS is a **desktop application for managing and scheduling your academic tasks, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "It is a convenient platform for you to keep track of your lessons and assignments at hand and being able to type quickly will make the process fast as well."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "1. Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "2. Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "3. FAQ"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "4. Summary of commands supported"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Download the latest `productivenus.jar` from [here](https://github.com/AY2021S1-CS2103T-F11-3/tp/releases)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for ProductiveNUS."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "   * **`add`**`n/Lab report 3 d/23-04-2020 1230 mod/CS2100` : Adds an assignment named `Lab report 3` to your schedule."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd assignment shown in the current list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   * **`import YOUR_NUSMODS_URL`** : Imports your timetable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   * **`list`**`2` : Lists all lessons and assignments within 2 weeks (including this week)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "   * **`remind`**`3` : Tags your assignment to receive reminders which will be displayed in `Your Reminders` section."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "   * **`exit`** : Exits the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  e.g. in `add n/NAME_OF_ASSIGNMENT`, `NAME_OF_ASSIGNMENT` is a parameter which can be used as `add n/Assignment 2`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  e.g `n/NAME_OF_ASSIGNMENT [mod/MODULE_CODE]` can be used as `n/Assignment 2 mod/CS2100` or as `n/Assignment 2`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  e.g. if the command specifies `n/NAME_OF_ASSIGNMENT d/DEADLINE`, `d/DEADLINE n/NAME_OF_ASSIGNMENT` is also acceptable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "### Adding an assignment: `add`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Adds an assignment into your schedule."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "Format: `add n/NAME_OF_ASSIGNMENT d/DEADLINE_OF_ASSIGNMENT TIME_ASSIGNMENT_IS_DUE mod/MODULE​ [remind]`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "You can include the `remind` tag when adding the assignment instead of using the `remind` command after adding the assignment."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* `add n/Lab report 3 d/23-04-2020 1230 mod/CS2100`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "* `add n/Tutorial 2 d/29-06-2020 1400 mod/CS2100 remind`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "### Deleting an assignment : `delete`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Deletes the specified assignment from the assignment list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* Deletes the assignment at the specified `INDEX`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* The index refers to the index number shown in the displayed assignment list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd assignment in the assignment list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "### Importing your timetable : `import`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Imports your NUSMods timetable data into your schedule."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Format: `import url/YOUR_NUSMODS_URL`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* Lesson data based on your NUSMods timetable will be added into your schedule."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `YOUR_NUSMODS_URL` is obtained by clicking on the \"Share/Sync\" timetable icon at the NUSMods website."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* `import url/https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01,LAB:11,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G16\u0026CS2105\u003dTUT:14,LEC:1\u0026EC1301\u003dTUT:S28,LEC:1\u0026IS1103\u003d` will "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Listing lessons and assignments : `list`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Format: `list [NUMBER]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- Shows a list of lessons and assignments in your schedule within next `NUMBER` "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "weeks, starting from the current date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- `list` command without `NUMBER` displays your entire list of lessons and assignments "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "stored in ProductiveNUS."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- `list 2` displays your lessons and assignments within the next"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "2 weeks (starting from the current date)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- `list 3` displays all your lessons and assignments within the next"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "3 weeks (starting from the current date)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "- `list ` displays all your lessons and assignments."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "### Setting reminders for assignments : `remind`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Tags the specified assignment to receive reminders which will be displayed in `Your Reminders` section."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Format: `remind INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* Tags the assignment at the specified `INDEX` to receive reminders."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* The index refers to the index number shown in the displayed assignment list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* `list` followed by `remind 2` sets reminders for the 2nd assignment in the assignment list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "ProductiveNUS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ProductiveNUS app home folder."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "**add** | `add n/NAME_OF_ASSIGNMENT d/DEADLINE_OF_ASSIGNMENT TIME_ASSIGNMENT_IS_DUE mod/MODULE​ [remind]` \u003cbr\u003e e.g., `add n/Math tutorial d/21-03-2020 1100 mod/ST2334`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**import** | `import NUSMODS_URL`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "**list** | `list [NUMBER]` e.g., `list 2`, `list`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "**remind** | `remind INDEX`"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 25,
      "andreatanky": 19,
      "hyngkng": 6,
      "minhhhnguyen2000": 5,
      "-": 96,
      "printinghelloworld": 9
    }
  },
  {
    "path": "docs/team/andreatanky.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "title: Andrea Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 46
    }
  },
  {
    "path": "docs/team/choojiaxin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "title: Choo Jia Xin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 46
    }
  },
  {
    "path": "docs/team/hyngkng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "title: Hwang Yong Kang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 46
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "title: Nguyen Hoang Hai Minh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 45
    }
  },
  {
    "path": "docs/team/minhhhnguyen2000.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "title: Nguyen Hoang Hai Minh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 46
    }
  },
  {
    "path": "docs/team/printinghelloworld.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "title: Jerry Ho\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "printinghelloworld": 1
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.assignment`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.assignment.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW \u003d \"%1$d assignments listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of reminder assignments */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getRemindedAssignmentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 4,
      "minhhhnguyen2000": 4,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getRemindedAssignmentList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getRemindedAssignmentsList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 6,
      "minhhhnguyen2000": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": " * Adds an assignment to the academic schedule."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an assignment to the academic schedule. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_NAME + \"ASSIGNMENT NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"[remind] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_NAME + \"Lab report 3 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_DEADLINE + \"23-04-2020 1230 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2100 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + \"remind\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the academic schedule\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Assignment toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AddCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        toAdd \u003d assignment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (model.hasAssignment(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "andreatanky": 2,
      "hyngkng": 1,
      "minhhhnguyen2000": 9,
      "-": 38,
      "printinghelloworld": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Deletes a assignment identified using it\u0027s displayed index from the assignment list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \": Deletes the assignment identified by the index number used in the displayed assignment list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer and not greater than the size of the current \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"assignment list)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Assignment: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, assignmentToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 10,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Edits the details of an existing assignment in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the assignment identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            + \"by the index number used in the displayed assignment list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            + PREFIX_DEADLINE + \"01-01-2020 1800 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_EDIT_ASSIGNMENT_SUCCESS \u003d \"Edited Assignment: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the address book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final EditAssignmentDescriptor editAssignmentDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @param editAssignmentDescriptor details to edit the assignment with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditCommand(Index index, EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.editAssignmentDescriptor \u003d new EditAssignmentDescriptor(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d createEditedAssignment(assignmentToEdit, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!assignmentToEdit.isSameAssignment(editedAssignment) \u0026\u0026 model.hasAssignment(editedAssignment)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.setAssignment(assignmentToEdit, editedAssignment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * edited with {@code editAssignmentDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                                     EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert assignmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Name updatedName \u003d editAssignmentDescriptor.getName().orElse(assignmentToEdit.getName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Deadline updatedDeadline \u003d editAssignmentDescriptor.getDeadline().orElse(assignmentToEdit.getDeadline());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editAssignmentDescriptor.getModuleCode()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .orElse(assignmentToEdit.getModuleCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind updatedRemind \u003d assignmentToEdit.getRemind();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 editAssignmentDescriptor.equals(e.editAssignmentDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Stores the details to edit the assignment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * corresponding field value of the assignment."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static class EditAssignmentDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public EditAssignmentDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public EditAssignmentDescriptor(EditAssignmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, deadline, moduleCode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (!(other instanceof EditAssignmentDescriptor)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            EditAssignmentDescriptor e \u003d (EditAssignmentDescriptor) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    \u0026\u0026 getModuleCode().equals(e.getModuleCode());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 12,
      "andreatanky": 8,
      "hyngkng": 4,
      "minhhhnguyen2000": 38,
      "-": 120,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Finds and lists all assignments in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all assignments whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String.format(Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 4,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports a NUSMods timetable to the address book. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            + PREFIX_TIMETABLE_URL + \"TIMETABLE URL \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            + PREFIX_TIMETABLE_URL + \"https://nusmods.com/timetable/sem-1/share?CS2100\u003dTUT:01,LAB:11,LEC:1 \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Timetable imported.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final TimetableData data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates an ImportCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ImportCommand(TimetableData data) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        model.importTimetable(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        System.out.println(data);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 37,
      "andreatanky": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Lists all tasks in ProductiveNUS to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \": Lists the tasks in the next [INDEX] number of weeks.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"If no index is keyed in, all your tasks will be displayed.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed your tasks\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final Index numberOfWeeks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ListCommand(Index numberOfWeeks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.numberOfWeeks \u003d numberOfWeeks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Predicate\u003cTask\u003e showLimitedTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return task -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(Deadline.DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            String dateAndTimeToParse \u003d task.getTime().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime currentDateAndTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime lastDateAndTime \u003d currentDateAndTime.plusWeeks(numberOfWeeks.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime parsedDateAndTime \u003d LocalDateTime.parse(dateAndTimeToParse, inputFormat);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isAfterCurrentDateAndTime \u003d parsedDateAndTime.isAfter(currentDateAndTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            boolean isBeforeLastDateAndTime \u003d parsedDateAndTime.isBefore(lastDateAndTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return isAfterCurrentDateAndTime \u0026\u0026 isBeforeLastDateAndTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (numberOfWeeks.getZeroBased() !\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            model.updateFilteredTaskList(showLimitedTasks());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new CommandResult(ListCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 43,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Sets reminders for an assignment identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \": Tags the assignment identified by the index number used in the displayed assignment list.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \" Tagged assignments are permanently displayed.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_REMIND_ASSIGNMENT_SUCCESS \u003d \"Set reminder for Assignment: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_REMINDED_ASSIGNMENT \u003d \"This assignment already has reminders set.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a RemindCommand to set reminders to the specified assignment."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param targetIndex index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public RemindCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemind \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (assignmentToRemind.isReminded() \u0026\u0026 model.hasAssignment(assignmentToRemind)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new CommandException(MESSAGE_REMINDED_ASSIGNMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert(!assignmentToRemind.isReminded());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment remindedAssignment \u003d createRemindedAssignment(assignmentToRemind);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentToRemind, remindedAssignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMIND_ASSIGNMENT_SUCCESS, remindedAssignment));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToRemind}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static Assignment createRemindedAssignment(Assignment assignmentToRemind) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assert assignmentToRemind !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Name updatedName \u003d assignmentToRemind.getName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Deadline updatedDeadline \u003d assignmentToRemind.getDeadline();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModuleCode updatedModuleCode \u003d assignmentToRemind.getModuleCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind updatedRemind \u003d assignmentToRemind.getRemind().setReminder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new Assignment(updatedName, updatedDeadline, updatedModuleCode, updatedRemind);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                || (other instanceof RemindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemindCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isRemindPresent \u003d args.matches(\".*\\\\bremind\\\\b$\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        boolean isRemindTypo \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!isRemindPresent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            isRemindTypo \u003d args.matches(\".*rem[a-z]*$\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (isRemindPresent || isRemindTypo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            String argsWithoutRemind \u003d args.replace(\" remind\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(argsWithoutRemind, PREFIX_NAME, PREFIX_DEADLINE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                    PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MODULE_CODE, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty() || isRemindTypo) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind remind \u003d new Remind();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        if (isRemindPresent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            remind \u003d remind.setReminder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignment \u003d new Assignment(name, deadline, moduleCode, remind);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new AddCommand(assignment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 2,
      "hyngkng": 4,
      "minhhhnguyen2000": 1,
      "-": 40,
      "printinghelloworld": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new RemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 4,
      "andreatanky": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"mod/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Prefix PREFIX_TIMETABLE_URL \u003d new Prefix(\"url/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 1,
      "andreatanky": 1,
      "hyngkng": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DEADLINE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor editAssignmentDescriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            editAssignmentDescriptor.setModuleCode(ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!editAssignmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new EditCommand(index, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "andreatanky": 3,
      "minhhhnguyen2000": 7,
      "-": 43,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableUrlParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIMETABLE_URL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIMETABLE_URL)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String url \u003d argMultimap.getValue(PREFIX_TIMETABLE_URL).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        TimetableData data \u003d TimetableUrlParser.parseTimetableUrl(url);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new ImportCommand(data);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        boolean isNotListAll \u003d args.matches(\".*\\\\b\\\\d+\\\\b$\"); //Has index as argument"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!isNotListAll) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ListCommand(Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            Index index \u003d ParserUtil.parseListIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new ListCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static Index parseListIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Parses a {@code String moduleCode} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws ParseException if the given {@code ModuleCode} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 8,
      "hyngkng": 3,
      "andreatanky": 19,
      "minhhhnguyen2000": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandParser implements Parser\u003cRemindCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public RemindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return new RemindCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.model.assignment.Deadline.DEADLINE_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableRetriever;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Duplicates are not allowed (by .isSameAssignment comparison)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final UniqueAssignmentList assignments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates an AddressBook using the Assignments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Replaces the contents of the tasks list with {@code tasks}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        setAssignments(newData.getAssignmentList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //// assignment-level operations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds an assignment to the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addAssignment(Assignment a) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assignments.add(a);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the given assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * existing assignment in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(editedAssignment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    //// lesson-level operations"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Imports and adds lessons based on NUSMods timetable data."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            clearLessons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            List\u003cLesson\u003e lessons \u003d TimetableRetriever.retrieveLessons(data);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addLesson(lesson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            // nothing happens for now."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds a lesson to the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must not already exist in the address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Clears all lessons in address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void clearLessons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons.removeAll();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return assignments.asUnmodifiableObservableList().size() + \" assignments\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // TODO: refine later (add lessons?)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().clear();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().addAll(assignments.getInternalList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().addAll(lessons.getInternalList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // filter overdue task"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.getInternalList().removeIf(task -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            LocalDateTime time \u003d LocalDateTime.parse(task.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return time.isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // sort tasks"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks.getInternalList().sort((firstTask, secondTask) -\u003e {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime firstTaskDateTime \u003d LocalDateTime.parse(firstTask.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            LocalDateTime secondTaskDateTime \u003d LocalDateTime.parse(secondTask.getTime().value, inputFormat);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return firstTaskDateTime.compareTo(secondTaskDateTime);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 assignments.equals(((AddressBook) other).assignments))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 lessons.equals(((AddressBook) other).lessons);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // multiply sum of fields with prime number 31"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return 31 * (assignments.hashCode() + lessons.hashCode());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 30,
      "hyngkng": 60,
      "minhhhnguyen2000": 38,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_ASSIGNMENT \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_REMINDED_ASSIGNMENTS \u003d assignment -\u003e assignment.isReminded();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds lessons based on NUSMods Timetable data."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void importTimetable(TimetableData data);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean hasAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Deletes the given assignment."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void deleteAssignment(Assignment target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code assignment} must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void addAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the given assignment {@code target} with {@code editedAssignment}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * existing assignment in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void setAssignment(Assignment target, Assignment editedAssignment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /** Returns an unmodifiable view of the filtered assignment list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Updates the filter of the filtered assignment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /** Returns an unmodifiable view of the reminded assignments list */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    ObservableList\u003cAssignment\u003e getRemindedAssignmentsList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /** Returns an unmodifiable view of the reminded assignments list */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /** Returns an unmodifiable view of lesson list */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 8,
      "andreatanky": 13,
      "minhhhnguyen2000": 17,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final FilteredList\u003cAssignment\u003e remindedAssignments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final FilteredList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(this.addressBook.getAssignmentList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remindedAssignments \u003d new FilteredList\u003c\u003e("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                this.addressBook.getAssignmentList(), PREDICATE_SHOW_ALL_REMINDED_ASSIGNMENTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        lessons \u003d new FilteredList\u003c\u003e(this.addressBook.getLessonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        addressBook.importTimetable(data);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return addressBook.hasAssignment(assignment);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.removeAssignment(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.addAssignment(assignment);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Assignment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Assignment} backed by the internal list of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        filteredAssignments.setPredicate(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminded Assignments List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Assignment} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getRemindedAssignmentsList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remindedAssignments;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 filteredAssignments.equals(other.filteredAssignments);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 14,
      "hyngkng": 10,
      "andreatanky": 16,
      "minhhhnguyen2000": 20,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an unmodifiable view of the Assignments list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This list will not contain any duplicate assignments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    void importTimetable(TimetableData data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5,
      "andreatanky": 3,
      "minhhhnguyen2000": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Assignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Represents an Assignment in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Remind remind;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Assignment(Name name, Deadline deadline, ModuleCode moduleCode, Remind remind) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(name, deadline, moduleCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireAllNonNull(name, deadline, moduleCode, remind);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return super.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind getRemind() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remind;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if both assignments of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 otherAssignment.getName().equals(getName())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 (otherAssignment.getDeadline().equals(getDeadline()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if the assignment already has reminders set. Otherwise, returns false."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if the assignment already has reminders set. Otherwise, returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean isReminded() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return remind.isReminded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if both assignments have the same identity and data fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * This defines a stronger notion of equality between two assignments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof Assignment)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment otherAssignment \u003d (Assignment) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return otherAssignment.getName().equals(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 otherAssignment.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                \u0026\u0026 otherAssignment.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return Objects.hash(super.getName(), getDeadline(), super.getModuleCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    // TODO: Consider printing Remind as well"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .append(getModuleCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 25,
      "hyngkng": 1,
      "andreatanky": 1,
      "minhhhnguyen2000": 14,
      "-": 48,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents the deadline of an assignment in the assignment list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            \"Deadlines should only be in the format \u0027dd-MM-uuuu HHmm\u0027, and contain a valid date and time\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String DEADLINE_DATE_TIME_FORMAT \u003d \"dd-MM-uuuu HHmm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        value \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            LocalDateTime taskDate \u003d LocalDateTime.parse(test, inputFormat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskDate.format(inputFormat);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                \u0026\u0026 value.equals(((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 63,
      "hyngkng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Represents a task\u0027s module code in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            \"Module codes should begin with 2 or 3 alphabets, have 4 numbers and may end with an alphabet.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + \"It should not be left empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Module code should begin with 2 or 3 alphabets, have 4 numbers and may end with an alphabet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z]{2,3}[0-9]{4}[a-zA-Z]?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs an {@code Module Code}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 4,
      "andreatanky": 19,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Represents an Assignment\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Tests that a {@code Assignment}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(assignment.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Remind.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a remind tag of an assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Guarantees: immutable; assignment is reminded as declared in {@link #isReminded()}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Remind {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean isReminded;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a {@code Remind}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isReminded \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind(boolean isReminded) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isReminded \u003d isReminded;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Sets remind tag to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Remind object with remind tag set to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Remind setReminder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Remind reminded \u003d new Remind();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        reminded.isReminded \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return reminded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if remind tag is set to true. Otherwise, returns false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if remind tag is set to true. Otherwise, returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean isReminded() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return isReminded;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final Deadline time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Task(Name name, Deadline time, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        requireAllNonNull(name, time, moduleCode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Deadline getTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Checks if task is the same."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @param otherTask Another task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @return True if task is the same, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 (otherTask.getTime().equals(getTime()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 26,
      "hyngkng": 6,
      "andreatanky": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/UniqueAssignmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An assignment is considered unique by comparing using {@code Assignment#isSameAssignment(Assignment)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * adding and updating of assignments uses Assignment#isSameAssignment(Assignment) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * that the assignment being added or updated is unique in terms of identity in the UniqueAssignmentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * However, the removal of an assignment uses Assignment#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * as to ensure that the assignment with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UniqueAssignmentList implements Iterable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds an assignment to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * another existing assignment in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!target.isSameAssignment(editedAssignment) \u0026\u0026 contains(editedAssignment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.set(index, editedAssignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(UniqueAssignmentList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Replaces the contents of this list with {@code assignments}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        requireAllNonNull(assignments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!assignmentsAreUnique(assignments)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        internalList.setAll(assignments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getInternalList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Iterator\u003cAssignment\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                || (other instanceof UniqueAssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAssignmentList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "andreatanky": 4,
      "minhhhnguyen2000": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Signals that the operation will result in duplicate Assignments"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * (Assignments are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public DuplicateAssignmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(\"Operation would result in duplicate assignments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Signals that the operation will result in duplicate tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * (Tasks are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final Deadline endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Lesson(Name name, Deadline deadline, Deadline endTime, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        super(name, deadline, moduleCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireAllNonNull(name, deadline, endTime, moduleCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Deadline getEndTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both lessons of the same name and same time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both lessons have the same identity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * This defines a stronger notion of equality between two lessons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherLesson.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Objects.hash(super.getName(), super.getTime(), getEndTime(), super.getModuleCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .append(getModuleCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A lesson is considered unique by comparing using {@code Lesson#isSameLesson(Lesson)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * lessons uses Lesson#isSameLesson(Lesson) for equality so as to ensure that the lesson being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * unique in terms of identity in the UniqueLessonList. However, the removal of a lesson uses Lesson#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * @see Lesson#isSameLesson(Lesson)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Removes all lessons from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cLesson\u003e getInternalList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                if (lessons.get(i).isSameLesson(lessons.get(j))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 118,
      "andreatanky": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Signals that the operation will result in duplicate Lessons (Lessons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * adding and updating of tasks uses Task#isSameTask(Task) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * that the task being added or updated is unique in terms of identity in the UniqueTaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * However, the removal of an assignment uses Task#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * as to ensure that the assignment with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e getInternalList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * another existing task in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Replaces the contents of this list with {@code task}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * {@code tasks} must not contain duplicate task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andreatanky": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Remind NOT_REMINDED \u003d new Remind();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static Assignment[] getSampleAssignments() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"CS1231S Homework\"), new Deadline(\"12-12-2020 1200\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"CS1231S\"), NOT_REMINDED),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"CS2103T Quiz\"), new Deadline(\"09-10-2020 2359\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"CS2103T\"), NOT_REMINDED),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"CS2106 Lab\"), new Deadline(\"08-08-2020 1900\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"CS2106\"), NOT_REMINDED),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"Peer review\"), new Deadline(\"25-12-2020 1200\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"CS2101\"), NOT_REMINDED),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"IS1103 Mission\"), new Deadline(\"13-10-2020 1300\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"IS1103\"), NOT_REMINDED),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            new Assignment(new Name(\"Oral Presentation\"), new Deadline(\"30-04-2020 1700\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    new ModuleCode(\"CS2101\"), NOT_REMINDED)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            sampleAb.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 8,
      "hyngkng": 4,
      "minhhhnguyen2000": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Jackson-friendly version of {@link Assignment}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final boolean isReminded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"name\") String name, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            @JsonProperty(\"module\") String moduleCode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isReminded \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        isReminded \u003d source.getRemind().isReminded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        final Remind modelRemind \u003d new Remind(isReminded);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new Assignment(modelName, modelDeadline, modelModuleCode, modelRemind);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 17,
      "hyngkng": 4,
      "andreatanky": 9,
      "minhhhnguyen2000": 10,
      "-": 43,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"name\") String name, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                             @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"module\") String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        startTime \u003d source.getTime().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Deadline.isValidDeadline(startTime)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Deadline modelStartTime \u003d new Deadline(startTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Deadline.isValidDeadline(endTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Deadline modelEndTime \u003d new Deadline(endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return new Lesson(modelName, modelStartTime, modelEndTime, modelModuleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final boolean isReminded;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given assignment details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"deadline\") String deadline,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                 @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                 @JsonProperty(\"module\") String moduleCode,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                                 @JsonProperty(\"isReminded\") boolean isReminded) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.isReminded \u003d isReminded;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (source instanceof Assignment) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            deadline \u003d source.getTime().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            isReminded \u003d ((Assignment) source).isReminded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            endTime \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            deadline \u003d source.getTime().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            endTime \u003d ((Lesson) source).getEndTime().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            isReminded \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assignment."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        final Remind modelRemind \u003d new Remind(isReminded);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (endTime.equals(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new Assignment(modelName, modelDeadline, modelModuleCode, modelRemind);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return new Lesson(modelName, modelDeadline, new Deadline(endTime), modelModuleCode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 104,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignments list contains duplicate assignment(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given assignments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public JsonSerializableAddressBook("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            @JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignments.addAll(source.getAssignmentList().stream().map(JsonAdaptedAssignment::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                                                     .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (addressBook.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            addressBook.addAssignment(assignment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            addressBook.addLesson(lesson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 21,
      "minhhhnguyen2000": 11,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleCodeArray;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleLessonArray;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Constructor for TimetableData."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableData(int semester, String[] moduleCodeArray, String[] moduleLessonArray) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCodeArray \u003d moduleCodeArray;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleLessonArray \u003d moduleLessonArray;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public int getSemester() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String[] getModuleCodeArray() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.moduleCodeArray;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public String[] getModuleLessonArray() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this.moduleLessonArray;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Returns true if both data is of the same semester and same arrays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public boolean isSameTimetableData(TimetableData otherData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (otherData \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return otherData !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 otherData.getSemester() \u003d\u003d getSemester()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 Arrays.equals(otherData.getModuleCodeArray(), getModuleCodeArray())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                \u0026\u0026 Arrays.equals(otherData.getModuleLessonArray(), getModuleLessonArray());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableRetriever.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableRetriever {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String JSON_API \u003d \"https://api.nusmods.com/v2/2020-2021/modules/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String DOT_JSON \u003d \".json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final LocalDate SEMESTER_1_START_DATE \u003d LocalDate.of(2020, 8, 10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final LocalDate SEMESTER_2_START_DATE \u003d LocalDate.of(2021, 1, 11);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final DateTimeFormatter LOCAL_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Retrieves timetable json information from NUSMods API and prints out the relevant information."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static List\u003cLesson\u003e retrieveLessons(TimetableData timetableData) throws IOException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int semester \u003d timetableData.getSemester();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        LocalDate startDate \u003d semester \u003d\u003d 1 ? SEMESTER_1_START_DATE : SEMESTER_2_START_DATE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d timetableData.getModuleCodeArray();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d timetableData.getModuleLessonArray();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int moduleIter \u003d 0; moduleIter \u003c moduleCodeArray.length; moduleIter++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String module \u003d moduleCodeArray[moduleIter];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            URL url \u003d getModuleUrl(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String inline \u003d httpGetModuleJsonData(url);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            JSONArray semesterSpecificTimetableData \u003d getSemesterSpecificTimetableData(semester, inline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String[] specificModuleLessonArray \u003d getSpecificModuleLessonArray(moduleLessonArray, moduleIter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            findLessonAndAdd(lessons, module, semesterSpecificTimetableData, specificModuleLessonArray, startDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getUrlString(String moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return JSON_API + moduleCode + DOT_JSON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static URL getModuleUrl(String moduleCode) throws MalformedURLException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String urlString \u003d getUrlString(moduleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new URL(urlString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String httpGetModuleJsonData(URL url) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        connection.connect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int responseCode \u003d connection.getResponseCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (responseCode !\u003d 200) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            throw new RuntimeException(\"HttpResponseCode: \" + responseCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String inline \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Scanner sc \u003d new Scanner(url.openStream());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            inline +\u003d sc.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return inline;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static JSONArray getSemesterSpecificTimetableData(int sem, String inline) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONObject moduleData \u003d (JSONObject) jsonParser.parse(inline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray semesterData \u003d (JSONArray) moduleData.get(\"semesterData\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONObject bothSemesterTimetableData \u003d (JSONObject) semesterData.get(sem - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray semesterSpecificTimetableData \u003d (JSONArray) bothSemesterTimetableData.get(\"timetable\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return semesterSpecificTimetableData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getSpecificModuleLessonArray(String[] moduleLessonArray, int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String specificModuleLesson \u003d moduleLessonArray[index];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] specificModuleLessonArray \u003d specificModuleLesson.split(\",\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return specificModuleLessonArray; // [\"T:1\",\"L:2\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void findLessonAndAdd(List\u003cLesson\u003e lessons, String module, JSONArray timetableData,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                         String[] moduleLessonArray, LocalDate startDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int lessonIter \u003d 0; lessonIter \u003c moduleLessonArray.length; lessonIter++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (!moduleLessonArray[0].equals(\"\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String lessonInfo \u003d moduleLessonArray[lessonIter];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addLesson(lessons, module, lessonInfo, timetableData, startDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void addLesson(List\u003cLesson\u003e lessons, String module, String lessonInfo, JSONArray timetableData,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                  LocalDate startDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonType \u003d getLessonType(lessonInfo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonNum \u003d getLessonNum(lessonInfo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int dataIter \u003d 0; dataIter \u003c timetableData.size(); dataIter++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            JSONObject currentData \u003d (JSONObject) timetableData.get(dataIter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currentLessonType \u003d (String) currentData.get(\"lessonType\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currentLessonNum \u003d (String) currentData.get(\"classNo\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (currentLessonType.equals(lessonType) \u0026\u0026 currentLessonNum.equals(lessonNum)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                addSpecificLesson(lessons, module, startDate, currentLessonType, currentData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getLessonType(String lessonInfo) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonType \u003d lessonInfo.split(\":\")[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"LEC\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Lecture\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"TUT\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"LAB\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Laboratory\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"REC\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Recitation\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        if (lessonType.equals(\"SEC\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            lessonType \u003d \"Sectional Teaching\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String getLessonNum(String lessonInfo) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String lessonNum \u003d lessonInfo.split(\":\")[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return lessonNum;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int getDayOffset(String day) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] daysOfWeek \u003d {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int dayOffset \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            String currDay \u003d daysOfWeek[i];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (currDay.equals(day)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                dayOffset \u003d i;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return dayOffset;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int[] getWeeksAsIntegerArray(JSONArray jsonWeeks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int[] weeks \u003d new int[jsonWeeks.size()];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonWeeks.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            Long week \u003d (Long) jsonWeeks.get(i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            weeks[i] \u003d week.intValue() \u003e 6 ? week.intValue() + 1 : week.intValue();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return weeks;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static void addSpecificLesson(List\u003cLesson\u003e lessons, String module, LocalDate startDate,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                                          String currentLessonType, JSONObject currentData) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String day \u003d (String) currentData.get(\"day\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String name \u003d module + \" \" + currentLessonType + \" \" + day;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        JSONArray jsonWeeks \u003d (JSONArray) currentData.get(\"weeks\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int[] weeks \u003d getWeeksAsIntegerArray(jsonWeeks);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int dayOffset \u003d getDayOffset(day);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int week : weeks) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            int daysToAdd \u003d 7 * (week - 1) + dayOffset;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            LocalDate date \u003d startDate.plusDays(daysToAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            if (date.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String startTime \u003d date.format(LOCAL_DATE_FORMATTER) + \" \" + (String) currentData.get(\"startTime\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                String endTime \u003d date.format(LOCAL_DATE_FORMATTER) + \" \" + (String) currentData.get(\"endTime\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                lessons.add(new Lesson(new Name(name), new Deadline(startTime), new Deadline(endTime),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                        new ModuleCode(module)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/timetable/TimetableUrlParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableUrlParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Parses timetable url and returns timetable data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static TimetableData parseTimetableUrl(String url) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        int semester \u003d parseTimetableUrlForSem(url);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleDataArray \u003d parseTimetableUrlForData(url);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d getModuleCodeArray(moduleDataArray);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d getModuleLessonArray(moduleDataArray);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new TimetableData(semester, moduleCodeArray, moduleLessonArray);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static int parseTimetableUrlForSem(String url) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String semester \u003d url.split(\"/sem-\", 2)[1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d semester.substring(0, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return Integer.parseInt(semester);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] parseTimetableUrlForData(String url) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String moduleData \u003d url.split(\"\\\\?\", 2)[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleDataArray \u003d moduleData.split(\"\u0026\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleDataArray; // [\"CS\u003dT:1,L\u003d2\u0026MA\u003dL:9\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getModuleCodeArray(String[] moduleDataArray) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleCodeArray \u003d moduleDataArray.clone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleCodeArray.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            moduleCodeArray[i] \u003d moduleCodeArray[i].split(\"\u003d\", 2)[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleCodeArray; // [\"CS\",\"MA\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static String[] getModuleLessonArray(String[] moduleDataArray) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        String[] moduleLessonArray \u003d moduleDataArray.clone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleLessonArray.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            moduleLessonArray[i] \u003d moduleLessonArray[i].split(\"\u003d\", 2)[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return moduleLessonArray; // [\"T:1,L:2\",\"L:9\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.model.assignment.Deadline.DEADLINE_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String OVERDUE_STYLE_CLASS \u003d \"overdue\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_SOON_STYLE_CLASS \u003d \"due-soon\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_IN_A_WEEK_STYLE_CLASS \u003d \"due-in-a-week\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline.setText(\"Deadline: \" + assignment.getDeadline().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getDueDate(dueDate, assignment.getDeadline());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getDueDate(Label label, Deadline deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String formattedDue \u003d due.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateOverdue(label);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Overdue!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toMinutes() + \" minutes\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toHours() + \" hours\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueInAWeek(label);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateOverdue(Label label) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(OVERDUE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(OVERDUE_STYLE_CLASS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateDueSoon(Label label) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateDueInAWeek(Label label) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof AssignmentCard)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new AssignmentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Assignment} using a {@code AssignmentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class AssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(new AssignmentCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f11-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private AssignmentListPanel assignmentListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private UpcomingTaskListPanel upcomingTaskListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private StackPane assignmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //System.out.println(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //System.out.println(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assignmentListPanelPlaceholder.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getRemindedAssignmentList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListPanel \u003d new UpcomingTaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(upcomingTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentListPanel getAssignmentListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return assignmentListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingTaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return upcomingTaskListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 2,
      "minhhhnguyen2000": 23,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline.setText(\"Deadline: \" + assignment.getDeadline().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cAssignment\u003e reminderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code ReminderListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Assignment} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(new ReminderCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Creates a {@code TaskCode} with the given {@code Task} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        deadline.setText(\"Start time: \" + task.getTime().value); //assignment\u0027s deadline, lesson\u0027s start time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        moduleCode.setText(\"Module: \" + task.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingAssignmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.ui.UpcomingTaskListPanel.getDueDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingAssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingAssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label dueDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentCode} with the given {@code Assignment} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingAssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name.setText(assignment.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getDueDate(dueDate, assignment.getDeadline());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode.setText(\"Module: \" + assignment.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private String overdue(LocalDateTime due) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof UpcomingAssignmentCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UpcomingAssignmentCard card \u003d (UpcomingAssignmentCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingLessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.model.assignment.Deadline.DEADLINE_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingLessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingLessonListCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_DAY_PER_MONTH \u003d 28;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String START_SOON_STYLE_CLASS \u003d \"start-soon\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String START_IN_A_WEEK_STYLE_CLASS \u003d \"start-in-a-week\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //private Label moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label startIn;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     * Creates a {@code LessonCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingLessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        name.setText(lesson.getName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        time.setText(formatTime(lesson.getTime(), lesson.getEndTime()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        getStartDate(startIn, lesson.getTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        //moduleCode.setText(\"Module: \" + lesson.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private String formatTime(Deadline startDate, Deadline endDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String date \u003d LocalDateTime.parse(startDate.value, inputFormat).toLocalDate().format("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalTime startTime \u003d LocalDateTime.parse(startDate.value, inputFormat).toLocalTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalTime endTime \u003d LocalDateTime.parse(endDate.value, inputFormat).toLocalTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return date + \" \" + startTime + \"-\" + endTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getStartDate(Label label, Deadline deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String formattedDue \u003d due.toLocalDate().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartSoon(label);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toMinutes() + \" minutes\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartSoon(label);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toHours() + \" hours\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateStartInAWeek(label);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c MIN_DAY_PER_MONTH) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in \" + duration.toDays() + \" days\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Start in months\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateStartSoon(Label label) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(START_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(START_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setStyleToIndicateStartInAWeek(Label label) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(START_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(START_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (!(other instanceof UpcomingLessonCard)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UpcomingLessonCard card \u003d (UpcomingLessonCard) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 51,
      "minhhhnguyen2000": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UpcomingTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.model.assignment.Deadline.DEADLINE_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UpcomingTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long HOUR_PER_DAY \u003d 24;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long DAY_PER_WEEK \u003d 7;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final long MIN_DAY_PER_MONTH \u003d 28;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String FXML \u003d \"UpcomingTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(DEADLINE_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_SOON_STYLE_CLASS \u003d \"due-soon\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String OVERDUE_STYLE_CLASS \u003d \"overdue\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String DUE_IN_A_WEEK_STYLE_CLASS \u003d \"due-in-a-week\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(UpcomingTaskListPanel.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ListView\u003cTask\u003e upcomingTaskListView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public UpcomingTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListView.setItems(taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        upcomingTaskListView.setCellFactory(listView -\u003e new UpcomingTaskListViewCell());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void getDueDate(Label label, Deadline deadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDateTime due \u003d LocalDateTime.parse(deadline.value, inputFormat);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String formattedDue \u003d due.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Duration duration \u003d Duration.between(now, due);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (duration.toMinutes() \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateOverdue(label);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Overdue, on \" + formattedDue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toMinutes() \u003c MIN_PER_HOUR) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toMinutes() + \" minutes, on \" + formattedDue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toHours() \u003c HOUR_PER_DAY) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueSoon(label);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toHours() + \" hours, on \" + formattedDue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c DAY_PER_WEEK) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            setStyleToIndicateDueInAWeek(label);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days, on \" + formattedDue);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else if (duration.toDays() \u003c MIN_DAY_PER_MONTH) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due in \" + duration.toDays() + \" days, on \" + formattedDue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            label.setText(\"Due on \" + formattedDue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateOverdue(Label label) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(OVERDUE_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(OVERDUE_STYLE_CLASS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateDueSoon(Label label) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_SOON_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_SOON_STYLE_CLASS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void setStyleToIndicateDueInAWeek(Label label) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d label.getStyleClass();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if (styleClass.contains(DUE_IN_A_WEEK_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        styleClass.add(DUE_IN_A_WEEK_STYLE_CLASS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    class UpcomingTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                if (task instanceof Assignment) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    setGraphic(new UpcomingAssignmentCard((Assignment) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                } else if (task instanceof Lesson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    setGraphic(new UpcomingLessonCard((Lesson) task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 127
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"card-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cLabel fx:id\u003d\"dueDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dueDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "  \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cfx:root minHeight\u003d\"1000\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ProductiveNUS\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "      \u003cVBox styleClass\u003d\"main-window\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cGridPane styleClass\u003d\"grid-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints percentWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cHBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-small-round-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cVBox fx:id\u003d\"assignmentList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" styleClass\u003d\"white-pane-with-big-round-border\" GridPane.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cStackPane fx:id\u003d\"assignmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cGridPane styleClass\u003d\"grid-with-vgap\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cRowConstraints percentHeight\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cVBox fx:id\u003d\"reminderList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" styleClass\u003d\"black-pane-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                      \u003cInsets bottom\u003d\"20\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cLabel styleClass\u003d\"reminder\" text\u003d\"Your reminders\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"170\" prefWidth\u003d\"340\" styleClass\u003d\"black-pane-with-big-round-border\" GridPane.rowIndex \u003d \"1\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                      \u003cInsets bottom\u003d\"20\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cLabel styleClass\u003d\"reminder\" text\u003d\"Upcoming tasks\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 69,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"trans-card\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 31
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 9
    }
  },
  {
    "path": "src/main/resources/view/UpcomingAssignmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"card-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"dueDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dueDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 33,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/main/resources/view/UpcomingLessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"card-with-big-round-border\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            \u003cLabel fx:id\u003d\"startIn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startIn\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 32,
      "minhhhnguyen2000": 2
    }
  },
  {
    "path": "src/main/resources/view/UpcomingTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    \u003cListView fx:id\u003d\"upcomingTaskListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 8,
      "minhhhnguyen2000": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final Index fifthAssignmentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(fifthAssignmentIndex.equals(fifthAssignmentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(fifthAssignmentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredReminderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getRemindedAssignmentList().remove(0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_HW + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.addAssignment(expectedAssignment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAssignmentList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 16,
      "-": 147,
      "printinghelloworld": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_newAssignment_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.addAssignment(validAssignment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAssignment), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAssignment), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentInList \u003d model.getAddressBook().getAssignmentList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(new AddCommand(assignmentInList), model, AddCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_assignmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStubAcceptingAssignmentAdded modelStub \u003d new ModelStubAcceptingAssignmentAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAssignment).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAssignment), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Arrays.asList(validAssignment), modelStub.assignmentsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAssignment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAssignment(validAssignment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ASSIGNMENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment cs1231SHomework \u003d new AssignmentBuilder().withName(\"CS1231S Homework\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment cs2103TTutorial \u003d new AssignmentBuilder().withName(\"CS2103T Tutorial\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs1231SHomeworkCommand \u003d new AddCommand(cs1231SHomework);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs2103TTutorialCommand \u003d new AddCommand(cs2103TTutorial);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addCs1231SHomeworkCommand.equals(addCs1231SHomeworkCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand addCs1231SHomeworkCommandCopy \u003d new AddCommand(cs1231SHomework);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addCs1231SHomeworkCommand.equals(addCs1231SHomeworkCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addCs1231SHomeworkCommand.equals(addCs2103TTutorialCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getRemindedAssignmentsList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * A Model stub that contains a single assignment."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private class ModelStubWithAssignment extends ModelStub {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        private final Assignment assignment;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ModelStubWithAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return this.assignment.isSameAssignment(assignment);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * A Model stub that always accept the assignment being added."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private class ModelStubAcceptingAssignmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final ArrayList\u003cAssignment\u003e assignmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return assignmentsAdded.stream().anyMatch(assignment::isSameAssignment);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            assignmentsAdded.add(assignment);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "hyngkng": 7,
      "andreatanky": 16,
      "minhhhnguyen2000": 49,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_NAME_HW \u003d \"CS1231S Homework\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_NAME_LAB \u003d \"CS2106 Lab\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_DEADLINE_HW \u003d \"01-01-2020 1800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_DEADLINE_LAB \u003d \"02-02-2020 2000\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_MODULE_CODE_HW \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String VALID_MODULE_CODE_LAB \u003d \"CS2100\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String VALID_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NAME_DESC_HW \u003d \" \" + PREFIX_NAME + VALID_NAME_HW;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String NAME_DESC_LAB \u003d \" \" + PREFIX_NAME + VALID_NAME_LAB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEADLINE_DESC_HW \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEADLINE_DESC_LAB \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MODULE_CODE_DESC_HW \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String MODULE_CODE_DESC_LAB \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"CS1231\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            + \"31-02-2020 0000\"; // 31st Feb does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            + PREFIX_MODULE_CODE; // empty string not allowed for module code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String REMIND_DESC \u003d \" \" + VALID_REMIND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final String INVALID_REMIND \u003d \" \" + \"remin\"; // wrong spelling"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final EditCommand.EditAssignmentDescriptor DESC_HW;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final EditCommand.EditAssignmentDescriptor DESC_LAB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DESC_HW \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_HW)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DESC_LAB \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * - the address book, filtered assignment list and selected assignment in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cAssignment\u003e expectedRemindedList \u003d new ArrayList\u003c\u003e(actualModel.getRemindedAssignmentsList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedRemindedList, actualModel.getRemindedAssignmentsList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the assignment at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void showAssignmentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d model.getFilteredAssignmentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final String[] splitName \u003d assignment.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(1, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 3,
      "hyngkng": 2,
      "minhhhnguyen2000": 28,
      "-": 76,
      "printinghelloworld": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToDelete \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, assignmentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentToDelete \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, assignmentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showNoAssignment(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAssignmentList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private void showNoAssignment(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        model.updateFilteredAssignmentList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(model.getFilteredAssignmentList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 27,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAssignmentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class EditAssignmentDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptorWithSameValues \u003d new EditAssignmentDescriptor(DESC_HW);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(DESC_HW.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(DESC_HW.equals(DESC_HW));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(DESC_LAB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new EditAssignmentDescriptorBuilder(DESC_HW).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(DESC_HW.equals(editedHw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(editedAssignment).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withName(VALID_NAME_LAB).withDeadline(VALID_DEADLINE_LAB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, new EditAssignmentDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentInFilteredList \u003d model.getFilteredAssignmentList()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(assignmentInFilteredList).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(firstAssignment).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ASSIGNMENT, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_duplicateAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // edit assignment in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignmentInList \u003d model.getAddressBook().getAssignmentList()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .get(INDEX_SECOND_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder(assignmentInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidAssignmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_invalidAssignmentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAssignmentList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withName(VALID_NAME_LAB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, DESC_HW);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor copyDescriptor \u003d new EditCommand.EditAssignmentDescriptor(DESC_HW);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ASSIGNMENT, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ASSIGNMENT, DESC_HW)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ASSIGNMENT, DESC_LAB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 63,
      "-": 108,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2106_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.IS1103_MISSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.PEER_REVIEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_zeroKeywords_noAssignmentFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void execute_multipleKeywords_multipleAssignmentsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Lab Mission Peer\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedModel.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Arrays.asList(CS2106_LAB, IS1103_MISSION, PEER_REVIEW), model.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 15,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ImportCommand(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        assertCommandSuccess(new ListCommand("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        Index.fromOneBased(1)), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        assertCommandSuccess("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//        new ListCommand(Index.fromOneBased(1)), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "andreatanky": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * {@code RemindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemind \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(RemindCommand.MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentToRemind);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToRemind);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentToRemind \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(RemindCommand.MESSAGE_REMIND_ASSIGNMENT_SUCCESS, assignmentToRemind);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), assignmentToRemind);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandSuccess(remindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAssignmentList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_alreadyRemindedAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Set reminders for assignment in filtered list in address book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment firstAssignmentReminded \u003d new AssignmentBuilder(firstAssignment).withRemindersSet().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(firstAssignment, firstAssignmentReminded);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, RemindCommand.MESSAGE_REMINDED_ASSIGNMENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void execute_alreadyRemindedAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Set reminders for assignment in filtered list in address book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInList \u003d model.getAddressBook().getAssignmentList()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                .get(INDEX_FIRST_ASSIGNMENT.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment assignmentInListReminded \u003d new AssignmentBuilder(assignmentInList).withRemindersSet().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.setAssignment(assignmentInList, assignmentInListReminded);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindCommand \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertCommandFailure(remindCommand, model, RemindCommand.MESSAGE_REMINDED_ASSIGNMENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindFirstCommand \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindSecondCommand \u003d new RemindCommand(INDEX_SECOND_ASSIGNMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(remindFirstCommand.equals(remindFirstCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        RemindCommand remindFirstCommandCopy \u003d new RemindCommand(INDEX_FIRST_ASSIGNMENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(remindFirstCommand.equals(remindFirstCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(remindFirstCommand.equals(remindSecondCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMIND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_LAB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMIND_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB_REMIND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(LAB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignmentWithRemind \u003d new AssignmentBuilder(LAB_REMIND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HW + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // multiple names with remind - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HW + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB + REMIND_DESC, new AddCommand(expectedAssignmentWithRemind));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // multiple deadlines with remind - last deadline accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + REMIND_DESC, new AddCommand(expectedAssignmentWithRemind));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // multiple module codes with remind - last module code accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB + REMIND_DESC, new AddCommand(expectedAssignmentWithRemind));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // all fields with remind"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB + REMIND_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new AddCommand(expectedAssignmentWithRemind));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // no remind"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HW + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new AddCommand(expectedAssignment));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_NAME_LAB + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // missing deadline prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + VALID_DEADLINE_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + DESC_HW,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_NAME_LAB + VALID_DEADLINE_LAB + DESC_HW,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + INVALID_DEADLINE_DESC + MODULE_CODE_DESC_LAB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_LAB + DEADLINE_DESC_LAB + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DEADLINE_DESC_LAB + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // invalid remind"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HW + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB + INVALID_REMIND, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_LAB + DEADLINE_DESC_LAB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + MODULE_CODE_DESC_LAB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "andreatanky": 4,
      "hyngkng": 4,
      "minhhhnguyen2000": 22,
      "-": 57,
      "printinghelloworld": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AssignmentUtil.getAddCommand(assignment));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(new AddCommand(assignment), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ASSIGNMENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ASSIGNMENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment assignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(assignment).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + INDEX_FIRST_ASSIGNMENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + AssignmentUtil.getEditAssignmentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ASSIGNMENT, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 2,
      "minhhhnguyen2000": 15,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ASSIGNMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_HW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS); // invalid deadline"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // valid deadline followed by invalid deadline. The test case for invalid deadline followed by valid deadline"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                parser, \"1\" + DEADLINE_DESC_LAB + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_MODULE_CODE_HW"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        + VALID_DEADLINE_HW, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ASSIGNMENT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_LAB + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                + NAME_DESC_HW;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withName(VALID_NAME_HW)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ASSIGNMENT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_HW;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withName(VALID_NAME_HW).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // deadline"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_HW;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_HW).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // module code"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_HW;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                 + DEADLINE_DESC_HW + MODULE_CODE_DESC_HW + DEADLINE_DESC_LAB + MODULE_CODE_DESC_LAB;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_LAB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        EditCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + MODULE_CODE_DESC_LAB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + DEADLINE_DESC_LAB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditAssignmentDescriptorBuilder().withDeadline(VALID_DEADLINE_LAB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 5,
      "andreatanky": 4,
      "hyngkng": 3,
      "minhhhnguyen2000": 46,
      "-": 96,
      "printinghelloworld": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"CS1231S\", \"Homework\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, \"CS1231S Homework\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS1231S \\n \\t Homework  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"99-99-9999 9999\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \"31-10-2020 0000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(INDEX_FIRST_ASSIGNMENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(INDEX_FIRST_ASSIGNMENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsModuleCode() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String moduleCodeWithWhitespace \u003d WHITESPACE + VALID_MODULE_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(moduleCodeWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 13,
      "hyngkng": 3,
      "andreatanky": 13,
      "minhhhnguyen2000": 3,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * outside of the RemindCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * same path through the RemindCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class RemindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private RemindCommandParser parser \u003d new RemindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_validArgs_returnsRemindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemindCommand(INDEX_FIRST_ASSIGNMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import seedu.address.model.assignment.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getAssignmentList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void resetData_withDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // Two assignments with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedCs1231sHw \u003d new AssignmentBuilder(CS1231S_HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e newAssignments \u003d Arrays.asList(CS1231S_HW, editedCs1231sHw);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        List\u003cLesson\u003e lessonList \u003d Arrays.asList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newAssignments, lessonList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasAssignment(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_assignmentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(addressBook.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_assignmentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addressBook.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_assignmentWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedCs1231sHw \u003d new AssignmentBuilder(CS1231S_HW)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(addressBook.hasAssignment(editedCs1231sHw));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getAssignmentList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * A stub ReadOnlyAddressBook whose assignments list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        private final ObservableList\u003cAssignment\u003e assignments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        AddressBookStub(Collection\u003cAssignment\u003e assignments, Collection\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            this.assignments.setAll(assignments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            this.lessons.setAll(lessons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return assignments;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        public void importTimetable(TimetableData data) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 13,
      "andreatanky": 7,
      "minhhhnguyen2000": 27,
      "-": 73,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAssignment(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_assignmentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(modelManager.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void hasAssignment_assignmentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.addAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(modelManager.hasAssignment(CS1231S_HW));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getFilteredAssignmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAssignmentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void getRemindedAssignmentsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e modelManager.getRemindedAssignmentsList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .withAssignment(CS1231S_HW).withAssignment(CS2103T_TUT).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String[] keywords \u003d CS1231S_HW.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.updateFilteredAssignmentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        modelManager.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 1,
      "minhhhnguyen2000": 17,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.QUIZ;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void isSameAssignment() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(HW));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_HW)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same name, same deadline, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.isSameAssignment(editedHw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void isAlreadyReminded() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // new assignment created -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment newAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(newAssignment.isReminded());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // assignment set to have reminders -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment homeworkCopy \u003d new AssignmentBuilder(HW).withRemindersSet().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(homeworkCopy.isReminded());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // assignment already has reminders set -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(QUIZ.isReminded());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different name -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Assignment editedQuiz \u003d new AssignmentBuilder(QUIZ).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different deadline -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        editedQuiz \u003d new AssignmentBuilder(QUIZ).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // already has reminders set, different address -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        editedQuiz \u003d new AssignmentBuilder(QUIZ).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(editedQuiz.isReminded());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment hwCopy \u003d new AssignmentBuilder(HW).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.equals(hwCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(HW.equals(HW));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(5));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(LAB));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Assignment editedHw \u003d new AssignmentBuilder(HW).withName(VALID_NAME_LAB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withDeadline(VALID_DEADLINE_LAB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        editedHw \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(HW.equals(editedHw));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 27,
      "hyngkng": 1,
      "minhhhnguyen2000": 74,
      "printinghelloworld": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String invalidDeadline \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void isValidDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // null deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // invalid deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"00:00\")); // time only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"deadline\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-2020\")); // date only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2a-02-2O2O aa00\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2*-02-2O2O #a00\")); // special characters within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01- 01-2020 1800\")); // spaces within date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-2020 18 00\")); // spaces within time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"00-00-0000 0000\")); // all zeros"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"31-02-2020 1800\")); // invalid day of month"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-99-2020 1800\")); // invalid month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-99999 1800\")); // invalid year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-2020 2400\")); // invalid hour"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-2020 1860\")); // invalid minute"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"2020-01-01 1800\")); // invalid format (\"uuuu-MM-dd HHmm\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"04-30-2020 1800\")); // invalid format (\"MM-dd-uuuu HHmm\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"1-01-2020 1800\")); // invalid format (\"d-MM-uuuu HHmm\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-1-2020 1800\")); // invalid format (\"dd-M-uuuu HHmm\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-20 1800\")); // invalid format (\"dd-MM-y HHmm\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-20 18:00\")); // invalid format (\"dd-MM-y HH:mm\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertFalse(Deadline.isValidDeadline(\"01-01-2020 06:00 PM\")); // invalid format (\"dd-MM-uuuu hh:mm a\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // valid deadline dates and time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"30-04-2020 1800\")); // exactly of format \"dd-MM-uuuu HHmm\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertTrue(Deadline.isValidDeadline(\"31-12-2020 2359\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 54,
      "hyngkng": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"C2300\")); // begins with one alphabet"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"ABCD1000\")); // begins with more than 3 alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"GER10\")); // only has 2 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"ABC10000\")); // has 5 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andreatanky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2040S\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                \"CS2101\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "andreatanky": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // different assignment -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .singletonList(\"CS1231S\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS1231S\", \"Homework\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2106\", \"Lab\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS4234 Lab\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Cs1231s\", \"HOmEwOrK\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2106\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        // Keywords match deadline and module code, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(predicate.test(new AssignmentBuilder().withName(\"CS1231S Homework\").withDeadline(\"20-02-2020 2002\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                .withModuleCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 15,
      "-": 58,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/UniqueAssignmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.HW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.LAB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class UniqueAssignmentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private final UniqueAssignmentList uniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertFalse(uniqueAssignmentList.contains(HW));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(HW));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void contains_assignmentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedHW \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(editedHW));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add_duplicateAssignment_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.add(HW));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_nullTargetAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignment(null, HW));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_nullEditedAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_targetAssignmentNotInList_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, HW));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentIsSameAssignment_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, HW);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "        Assignment editedHW \u003d new AssignmentBuilder(HW).withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, editedHW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(editedHW);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignment(HW, LAB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignment_editedAssignmentHasNonUniqueIdentity_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.setAssignment(HW, LAB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.remove(HW));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove_existingAssignment_removesAssignment() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.remove(HW);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_nullUniqueAssignmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .setAssignments((UniqueAssignmentList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_uniqueAssignmentList_replacesOwnListWithProvidedUniqueAssignmentList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignments(expectedUniqueAssignmentList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignments((List\u003cAssignment\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.add(HW);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d Collections.singletonList(LAB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        uniqueAssignmentList.setAssignments(assignmentList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        expectedUniqueAssignmentList.add(LAB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void setAssignments_listWithDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        List\u003cAssignment\u003e listWithDuplicateAssignments \u003d Arrays.asList(HW, HW);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                .setAssignments(listWithDuplicateAssignments));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            -\u003e uniqueAssignmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 3,
      "minhhhnguyen2000": 164,
      "printinghelloworld": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(LECTURE.isSameLesson(LECTURE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different time and moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson editedLecture \u003d new LessonBuilder(LECTURE).withTime(VALID_TIME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        editedLecture \u003d new LessonBuilder(LECTURE).withName(VALID_NAME).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        editedLecture \u003d new LessonBuilder(LECTURE).withEndTime(VALID_END_TIME).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(LECTURE.isSameLesson(editedLecture));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/UniqueLessonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.VALID_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class UniqueLessonListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private final UniqueLessonList uniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(uniqueLessonList.contains(LECTURE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(uniqueLessonList.contains(LECTURE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void contains_lessonWithDifferentIdentity_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        Lesson editedLecture \u003d new LessonBuilder(LECTURE).withName(VALID_NAME).withTime(VALID_TIME)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(uniqueLessonList.contains(editedLecture));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void add_duplicateLesson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e uniqueLessonList.add(LECTURE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.remove(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_lessonDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e uniqueLessonList.remove(LECTURE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void remove_existingLesson_removesLesson() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.add(LECTURE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        uniqueLessonList.remove(LECTURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        UniqueLessonList expectedUniquePersonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueLessonList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAssignmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAssignment.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS2103T_TUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class JsonAdaptedAssignmentTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Tutori@l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"00-00-0000 2400\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_NAME \u003d CS2103T_TUT.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_DEADLINE \u003d CS2103T_TUT.getDeadline().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d CS2103T_TUT.getModuleCode().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void toModelType_validAssignmentDetails_returnsAssignment() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(CS2103T_TUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertEquals(CS2103T_TUT, assignment.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new JsonAdaptedAssignment(INVALID_NAME, VALID_DEADLINE, VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(null, VALID_DEADLINE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new JsonAdaptedAssignment(VALID_NAME, INVALID_DEADLINE, VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_NAME, null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new JsonAdaptedAssignment(VALID_NAME, VALID_DEADLINE, INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_nullModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "                new JsonAdaptedAssignment(VALID_NAME, VALID_DEADLINE, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 8,
      "hyngkng": 4,
      "andreatanky": 3,
      "minhhhnguyen2000": 21,
      "-": 35,
      "printinghelloworld": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.CS1231S_HW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.READ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.SLIDE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void readAddressBook_invalidAssignmentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAssignmentAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void readAddressBook_invalidAndValidAssignmentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidAssignmentAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        original.addAssignment(READ);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        original.removeAssignment(CS1231S_HW);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        original.addAssignment(SLIDE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.testutil.TypicalAssignments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Path TYPICAL_ASSIGNMENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            .resolve(\"typicalAssignmentsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Path INVALID_ASSIGNMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAssignmentAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final Path DUPLICATE_ASSIGNMENT_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            .resolve(\"duplicateAssignmentAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_typicalAssignmentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ASSIGNMENTS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        AddressBook typicalAssignmentsAddressBook \u003d TypicalAssignments.getTypicalAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(addressBookFromFile, typicalAssignmentsAddressBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_invalidAssignmentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ASSIGNMENT_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void toModelType_duplicateAssignments_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ASSIGNMENT_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_ASSIGNMENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 15,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withAssignment(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Adds a new {@code Assignment} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AddressBookBuilder withAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        addressBook.addAssignment(assignment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import seedu.address.model.assignment.Remind;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class to help with building Assignment objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS1231S Homework\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"01-02-2020 1800\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Remind remind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Creates a {@code AssignmentBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remind \u003d new Remind();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Initializes the AssignmentBuilder with the data of {@code assignmentToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder(Assignment assignmentToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        name \u003d assignmentToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        deadline \u003d assignmentToCopy.getDeadline();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        moduleCode \u003d assignmentToCopy.getModuleCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        remind \u003d assignmentToCopy.getRemind();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Name} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public AssignmentBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Sets the {@code Remind} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public AssignmentBuilder withRemindersSet() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.remind \u003d new Remind().setReminder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Assignment build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new Assignment(name, deadline, moduleCode, remind);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 14,
      "hyngkng": 4,
      "minhhhnguyen2000": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class for Assignment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class AssignmentUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an add command string for adding the {@code assignment}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getAddCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getAssignmentDetails(assignment);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the part of command string for the given {@code assignment}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getAssignmentDetails(Assignment assignment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_NAME + assignment.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_DEADLINE + assignment.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + assignment.getModuleCode().moduleCode + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the part of command string for the given {@code EditAssignmentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String getEditAssignmentDescriptorDetails(EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DEADLINE).append(deadline.value).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "        descriptor.getModuleCode().ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andreatanky"
        },
        "content": "                .append(moduleCode.moduleCode).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 2,
      "andreatanky": 3,
      "hyngkng": 1,
      "minhhhnguyen2000": 13,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAssignmentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class to help with building EditAssignmentDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class EditAssignmentDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private EditCommand.EditAssignmentDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder(EditCommand.EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditAssignmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an {@code EditAssignmentDescriptor} with fields containing {@code assignment}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder(Assignment assignment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor \u003d new EditCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setName(assignment.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setDeadline(assignment.getDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setModuleCode(assignment.getModuleCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setDeadline(new Deadline(deadline));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditAssignmentDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public EditCommand.EditAssignmentDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 4,
      "minhhhnguyen2000": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.ModuleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2103T Lecture\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"01-01-2020 1200\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"01-01-2020 1400\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Deadline time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private Deadline endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a {@code LessonBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        time \u003d new Deadline(DEFAULT_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        endTime \u003d new Deadline(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        time \u003d lessonToCopy.getTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        endTime \u003d lessonToCopy.getEndTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCode \u003d lessonToCopy.getModuleCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Time} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withTime(String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.time \u003d new Deadline(time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code endTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.endTime \u003d new Deadline(endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public LessonBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new Lesson(name, time, endTime, moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the middle index of the assignment in the {@code model}\u0027s assignment list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAssignmentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the last index of the assignment in the {@code model}\u0027s assignment list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns the assignment in the {@code model}\u0027s assignment list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static Assignment getAssignment(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return model.getFilteredAssignmentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 1,
      "minhhhnguyen2000": 7,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TimetableDataBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableDataBuilder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final int DEFAULT_SEMESTER \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] DEFAULT_MODULE_CODE_ARRAY \u003d {\"CS2100\", \"CS2105\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] DEFAULT_MODULE_LESSON_ARRAY \u003d {\"TUT:01,LEC:2\", \"LEC:1,TUT:14\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleCodeArray;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private String[] moduleLessonArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Creates a {@code TimetableDataBuilder} with the default details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d DEFAULT_SEMESTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCodeArray \u003d DEFAULT_MODULE_CODE_ARRAY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleLessonArray \u003d DEFAULT_MODULE_LESSON_ARRAY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Initializes the TimetableDataBuilder with the data of {@code dataToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder(TimetableData dataToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        semester \u003d dataToCopy.getSemester();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleCodeArray \u003d dataToCopy.getModuleCodeArray();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        moduleLessonArray \u003d dataToCopy.getModuleLessonArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withSemester(int semester) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code Time} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withModuleCodeArray(String[] moduleCodeArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleCodeArray \u003d moduleCodeArray;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     * Sets the {@code endTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableDataBuilder withModuleLessonArray(String[] moduleLessonArray) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        this.moduleLessonArray \u003d moduleLessonArray;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public TimetableData build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        return new TimetableData(semester, moduleCodeArray, moduleLessonArray);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAssignments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_HW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_LAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_HW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A utility class containing a list of {@code Assignment} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TypicalAssignments {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS1231S_HW \u003d new AssignmentBuilder().withName(\"CS1231S Homework\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(\"CS1231S\").withDeadline(\"01-01-2020 1800\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2103T_TUT \u003d new AssignmentBuilder().withName(\"CS2103T Tutorial\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(\"CS2103T\").withDeadline(\"02-03-2020 2359\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2106_LAB \u003d new AssignmentBuilder().withName(\"CS2106 Lab\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"12-12-2020 1200\").withModuleCode(\"CS2106\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment CS2106_TUTORIAL_QUIZ \u003d new AssignmentBuilder().withName(\"CS2106 Tutorial Quiz\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(\"03-03-2020 0300\").withModuleCode(\"CS2106\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment IS1103_MISSION \u003d new AssignmentBuilder().withName(\"IS1103 Mission\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"12-10-2020 1900\").withModuleCode(\"IS1103\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment PEER_REVIEW \u003d new AssignmentBuilder().withName(\"Peer review\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"10-10-2020 1700\").withModuleCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment ORAL_PRESENTATION \u003d new AssignmentBuilder().withName(\"Oral presentation\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"03-12-2020 0400\").withModuleCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment READ \u003d new AssignmentBuilder().withName(\"Read notes\").withDeadline(\"01-01-2020 0100\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withModuleCode(\"CS3244\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment SLIDE \u003d new AssignmentBuilder().withName(\"Prepare slide\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            .withDeadline(\"02-02-2020 0220\").withModuleCode(\"GER1000\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Manually added - Assignment with reminders set"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final Assignment QUIZ \u003d new AssignmentBuilder().withName(\"Prepare for quiz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            .withDeadline(\"10-10-2020 2000\").withModuleCode(\"ST2334\").withRemindersSet().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    // Manually added - Assignment\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment HW \u003d new AssignmentBuilder().withName(VALID_NAME_HW).withDeadline(VALID_DEADLINE_HW)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_HW).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Assignment LAB \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "    public static final Assignment LAB_REMIND \u003d new AssignmentBuilder().withName(VALID_NAME_LAB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "printinghelloworld"
        },
        "content": "            .withDeadline(VALID_DEADLINE_LAB).withModuleCode(VALID_MODULE_CODE_LAB).withRemindersSet().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private TypicalAssignments() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical assignments."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (Assignment assignment : getTypicalAssignments()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            ab.addAssignment(assignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static List\u003cAssignment\u003e getTypicalAssignments() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1231S_HW, CS2103T_TUT, CS2106_LAB, CS2106_TUTORIAL_QUIZ,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                IS1103_MISSION, PEER_REVIEW, ORAL_PRESENTATION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 4,
      "hyngkng": 1,
      "minhhhnguyen2000": 60,
      "printinghelloworld": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_FIRST_ASSIGNMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_SECOND_ASSIGNMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static final Index INDEX_THIRD_ASSIGNMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson LECTURE \u003d new LessonBuilder().withName(\"Generic Lecture\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 1200\").withEndTime(\"01-01-2020 1400\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_TUT \u003d new LessonBuilder().withName(\"CS2100 Tutorial\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 0800\").withEndTime(\"01-01-2020 0900\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_LEC_1 \u003d new LessonBuilder().withName(\"CS2100 Lecture\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 1600\").withEndTime(\"01-01-2020 1800\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final Lesson CS2100_LEC_2 \u003d new LessonBuilder().withName(\"CS2100 Lecture\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withTime(\"01-01-2020 0900\").withEndTime(\"01-01-2020 1000\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCode(\"CS2100\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_NAME \u003d \"Generic Tutorial\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_TIME \u003d \"30-12-2019 1200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String VALID_END_TIME \u003d \"30-12-2019 1400\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTimetableData.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.timetable.TimetableData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TypicalTimetableData {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final int VALID_SEMESTER \u003d 2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_CODE_ARRAY \u003d {\"EC1301\", \"CS2103T\"};"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final String[] VALID_MODULE_LESSON_ARRAY \u003d {\"TUT:S28,LEC:1\", \"LEC:G16\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] typicalModuleCodeArray \u003d {\"CS2100\"};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    private static final String[] typicalModuleLessonArray \u003d {\"TUT:01,LEC:1\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public static final TimetableData DATA \u003d new TimetableDataBuilder()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withSemester(1)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleCodeArray(typicalModuleCodeArray)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .withModuleLessonArray(typicalModuleLessonArray)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/timetable/TimetableDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "package seedu.address.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_MODULE_CODE_ARRAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_MODULE_LESSON_ARRAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import static seedu.address.testutil.TypicalTimetableData.VALID_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "import seedu.address.testutil.TimetableDataBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "public class TimetableDataTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    public void isSameTimetableData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertTrue(DATA.isSameTimetableData(DATA));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(DATA.isSameTimetableData(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hyngkng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        // different semester and arrays -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        TimetableData editedData \u003d new TimetableDataBuilder(DATA)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withSemester(VALID_SEMESTER)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleCodeArray(VALID_MODULE_CODE_ARRAY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .withModuleLessonArray(VALID_MODULE_LESSON_ARRAY)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "        assertFalse(DATA.isSameTimetableData(editedData));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hyngkng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hyngkng": 31
    }
  }
]
